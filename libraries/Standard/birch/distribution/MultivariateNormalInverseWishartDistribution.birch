/**
 * Multivariate normal-inverse-Wishart distribution.
 */
final class MultivariateNormalInverseWishartDistribution<Arg1,Arg2,Arg3,Arg4>(
    ν:Arg1, λ:Arg2, Γ:Arg3, k:Arg4) < Distribution<Real[_]> {
  /**
   * Concentration times mean.
   */
  ν:Arg1 <- ν;

  /**
   * Concentration.
   */
  λ:Arg2 <- λ;
  
  /**
   * Accumulator for spread.
   */
  Γ:Arg3 <- Γ;
  
  /**
   * Degrees of freedom.
   */
  k:Arg4 <- k;

  override function simulate() -> Real[_] {
    return value(simulate_multivariate_normal_inverse_wishart(ν, λ, Γ, k));
  }

  override function simulateLazy() -> Real[_] {
    return eval(simulate_multivariate_normal_inverse_wishart(ν, λ, Γ, k));
  }
  
  override function logpdf(x:Real[_]) -> Real! {   
    return value(logpdf_multivariate_normal_inverse_wishart(x, ν, λ, Γ, k));
  }

  override function logpdfLazy(x:Real[_]) -> Real! {   
    return eval(logpdf_multivariate_normal_inverse_wishart(x, ν, λ, Γ, k));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_normal_inverse_wishart(x, ν, λ, Γ, k);
  }

  override function updateLazy(x:Random<Real[_]>) -> Delay? {
    return update_multivariate_normal_inverse_wishart(x, ν, λ, Γ, k);
  }

  override function hoist() -> Expression<Real> {   
    return box(logpdf_multivariate_normal_inverse_wishart(random(),
        ν, λ, Γ, k));
  }

  override function fix() {
    super.fix();
    constant(ν);
    constant(λ);
    constant(Γ);
    constant(k);
  }

  override function isMultivariateNormalInverseWishart() -> Boolean {
    return !x?;
  }

  override function getMultivariateNormalInverseWishart() ->
      (Expression<Real[_]>, Expression<Real>, Expression<Real[_,_]>,
      Expression<Real>)? {
    assert isMultivariateNormalInverseWishart();
    return box(ν, λ, Γ, k);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MultivariateNormalInverseWishart");
    buffer.set("ν", value(ν));
    buffer.set("λ", value(λ));
    buffer.set("Γ", value(Γ));
    buffer.set("k", value(k));
  }
}

function MultivariateNormalInverseWishart<Arg1,Arg2,Arg3,Arg4>(μ:Arg1,
    σ2:Arg2, Ψ:Arg3, k:Arg4) -> Distribution<Real[_]> {
  let ν <- μ/σ2;
  let λ <- 1.0/σ2;
  let Γ <- Ψ + outer(μ/sqrt(σ2));
  return make_multivariate_normal_inverse_wishart(ν, λ, Γ, k);
}
function make_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(ν:Arg1,
    λ:Arg2, Γ:Arg3, k:Arg4) -> {
  return peg_multivariate_normal_inverse_wishart(
      peg(ν), peg(λ), peg(Γ), peg(k));
}
function peg_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(
    ν:Arg1, λ:Arg2, Γ:Arg3, k:Arg4) -> {
  return MultivariateNormalInverseWishartDistribution<Arg1,Arg2,Arg3,Arg4>(
      ν, λ, Γ, k);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Arg1,
    Σ:Mul<Arg2,Random<Real[_,_]>>) -> Distribution<Real[_]> {
  let σ2 <- Σ.x;
  let Ω <- Σ.y;
  if Ω.isInverseWishart() {
    let p_Ω <- Ω.graft();
    let (Ψ, k) <- p_Ω.getInverseWishart()!;
    let ν <- μ/σ2;
    let λ <- 1.0/σ2;
    let Γ <- Ψ + outer(μ/sqrt(σ2));
    let p <- make_multivariate_normal_inverse_wishart(ν, λ, Γ, k);
    p_Ω.setMarginalized(p);
    return p;
  } else {
    return make_multivariate_gaussian(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1>(μ:Arg1, Σ:Random<Real[_,_]>) ->
    Distribution<Real[_]> {
  return MultivariateGaussian(μ, 1.0*Σ);
}

/*
 * Simulate a multivariate normal-inverse-Wishart distribution.
 *
 * @param ν Concentration times mean.
 * @param λ Concentration.
 * @param Γ Accumulator of spread.
 * @param k Degrees of freedom.
 */
function simulate_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4>(
    ν:Arg1, λ:Arg2, Γ:Arg3, k:Arg4) -> {
  let μ <- ν/λ;
  let Σ <- (Γ - outer(ν/sqrt(λ)))/λ;
  return simulate_multivariate_t(k, μ, Σ);
}

/*
 * Observe a multivariate normal-inverse-Wishart variate.
 *
 * @param x The variate.
 * @param ν Concentration times mean.
 * @param λ Concentration.
 * @param Γ Accumulator of spread.
 * @param k Degrees of freedom.
 *
 * @return the log probability density.
 */
function logpdf_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4,Arg5>(
    x:Arg1, ν:Arg2, λ:Arg3, Γ:Arg4, k:Arg5) -> {
  let μ <- ν/λ;
  let Σ <- (Γ - outer(ν/sqrt(λ)))/λ;
  return logpdf_multivariate_t(x, k, μ, Σ);
}

/*
 * Update the parameters of a multivariate normal-inverse-Wishart variate.
 *
 * @param x The variate.
 * @param ν Prior concentration times mean.
 * @param λ Prior concentration.
 * @param Γ Prior accumulator of spread.
 * @param k Prior degrees of freedom.
 *
 * @return the posterior hyperparameters `Ψ'` and `k'`.
 */
function update_multivariate_normal_inverse_wishart<Arg1,Arg2,Arg3,Arg4,Arg5>(
    x:Arg1, ν:Arg2, λ:Arg3, Γ:Arg4, k:Arg5) -> {
  let Ψ' <- Γ - outer(ν/sqrt(λ)) + outer(sqrt(λ)*(x - ν/λ));
  let k' <- k + 1;
  return make_inverse_wishart(Ψ', k');
}
