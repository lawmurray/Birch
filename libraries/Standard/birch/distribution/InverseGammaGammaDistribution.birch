/**
 * Inverse-gamma-gamma distribution.
 */
final class InverseGammaGammaDistribution<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2, β:Arg3) <
    Distribution<Real> {
  /**
   * Shape.
   */
  k:Arg1 <- k;

  /**
   * Prior shape of scale.
   */
  α:Arg2 <- α;

  /**
   * Prior scale of scale.
   */
  β:Arg3 <- β;

  override function simulate() -> Real! {
    return value(simulate_inverse_gamma_gamma(k, α, β));
  }

  override function simulateLazy() -> Real! {
    return eval(simulate_inverse_gamma_gamma(k, α, β));
  }

  override function logpdf(x:Real!) -> Real! {
    return value(logpdf_inverse_gamma_gamma(x, k, α, β));
  }

  override function logpdfLazy(x:Real!) -> Real! {
    return eval(logpdf_inverse_gamma_gamma(x, k, α, β));
  }

  override function update(x:Real!) -> Delay? {
    return update_inverse_gamma_gamma(x, k, α, β);
  }

  override function updateLazy(x:Random<Real>) -> Delay? {
    return update_inverse_gamma_gamma(x, k, α, β);
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_inverse_gamma_gamma(random(), k, α, β));
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_inverse_gamma_gamma(x, value(k), value(α), value(β));
  }

  override function lower() -> Real!? {
    return 0.0;
  }

  override function fix() {
    super.fix();
    constant(k);
    constant(α);
    constant(β);
  }
}

function InverseGammaGamma<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2, β:Arg3) ->
    Distribution<Real> {
  return make_inverse_gamma_gamma(k, α, β);
}
function make_inverse_gamma_gamma<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2, β:Arg3) -> {
  return peg_inverse_gamma_gamma(peg(k), peg(α), peg(β));
}
function peg_inverse_gamma_gamma<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2, β:Arg3) -> {
  return InverseGammaGammaDistribution<Arg1,Arg2,Arg3>(k, α, β);
}

/**
 * Create gamma distribution.
 */
function Gamma<Arg>(k:Arg, θ:Random<Real>) -> Distribution<Real> {
  if θ.isInverseGamma() {
    let p_θ <- θ.graft();
    let (α, β) <- p_θ.getInverseGamma()!;
    let p <- make_inverse_gamma_gamma(k, α, β);
    p_θ.setMarginalized(p);
    return p;
  } else {
    return make_gamma(k, θ);
  }
}

/*
 * Simulate a compound-gamma distribution.
 *
 * @param k Shape.
 * @param α Shape.
 * @param β Scale.
 */
function simulate_inverse_gamma_gamma<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2,
    β:Arg3) -> {
  return simulate_gamma(k, simulate_inverse_gamma(α, β));
}

/*
 * Observe a compound-gamma variate.
 *
 * @param x The variate.
 * @param k Shape.
 * @param α Prior shape.
 * @param β Prior scale.
 *
 * @return the log probability density.
 */
function logpdf_inverse_gamma_gamma<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2,
    α:Arg3, β:Arg4) -> {
  return (k - 1)*log(x) + α*log(β) - (α + k)*log(β + x) - lbeta(α, k);
}

/*
 * Update the parameters of an inverse-gamma distribution with a
 * gamma likelihood.
 *
 * @param x The variate.
 * @param k Shape of the gamma.
 * @param α Prior shape of the inverse-gamma.
 * @param β Prior scale of the inverse-gamma.
 *
 * @return the posterior hyperparameters `α'` and `β'`.
 */
function update_inverse_gamma_gamma<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2,
    α:Arg3, β:Arg4) -> {
  return make_inverse_gamma(α + k, β + x);
}

/*
 * CDF of a compound-gamma variate.
 *
 * @param x The variate.
 * @param k The shape.
 * @param α The prior shape.
 * @param β The prior scale.
 *
 * @return the cumulative probability.
 */
function cdf_inverse_gamma_gamma<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2, α:Arg3,
    β:Arg4) -> {
  return ibeta(k, α, x/(β + x));
}
