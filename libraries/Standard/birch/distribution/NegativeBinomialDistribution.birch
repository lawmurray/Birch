/**
 * Negative binomial distribution.
 */
final class NegativeBinomialDistribution<Arg1,Arg2>(k:Arg1, ρ:Arg2) <
    Distribution<Integer> {
  /**
   * Number of successes before the experiment is stopped.
   */
  k:Arg1 <- k;

  /**
   * Success probability.
   */
  ρ:Arg2 <- ρ;

  override function simulate() -> Integer! {
    return value(simulate_negative_binomial(k, ρ));
  }

  override function simulateLazy() -> Integer! {
    return eval(simulate_negative_binomial(k, ρ));
  }
  
  override function logpdf(x:Integer!) -> Real! {
    return value(logpdf_negative_binomial(x, k, ρ));
  }

  override function logpdfLazy(x:Integer!) -> Real! {
    return eval(logpdf_negative_binomial(x, k, ρ));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_negative_binomial(random(), k, ρ));
  }

  override function cdf(x:Integer!) -> Real!? {
    return cdf_negative_binomial(x, value(k), value(ρ));
  }

  override function lower() -> Integer!? {
    return 0;
  }

  override function fix() {
    super.fix();
    constant(k);
    constant(ρ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "NegativeBinomial");
    buffer.set("k", value(k));
    buffer.set("ρ", value(ρ));
  }
}

/**
 * Create negative binomial distribution.
 */
function NegativeBinomial<Arg1,Arg2>(k:Arg1, ρ:Arg2) ->
    Distribution<Integer> {
  return make_negative_binomial(k, ρ);
}
function make_negative_binomial<Arg1,Arg2>(k:Arg1, ρ:Arg2) -> {
  return peg_negative_binomial(peg(k), peg(ρ));
}
function peg_negative_binomial<Arg1,Arg2>(k:Arg1, ρ:Arg2) -> {
  return NegativeBinomialDistribution<Arg1,Arg2>(k, ρ);
}

/*
 * Observe a negative binomial variate.
 *
 * @param x The variate (number of failures).
 * @param k Number of successes before the experiment is stopped.
 * @param ρ Probability of success.
 *
 * @return the log probability mass.
 */
function logpdf_negative_binomial<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, ρ:Arg3) -> {
  return k*log(ρ) + x*log1p(-ρ) + lchoose(x + k - 1, x);
}

/*
 * CDF of a negative binomial variate.
 *
 * @param x The variate (number of failures).
 * @param k Number of successes before the experiment is stopped.
 * @param ρ Probability of success.
 *
 * @return the cumulative probability.
 */
function cdf_negative_binomial<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, ρ:Arg3) -> {
  return ibeta(k, x + 1, ρ);
}
