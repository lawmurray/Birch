/**
 * Chinese restaurant process (CRP).
 *
 * A Random assigned this distribution cannot be instantiated or its
 * likelihood evaluated. The distribution exists only for use as a prior on
 * a Categorical distribution.
 */
final class RestaurantDistribution<Arg1,Arg2,Arg3>(α:Arg1, θ:Arg2, n:Arg3) <
    Distribution<Real[_]> {
  /**
   * Concentration.
   */
  α:Arg1 <- α;
  
  /**
   * Strength.
   */
  θ:Arg2 <- θ;

  /**
   * Number of samples drawn in each component.
   */
  n:Arg3 <- n;

  override function simulate() -> Real[_] {
    assert false;
    return vector(0.0, 0);
  }

  override function simulateLazy() -> Real[_] {
    assert false;
    return vector(0.0, 0);
  }

  override function logpdf(x:Real[_]) -> Real! {
    assert false;
    return 0.0;
  }

  override function logpdfLazy(x:Real[_]) -> Real! {
    assert false;
    return 0.0;
  }

  override function hoist() -> Expression<Real> {
    assert false;
    return box(0.0);
  }

  override function fix() {
    super.fix();
    constant(α);
    constant(θ);
    constant(n);
  }

  override function isRestaurant() -> Boolean {
    return !x?;
  }

  override function getRestaurant() -> (Expression<Real>, Expression<Real>,
      Expression<Integer[_]>)? {
    assert isRestaurant();
    return box(α, θ, n);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Restaurant");
    buffer.set("α", value(α));
    buffer.set("θ", value(θ));
    buffer.set("n", value(n));
  }
}

/**
 * Create Chinese restaurant process.
 *
 * @param α Concentration.
 * @param θ Strength.
 * @param n Vector of number of draws of each element, also defining, by its
 *      length, the maximum number of components.
 */
function Restaurant<Arg1,Arg2,Arg3>(α:Arg1, θ:Arg2, n:Arg3) ->
    Distribution<Real[_]> {
  return make_restaurant(α, θ, n);
}
function make_restaurant<Arg1,Arg2,Arg3>(α:Arg1, θ:Arg2, n:Arg3) -> {
  return peg_restaurant(peg(α), peg(θ), peg(n));
}
function peg_restaurant<Arg1,Arg2,Arg3>(α:Arg1, θ:Arg2, n:Arg3) -> {
  return RestaurantDistribution<Arg1,Arg2,Arg3>(α, θ, n);
}

/**
 * Create Chinese restaurant process.
 *
 * @param α Concentration.
 * @param θ Strength.
 *
 * Constructs a Chinese restaurant process with a maximum of 256 components.
 */
function Restaurant<Arg1,Arg2>(α:Arg1, θ:Arg2) -> Distribution<Real[_]> {
  return Restaurant(α, θ, vector(0, 256));
}
