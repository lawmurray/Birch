/**
 * Multivariate normal-inverse-gamma distribution.
 *
 * This represents the joint distribution:
 *
 * $$
 * \begin{align*}
 * \sigma^2 & \sim \mathrm{Inverse-Gamma}(\alpha, \beta) \\
 * x \mid \sigma^2 & \sim \mathrm{N}(\mu, \Sigma\sigma^2),
 * \end{align*}
 * $$
 *
 * which may be denoted:
 *
 * $$
 * (x, \sigma^2) \sim \mathrm{Normal-Inverse-Gamma}(\mu, \Sigma, \alpha, \beta),
 * $$
 *
 * and is a conjugate prior of a Gaussian distribution with both unknown mean
 * and variance. The variance scaling is independent and identical in the
 * sense that all components of $x$ share the same $\sigma^2$.
 *
 * In model code, it is not usual to use this class directlyDistribution. Instead,
 * establish a conjugate relationship via code such as the following:
 *
 *     σ2 ~ InverseGamma(α, γ);
 *     x ~ Gaussian(μ, Σ*σ2);
 *     y ~ Gaussian(x, σ2);
 *
 * where the last argument in the distribution of `y` must appear in the
 * last argument of the distribution of `x`. The operation of `Σ` on `σ2` may
 * be multiplication on the left (as above) or the right, or division on the
 * right.
 *
 * !!! note
 *     This class does not inherit from MultivariateTDistribution, as it is
 *     typically used for a random variable that is marginalized out.
 */
final class MultivariateNormalInverseGammaDistribution<Arg1,Arg2,Arg3,Arg4>(
    ν:Arg1, Λ:Arg2, k:Arg3, γ:Arg4) < Distribution<Real[_]> {
  /**
   * Precision times mean.
   */
  ν:Arg1 <- ν;

  /**
   * Precision.
   */
  Λ:Arg2 <- Λ;

  /**
   * Degrees of freedom.
   */
  k:Arg3 <- k;

  /**
   * Variance scale.
   */
  γ:Arg4 <- γ;

  override function simulate() -> Real[_] {
    return value(simulate_multivariate_normal_inverse_gamma(ν, Λ, k, γ));
  }

  override function simulateLazy() -> Real[_] {
    return eval(simulate_multivariate_normal_inverse_gamma(ν, Λ, k, γ));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return value(logpdf_multivariate_normal_inverse_gamma(x, ν, Λ, k, γ));
  }

  override function logpdfLazy(x:Real[_]) -> Real! {
    return eval(logpdf_multivariate_normal_inverse_gamma(x, ν, Λ, k, γ));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_normal_inverse_gamma(x, ν, Λ, k, γ);
  }

  override function updateLazy(x:Random<Real[_]>) -> Delay? {
    return update_multivariate_normal_inverse_gamma(x, ν, Λ, k, γ);
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_multivariate_normal_inverse_gamma(random(),
        ν, Λ, k, γ));
  }

  override function fix() {
    super.fix();
    constant(ν);
    constant(Λ);
    constant(k);
    constant(γ);

    if hasJoined() {
      let (x, A, ν, Λ, k, γ, c, ω2) <-
          getJoined().joinMultivariateNormalInverseGammaGaussian()!;
      setUpdated(update_multivariate_normal_inverse_gamma_multivariate_gaussian(
          value(x), transpose(value(A)), value(ν), value(Λ), value(k),
          value(γ), value(c), diagonal(value(ω2))));
      setJoined(nil);
    }
  }

  override function isMultivariateNormalInverseGamma() -> Boolean {
    return !x?;
  }

  override function getMultivariateNormalInverseGamma() -> (
      Expression<Real[_]>, Expression<Real[_,_]>, Expression<Real>,
      Expression<Real>)? {
    assert isMultivariateNormalInverseGamma();
    return box(ν, Λ, k, γ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MultivariateNormalInverseGamma");
    buffer.set("ν", value(ν));
    buffer.set("Λ", value(Λ));
    buffer.set("k", value(k));
    buffer.set("γ", value(γ));
  }
}

function MultivariateNormalInverseGamma<Arg1,Arg2,Arg3,Arg4>(μ:Arg1, Σ:Arg2,
    α:Arg3, β:Arg4) -> Distribution<Real[_]> {
  let L <- chol(Σ);
  let o <- trisolve(L, μ);
  let ν <- triinnersolve(L, o);
  let Λ <- cholinv(L);
  let k <- 2.0*α;
  let γ <- 2.0*β + dot(o);
  return make_multivariate_normal_inverse_gamma(ν, Λ, k, γ);
}
function make_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(ν:Arg1,
    Λ:Arg2, k:Arg3, γ:Arg4) -> {
  return peg_multivariate_normal_inverse_gamma(peg(ν),
      peg(Λ), peg(k), peg(γ));
}
function peg_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(ν:Arg1,
    Λ:Arg2, k:Arg3, γ:Arg4) -> {
  return MultivariateNormalInverseGammaDistribution<Arg1,Arg2,Arg3,
      Arg4>(ν, Λ, k, γ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Arg1,
    Σ:Mul<Arg2,Random<Real>>) -> Distribution<Real[_]> {
  let Ω <- Σ.x;
  let ω2 <- Σ.y;
  if ω2.isInverseGamma() {
    let p_ω2 <- ω2.graft();
    let (α, β) <- p_ω2.getInverseGamma()!;
    let L <- chol(Ω);
    let o <- trisolve(L, μ);
    let ν <- triinnersolve(L, o);
    let Λ <- cholinv(L);
    let k <- 2.0*α;
    let γ <- 2.0*β + dot(o);
    let p <- make_multivariate_normal_inverse_gamma(ν, Λ, k, γ);
    p_ω2.setMarginalized(p);
    return p;
  } else {
    return make_multivariate_gaussian(μ, Σ);
  }
}

/*
 * Simulate a multivariate normal inverse-gamma distribution.
 *
 * @param ν Precision times mean.
 * @param Λ Precision.
 * @param k Degrees of freedom of inverse-gamma on covariance scale.
 * @param γ Scale of inverse-gamma on covariance scale.
 */
function simulate_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4>(
    ν:Arg1, Λ:Arg2, k:Arg3, γ:Arg4) -> {
  let n <- length(ν);
  let L <- chol(Λ);
  let o <- trisolve(L, ν);
  let μ <- triinnersolve(L, o);
  let β <- γ - dot(o);  // actually two times beta

  /* now the same as simulate_multivariate_t(k, μ, β*cholinv(L)), but can
   * inline and simplify */
  let Y <- simulate_wishart(k, n);
  let z <- standard_gaussian(n);
  
  return μ + triinnersolve(L, triinnersolve(Y, z))*sqrt(β);
}

/*
 * Observe a multivariate normal inverse-gamma variate.
 *
 * @param x The variate.
 * @param ν Precision times mean.
 * @param Λ Precision.
 * @param k Degrees of freedom of inverse-gamma on covariance scale.
 * @param γ Scale of inverse-gamma on covariance scale.
 *
 * @return the log probability density.
 */
function logpdf_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(
    x:Arg1, ν:Arg2, Λ:Arg3, k:Arg4, γ:Arg5) -> {
  let n <- length(x);
  let L <- chol(Λ);
  let o <- trisolve(L, ν);
  let μ <- triinnersolve(L, o);
  let β <- γ - dot(o);  // actually two times beta

  /* now the same as logpdf_multivariate_t(x, k, μ, β*cholinv(L)), but can
   * inline and simplify */
  let a <- 0.5*k + 0.5*n;
  let b <- 0.5*k;
  return lgamma(a) - lgamma(b) - 0.5*n*(log(π) + log(β)) + ltridet(L) -
      a*log1p(dot(triinner(L, x - μ))/β);
}

/*
 * Update the parameters of an inverse-gamma distribution with a linear
 * scaling and Gaussian likelihood.
 *
 * @param x The variate.
 * @param μ Precision times mean.
 * @param Λ Precision.
 * @param k Prior degrees of freedom of the inverse-gamma ($k = 2\alpha$).
 * @param γ Prior scale of the inverse-gamma.
 *
 * @return the posterior hyperparameters `α'` and `γ'`.
 */
function update_multivariate_normal_inverse_gamma<Arg1,Arg2,Arg3,Arg4,Arg5>(
    x:Arg1, ν:Arg2, Λ:Arg3, k:Arg4, γ:Arg5) -> {
  let n <- length(x);
  let L <- chol(Λ);
  let o <- trisolve(L, ν);
  let μ <- triinnersolve(L, o);
  let β <- γ - dot(o);  // actually two times beta
  return make_inverse_gamma(0.5*(k + n), 0.5*(β + dot(triinner(L, x - μ))));
}
