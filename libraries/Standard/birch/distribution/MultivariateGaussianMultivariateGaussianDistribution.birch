/**
 * Multivariate linear-Gaussian-Gaussian distribution.
 */
final class MultivariateGaussianMultivariateGaussianDistribution<Arg1,Arg2,
    Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) <
    Distribution<Real[_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;
    
  /**
   * Mean of mean.
   */
  μ:Arg2 <- μ;

  /**
   * Covariance of mean.
   */
  Σ:Arg3 <- Σ;

  /**
   * Offset.
   */
  c:Arg4 <- c;

  /**
   * Covariance.
   */
  Ω:Arg5 <- Ω;

  override function simulate() -> Real[_] {
    return value(simulate_multivariate_gaussian_multivariate_gaussian(
        A, μ, Σ, c, Ω));
  }

  override function simulateLazy() -> Real[_] {
    return eval(simulate_multivariate_gaussian_multivariate_gaussian(
        A, μ, Σ, c, Ω));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return value(logpdf_multivariate_gaussian_multivariate_gaussian(x,
        A, μ, Σ, c, Ω));
  }

  override function logpdfLazy(x:Real[_]) -> Real! {
    return eval(logpdf_multivariate_gaussian_multivariate_gaussian(x,
        A, μ, Σ, c, Ω));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_multivariate_gaussian_multivariate_gaussian(random(),
        A, μ, Σ, c, Ω));
  }

  override function update(x:Real[_]) -> Delay? {
    return update_multivariate_gaussian_multivariate_gaussian(x,
        A, μ, Σ, c, Ω);
  }

  override function updateLazy(x:Random<Real[_]>) -> Delay? {
    return update_multivariate_gaussian_multivariate_gaussian(x,
        A, μ, Σ, c, Ω);
  }

  override function fix() {
    super.fix();
    constant(A);
    constant(μ);
    constant(Σ);
    constant(c);
    constant(Ω);
  }

  override function isMultivariateGaussian() -> Boolean {
    return !x?;
  }

  override function getMultivariateGaussian() -> (Expression<Real[_]>,
      Expression<Real[_,_]>)? {
    assert isMultivariateGaussian();
    return box(A*μ + c, A*Σ*transpose(A) + Ω);
  }
}

function MultivariateGaussianMultivariateGaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) -> Distribution<Real[_]> {
  return make_multivariate_gaussian_multivariate_gaussian(A, μ, Σ, c, Ω);
}
function make_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) -> {
  return peg_multivariate_gaussian_multivariate_gaussian(peg(A),
      peg(μ), peg(Σ), peg(c), peg(Ω));
}
function peg_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) -> {
  return MultivariateGaussianMultivariateGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5>(A, μ, Σ, c, Ω);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2,Arg3>(μ:Add<Mul<Arg1,
    Random<Real[_]>>,Arg2>, Σ:Arg3) -> Distribution<Real[_]> {
  let A <- μ.l().l();
  let m <- μ.l().r();
  let c <- μ.r();
  if m.isMultivariateGaussian() {
    let p_m <- m.graft();
    let (μ1, Σ1) <- p_m.getMultivariateGaussian()!;
    let p <- make_multivariate_gaussian_multivariate_gaussian(A, μ1, Σ1, c,
        Σ);
    p_m.setMarginalized(p);
    return p;
  } else {
    return make_multivariate_gaussian(μ, Σ);
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Mul<Arg1,Random<Real[_]>>,
    Σ:Arg2) -> Distribution<Real[_]> {
  return MultivariateGaussian(μ + 0.0, Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Add<Random<Real[_]>,Arg1>,
    Σ:Arg2) -> Distribution<Real[_]> {
  return MultivariateGaussian(1.0*μ.l() + μ.r(), Σ);
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg>(μ:Random<Real[_]>, Σ:Arg) ->
    Distribution<Real[_]> {
  return MultivariateGaussian(1.0*μ + 0.0, Σ);
}

/*
 * Simulate a multivariate Gaussian variate with a  linear transformation and
 * multivariate Gaussian likelihood.
 *
 * @param A Scale.
 * @param μ Prior mean.
 * @param Σ Prior covariance.
 * @param c Offset.
 * @param Ω Likelihood covariance.
 *
 * @return the variate.
 */
function simulate_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5>(A:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, Ω:Arg5) -> {
  return simulate_multivariate_gaussian(A*μ + c, A*Σ*transpose(A) + Ω);
}

/*
 * Observe a multivariate Gaussian variate with a  linear transformation and
 * multivariate Gaussian likelihood.
 *
 * @param x The variate.
 * @param A Scale.
 * @param μ Prior mean.
 * @param Σ Prior covariance.
 * @param c Offset.
 * @param Ω Likelihood covariance.
 *
 * @return the log probability density.
 */
function logpdf_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, Ω:Arg6) -> {
  return logpdf_multivariate_gaussian(x, A*μ + c, A*Σ*transpose(A) + Ω);
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation and multivariate Gaussian likelihood.
 *
 * @param x The variate.
 * @param A Scale.
 * @param μ Prior mean.
 * @param Σ Prior covariance.
 * @param c Offset.
 * @param Ω Likelihood covariance.
 *
 * @return the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_multivariate_gaussian_multivariate_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6>(x:Arg1, A:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, Ω:Arg6) -> {
  let L <- chol(A*Σ*transpose(A) + Ω);
  let K' <- Σ*transpose(A);
  let μ' <- μ + K'*cholsolve(L, x - A*μ - c);
  let Σ' <- Σ - K'*cholsolve(L, A*Σ);
  return make_multivariate_gaussian(μ', Σ');
}
