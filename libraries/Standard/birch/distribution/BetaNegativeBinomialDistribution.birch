/**
 * Beta-negative-binomial distribution.
 */
final class BetaNegativeBinomialDistribution<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2,
    β:Arg3) < Distribution<Integer> {
  /**
   * Number of successes before the experiment is stopped.
   */
  k:Arg1 <- k;

  /**
   * First shape.
   */
  α:Arg2 <- α;

  /**
   * Second shape.
   */
  β:Arg3 <- β;

  override function simulate() -> Integer! {
    return value(simulate_beta_negative_binomial(k, α, β));
  }

  override function simulateLazy() -> Integer! {
    return eval(simulate_beta_negative_binomial(k, α, β));
  }

  override function logpdf(x:Integer!) -> Real! {
    return value(logpdf_beta_negative_binomial(x, k, α, β));
  }

  override function logpdfLazy(x:Integer!) -> Real! {
    return eval(logpdf_beta_negative_binomial(x, k, α, β));
  }

  override function update(x:Integer!) -> Delay? {
    return update_beta_negative_binomial(x, k, α, β);
  }

  override function updateLazy(x:Random<Integer>) -> Delay? {
    return update_beta_negative_binomial(x, k, α, β);
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_beta_negative_binomial(random(), k, α, β));
  }

  override function lower() -> Integer!? {
    return 0;
  }

  override function fix() {
    super.fix();
    constant(k);
    constant(α);
    constant(β);
  }
}

function BetaNegativeBinomial<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2, β:Arg3) ->
    Distribution<Integer> {
  return make_beta_negative_binomial(k, α, β);
}
function make_beta_negative_binomial<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2,
    β:Arg3) -> {
  return peg_beta_negative_binomial(peg(k), peg(α),
      peg(β));
}
function peg_beta_negative_binomial<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2,
    β:Arg3) -> {
  return BetaNegativeBinomialDistribution<Arg1,Arg2,Arg3>(k, α, β);
}

/**
 * Create negative binomial distribution.
 */
function NegativeBinomial<Arg1>(k:Arg1, ρ:Random<Real>) ->
    Distribution<Integer> {
  if ρ.isBeta() {
    let p_ρ <- ρ.graft();
    let (α, β) <- p_ρ.getBeta()!;
    let p <- make_beta_negative_binomial(k, α, β);
    p_ρ.setMarginalized(p);
    return p;
  } else {
    return make_negative_binomial(k, ρ);
  }
}

/*
 * Simulate a beta-negative-binomial distribution.
 *
 * @param k Number of successes.
 * @param α Shape.
 * @param β Shape.
 */
function simulate_beta_negative_binomial<Arg1,Arg2,Arg3>(k:Arg1, α:Arg2,
    β:Arg3) -> {
  return simulate_negative_binomial(k, simulate_beta(α, β));
}

/*
 * Observe a beta-negative-binomial variate
 *
 * @param x The variate.
 * @param k Number of successes.
 * @param α Shape.
 * @param β Shape.
 *
 * @return the log probability mass.
 */
function logpdf_beta_negative_binomial<Arg1,Arg2,Arg3,Arg4>(x:Arg1,
    k:Arg2, α:Arg3, β:Arg4) -> {
  return lbeta(α + k, β + x) - lbeta(α, β) + lchoose(x + k - 1, x);
}

/*
 * Update the parameters of a Beta distribution with a Negative Binomial likelihood.
 *
 * @param x The variate.
 * @param k Number of successes.
 * @param α Prior first shape.
 * @param β Prior second shape.
 *
 * @return the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_negative_binomial<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2,
    α:Arg3, β:Arg4) -> {
  return make_beta(α + k, β + x);
}
