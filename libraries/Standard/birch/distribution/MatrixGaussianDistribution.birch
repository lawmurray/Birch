/**
 * Matrix Gaussian distribution.
 */
class MatrixGaussianDistribution<Arg1,Arg2,Arg3>(M:Arg1, U:Arg2, V:Arg3) <
    Distribution<Real[_,_]> {
  /**
   * Mean.
   */
  M:Arg1 <- M;
  
  /**
   * Among-row covariance.
   */
  U:Arg2 <- U;

  /**
   * Among-column covariance.
   */
  V:Arg3 <- V;

  override function simulate() -> Real[_,_] {
    return value(simulate_matrix_gaussian(M, U, V));
  }

  override function simulateLazy() -> Real[_,_] {
    return eval(simulate_matrix_gaussian(M, U, V));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return value(logpdf_matrix_gaussian(X, M, U, V));
  }

  override function logpdfLazy(X:Real[_,_]) -> Real! {
    return eval(logpdf_matrix_gaussian(X, M, U, V));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_matrix_gaussian(random(), M, U, V));
  }

  override function fix() {
    super.fix();
    constant(M);
    constant(U);
    constant(V);
  }

  override function isMatrixGaussian() -> Boolean {
    return !x?;
  }

  override function getMatrixGaussian() -> (Expression<Real[_,_]>,
      Expression<Real[_,_]>, Expression<Real[_,_]>)? {
    assert isMatrixGaussian();
    return box(M, U, V);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MatrixGaussian");
    buffer.set("M", value(M));
    buffer.set("U", value(U));
    buffer.set("V", value(V));
  }
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2,Arg3>(M:Arg1, U:Arg2, V:Arg3) ->
    Distribution<Real[_,_]> {
  return make_matrix_gaussian(M, U, V);
}

/**
 * Create matrix Gaussian distribution with iid elements of given mean and
 * variance.
 */
function MatrixGaussian<Arg1,Arg2>(μ:Arg1, σ2:Arg2, m:Integer, n:Integer) ->
    Distribution<Real[_,_]> {
  return make_matrix_gaussian(fill(μ, m, n), identity(m), diagonal(σ2, n));
}

/**
 * Create matrix Gaussian distribution with elements of given mean and
 * independent variance.
 */
function MatrixGaussian<Arg1,Arg2>(M:Arg1, σ2:Arg2) ->
    Distribution<Real[_,_]> {
  return make_matrix_gaussian(M, identity(rows(M)), diagonal(σ2, columns(M)));
}

function make_matrix_gaussian<Arg1,Arg2,Arg3>(M:Arg1, U:Arg2, V:Arg3) ->
    Distribution<Real[_,_]> {
  return peg_matrix_gaussian(peg(M), peg(U), peg(V));
}
function peg_matrix_gaussian<Arg1,Arg2,Arg3>(M:Arg1, U:Arg2, V:Arg3) ->
    Distribution<Real[_,_]> {
  return MatrixGaussianDistribution<Arg1,Arg2,Arg3>(M, U, V);
}

/*
 * Simulate a matrix Gaussian distribution.
 *
 * @param M Mean.
 * @param U Among-row covariance.
 * @param V Among-column covariance.
 */
function simulate_matrix_gaussian<Arg1,Arg2,Arg3>(M:Arg1, U:Arg2, V:Arg3) -> {
  assert rows(M) == rows(U);
  assert rows(M) == columns(U);
  assert columns(M) == rows(V);
  assert columns(M) == columns(V);
  let m <- rows(M);
  let n <- columns(M);
  let Z <- standard_gaussian(m, n);
  return M + triouter(trimul(chol(U), Z), chol(V));
}

/*
 * Observe a matrix Gaussian distribution.
 *
 * @param X The variate.
 * @param M Mean.
 * @param U Among-row covariance.
 * @param V Among-column covariance.
 *
 * @return the log probability density.
 */
function logpdf_matrix_gaussian<Arg1,Arg2,Arg3,Arg4>(X:Arg1, M:Arg2, U:Arg3,
    V:Arg4) -> {
  let n <- rows(X);
  let p <- columns(X);
  let Z <- X - M;
  let L <- chol(U);
  let J <- chol(V);
  return -0.5*(frobenius(Z*cholinv(J), cholsolve(L, Z)) + n*p*log(2.0*π)) -
      n*ltridet(J) - p*ltridet(L);
}
