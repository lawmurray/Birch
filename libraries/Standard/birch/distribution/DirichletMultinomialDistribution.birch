/**
 * Dirichlet-multinomial distribution.
 */
final class DirichletMultinomialDistribution<Arg1,Arg2>(n:Arg1, α:Arg2) <
    Distribution<Integer[_]> {
  /**
   * Number of trials.
   */
  n:Arg1 <- n;
   
  /**
   * Category concentrations.
   */
  α:Arg2 <- α;

  override function simulate() -> Integer[_] {
    return value(simulate_dirichlet_multinomial(n, α));
  }

  override function simulateLazy() -> Integer[_] {
    return eval(simulate_dirichlet_multinomial(n, α));
  }

  override function logpdf(x:Integer[_]) -> Real! {
    return value(logpdf_dirichlet_multinomial(x, n, α));
  }

  override function logpdfLazy(x:Integer[_]) -> Real! {
    return eval(logpdf_dirichlet_multinomial(x, n, α));
  }

  override function update(x:Integer[_]) -> Delay? {
    return update_dirichlet_multinomial(x, n, α);
  }

  override function updateLazy(x:Random<Integer[_]>) -> Delay? {
    return update_dirichlet_multinomial(x, n, α);
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_dirichlet_multinomial(random(), n, α));
  }

  override function fix() {
    super.fix();
    constant(n);
    constant(α);
  }
}

function DirichletMultinomial<Arg1,Arg2>(n:Arg1, α:Arg2) ->
    Distribution<Integer[_]> {
  return make_dirichlet_multinomial(n, α);
}
function make_dirichlet_multinomial<Arg1,Arg2>(n:Arg1, α:Arg2) -> {
  return peg_dirichlet_multinomial(peg(n), peg(α));
}
function peg_dirichlet_multinomial<Arg1,Arg2>(n:Arg1, α:Arg2) -> {
  return DirichletMultinomialDistribution<Arg1,Arg2>(n, α);
}

/**
 * Create multinomial distribution.
 */
function Multinomial<Arg>(n:Arg, ρ:Random<Real[_]>) ->
    Distribution<Integer[_]> {
  if ρ.isDirichlet() {
    let p_ρ <- ρ.graft();
    let α <- p_ρ.getDirichlet()!;
    let p <- make_dirichlet_multinomial(n, α);
    p_ρ.setMarginalized(p);
    return p;
  } else {
    return make_multinomial(n, ρ);
  }
}

/*
 * Simulate a Dirichlet-multinomial distribution.
 *
 * @param n Number of trials.
 * @param α Concentrations.
 */
function simulate_dirichlet_multinomial<Arg1,Arg2>(n:Arg1, α:Arg2) -> {
  return simulate_multinomial(n, simulate_dirichlet(α));
}

/*
 * Observe a Dirichlet-multinomial variate.
 *
 * @param x The variate.
 * @param n Number of trials.
 * @param α Concentrations.
 *
 * @return the log probability mass.
 */
function logpdf_dirichlet_multinomial<Arg1,Arg2,Arg3>(x:Arg1, n:Arg2,
    α:Arg3) -> {
  return lfact(n) + lgamma(sum(α)) - lgamma(n + sum(α)) +
      sum(lgamma(x + α) - lgamma(α) - lfact(x));
}

/*
 * Update the parameters of a Dirichlet distribution with a multinomial
 * likelihood.
 *
 * @param x The variate.
 * @param n Number of trials.
 * - α': Prior concentrations.
 *
 * @return the posterior hyperparameters `α'`.
 */
function update_dirichlet_multinomial<Arg1,Arg2,Arg3>(x:Arg1, n:Arg2,
    α:Arg3) -> {
  return make_dirichlet(α + x);
}
