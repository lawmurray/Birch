/**
 * Student's $t$-distribution.
 */
final class StudentTDistribution<Arg1,Arg2,Arg3>(k:Arg1, μ:Arg2, σ2:Arg3) <
    Distribution<Real> {
  /**
   * Degrees of freedom.
   */
  k:Arg1 <- k;

  /**
   * Location parameter.
   */
  μ:Arg2 <- μ;

  /**
   * Square scale parameter.
   */
  σ2:Arg3 <- σ2;
  
  override function simulate() -> Real! {
    return value(simulate_student_t(k, μ, σ2));
  }

  override function simulateLazy() -> Real! {
    return eval(simulate_student_t(k, μ, σ2));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return value(logpdf_student_t(x, k, μ, σ2));
  }

  override function logpdfLazy(x:Real!) -> Real! {
    return eval(logpdf_student_t(x, k, μ, σ2));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_student_t(random(), k, μ, σ2));
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_student_t(x, value(k), value(μ), value(σ2));
  }

  override function fix() {
    super.fix();
    constant(k);
    constant(μ);
    constant(σ2);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "StudentT");
    buffer.set("k", value(k));
    buffer.set("μ", value(μ));
    buffer.set("σ2", value(σ2));
  }
}

/**
 * Create Student's $t$-distribution.
 */
function StudentT<Arg1,Arg2,Arg3>(k:Arg1, μ:Arg2, σ2:Arg3) ->
    Distribution<Real> {
  return make_student(k, μ, σ2);
}
function make_student<Arg1,Arg2,Arg3>(k:Arg1, μ:Arg2, σ2:Arg3) -> {
  return peg_student(peg(k), peg(μ), peg(σ2));
}
function peg_student<Arg1,Arg2,Arg3>(k:Arg1, μ:Arg2, σ2:Arg3) -> {
  return StudentTDistribution<Arg1,Arg2,Arg3>(k, μ, σ2);
}

/**
 * Create Student's $t$-distribution.
 */
function StudentT<Arg>(k:Arg) -> Distribution<Real> {
  return StudentT(k, 0.0, 1.0);
}

/*
 * Simulate a Student's $t$-distribution with location and scale.
 *
 * @param k Degrees of freedom.
 * @param μ Location.
 * @param σ2 Squared scale.
 */
function simulate_student_t<Arg1,Arg2,Arg3>(k:Arg1, μ:Arg2, σ2:Arg3) -> {
  let u <- simulate_chi_squared(k);
  return simulate_gaussian(μ, σ2*k/u);
}

/*
 * Observe a Student's $t$ variate.
 *
 * @param x The variate.
 * @param k Degrees of freedom.
 *
 * @return the log probability density.
 */
function logpdf_student_t<Arg1,Arg2>(x:Arg1, k:Arg2) -> {
  let a <- 0.5*k + 0.5;
  let b <- 0.5*k;
  return lgamma(a) - lgamma(b) - 0.5*log(π*k) - a*log1p(x*x/k);
}

/*
 * Observe a Student's $t$ variate with location and scale.
 *
 * @param x The variate.
 * @param k Degrees of freedom.
 * @param μ Location.
 * @param σ2 Scale.
 *
 * @return the log probability density.
 */
function logpdf_student_t<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2, μ:Arg3,
    σ2:Arg4) -> {
  let a <- 0.5*k + 0.5;
  let b <- 0.5*k;
  let z <- (x - μ)/sqrt(σ2);
  return lgamma(a) - lgamma(b) - 0.5*log(k*π*σ2) - a*log1p(z*z/k);
}

/*
 * CDF of a Student's $t$ variate.
 *
 * @param x The variate.
 * @param k Degrees of freedom.
 *
 * @return the cumulative probability.
 */
function cdf_student_t<Arg1,Arg2>(x:Arg1, k:Arg2) -> {
  return ibeta(0.5*k, 0.5*k, 0.5*x/sqrt(pow(x, 2.0) + k) + 0.5);
}

/*
 * CDF of a Student's $t$ variate with location and scale.
 *
 * @param x The variate.
 * @param k Degrees of freedom.
 * @param μ Location.
 * @param σ2 Squared scale.
 *
 * @return the cumulative probability.
 */
function cdf_student_t<Arg1,Arg2,Arg3,Arg4>(x:Arg1, k:Arg2, μ:Arg3,
    σ2:Arg4) -> {
  return cdf_student_t((x - μ)/sqrt(σ2), k);
}
