/**
 * Dirichlet distribution.
 */
final class DirichletDistribution<Arg>(α:Arg) < Distribution<Real[_]> {
  /**
   * Concentration.
   */
  α:Arg <- α;

  override function simulate() -> Real[_] {
    return simulate_dirichlet(value(α));
  }
  
  override function simulateLazy() -> Real[_] {
    return simulate_dirichlet(eval(α));
  }

  override function logpdf(x:Real[_]) -> Real! {
    return value(logpdf_dirichlet(x, α));
  }

  override function logpdfLazy(x:Real[_]) -> Real! {
    return eval(logpdf_dirichlet(x, α));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_dirichlet(random(), value(α)));
  }

  override function fix() {
    super.fix();
    constant(α);
  }

  override function isDirichlet() -> Boolean {
    return !x?;
  }

  override function getDirichlet() -> Expression<Real[_]>? {
    assert isDirichlet();
    return box(α);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Dirichlet");
    buffer.set("α", value(α));
  }
}

/**
 * Create Dirichlet distribution.
 */
function Dirichlet<Arg>(α:Arg) -> Distribution<Real[_]> {
  return make_dirichlet(α);
}
function make_dirichlet<Arg>(α:Arg) -> {
  return peg_dirichlet(peg(α));
}
function peg_dirichlet<Arg>(α:Arg) -> {
  return DirichletDistribution<Arg>(α);
}

/*
 * Observe a Dirichlet variate.
 *
 * @param x The variate.
 * @param α Concentrations.
 *
 * @return the log probability density.
 */
function logpdf_dirichlet<Arg1,Arg2>(x:Arg1, α:Arg2) -> {
  return sum(hadamard(α, log(x)) - log(x) - lgamma(α)) + lgamma(sum(α));
}
