/**
 * Gaussian distribution with linear transformation of multivariate Gaussian
 * prior.
 */
final class MultivariateGaussianGaussianDistribution<Arg1,Arg2,Arg3,Arg4,
    Arg5>(a:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, ω2:Arg5) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;
    
  /**
   * Prior mean.
   */
  μ:Arg2 <- μ;

  /**
   * Prior covariance.
   */
  Σ:Arg3 <- Σ;

  /**
   * Offset.
   */
  c:Arg4 <- c;
  
  /**
   * Likelihood variance.
   */
  ω2:Arg5 <- ω2;

  override function simulate() -> Real! {
    return value(simulate_gaussian(dot(a, μ) + c, dot(a, Σ*a) + ω2));
  }

  override function simulateLazy() -> Real! {
    return eval(simulate_gaussian(dot(a, μ) + c, dot(a, Σ*a) + ω2));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return value(logpdf_gaussian(x, dot(a, μ) + c, dot(a, Σ*a) + ω2));
  }

  override function logpdfLazy(x:Real!) -> Real! {
    return eval(logpdf_gaussian(x, dot(a, μ) + c, dot(a, Σ*a) + ω2));
  }

  override function update(x:Real!) -> Delay? {
    return update_multivariate_gaussian_gaussian(x, a, μ, Σ, c, ω2);
  }

  override function updateLazy(x:Random<Real>) -> Delay? {
    return update_multivariate_gaussian_gaussian(x, a, μ, Σ, c, ω2);
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_gaussian(random(), dot(a, μ) + c, dot(a, Σ*a) + ω2));
  }
  
  override function cdf(x:Real!) -> Real!? {
    return cdf_gaussian(x, value(dot(a, μ) + c), value(dot(a, Σ*a) + ω2));
  }

  override function fix() {
    super.fix();
    constant(a);
    constant(μ);
    constant(Σ);
    constant(c);
    constant(ω2);
  }

  override function isGaussian() -> Boolean {
    return !x?;
  }

  override function getGaussian() -> (Expression<Real>, Expression<Real>)? {
    assert isGaussian();
    return box(dot(a, μ) + c, dot(a, Σ*a) + ω2);
  }
}

function MultivariateGaussianGaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(a:Arg1,
    μ:Arg2, Σ:Arg3, c:Arg4, ω2:Arg5) -> Distribution<Real> {
  return make_multivariate_gaussian_gaussian(a, μ, Σ, c, ω2);
}
function make_multivariate_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(
    a:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, ω2:Arg5) -> {
  return peg_multivariate_gaussian_gaussian(peg(a), peg(μ),
      peg(Σ), peg(c), peg(ω2));
}
function peg_multivariate_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5>(
    a:Arg1, μ:Arg2, Σ:Arg3, c:Arg4, ω2:Arg5) -> {
  return MultivariateGaussianGaussianDistribution<Arg1,Arg2,Arg3,
      Arg4,Arg5>(a, μ, Σ, c, ω2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:Add<Dot<Arg1,Random<Real[_]>>,Arg2>,
    σ2:Arg3) -> Distribution<Real> {
  let a <- μ.x.x;
  let m <- μ.x.y;
  let c <- μ.y;
  if m.isMultivariateGaussian() {
    let p_m <- m.graft();
    let (μ1, Σ1) <- p_m.getMultivariateGaussian()!;
    let p <- make_multivariate_gaussian_gaussian(a, μ1, Σ1, c, σ2);
    p_m.setMarginalized(p);
    return p;
  } else {
    return make_gaussian(μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Dot<Arg1,Random<Real[_]>>, σ2:Arg2) ->
    Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/*
 * Update the parameters of a multivariate Gaussian distribution with a 
 * linear transformation involving a dot product, and a multivariate Gaussian
 * likelihood.
 *
 * @param x The variate.
 * @param a Scale.
 * @param μ Prior mean.
 * @param Σ Prior covariance.
 * @param c Offset.
 * @param ω2 Likelihood covariance.
 *
 * @return the posterior hyperparameters `μ'` and `Σ'`.
 */
function update_multivariate_gaussian_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6>(
    x:Arg1, a:Arg2, μ:Arg3, Σ:Arg4, c:Arg5, ω2:Arg6) -> {
  let k' <- Σ*a/(dot(a, Σ*a) + ω2);
  let μ' <- μ + k'*(x - dot(a, μ) - c);
  let Σ' <- Σ - outer(k', a)*Σ;
  return make_multivariate_gaussian(μ', Σ');
}
