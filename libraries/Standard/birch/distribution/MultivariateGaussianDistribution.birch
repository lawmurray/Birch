/**
 * Multivariate Gaussian distribution.
 */
final class MultivariateGaussianDistribution<Arg1,Arg2>(μ:Arg1, Σ:Arg2) <
    Distribution<Real[_]> {
  /**
   * Mean.
   */
  μ:Arg1 <- μ;
  
  /**
   * Covariance.
   */
  Σ:Arg2 <- Σ;

  override function simulate() -> Real[_] {
    return value(simulate_multivariate_gaussian(μ, Σ));
  }

  override function simulateLazy() -> Real[_] {
    return eval(simulate_multivariate_gaussian(μ, Σ));
  }
  
  override function logpdf(x:Real[_]) -> Real! {
    return value(logpdf_multivariate_gaussian(x, μ, Σ));
  }

  override function logpdfLazy(x:Real[_]) -> Real! {
    return eval(logpdf_multivariate_gaussian(x, μ, Σ));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_multivariate_gaussian(random(), μ, Σ));
  }

  override function fix() {
    super.fix();
    constant(μ);
    constant(Σ);
  }

  override function isMultivariateGaussian() -> Boolean {
    return !x?;
  }

  override function getMultivariateGaussian() -> (Expression<Real[_]>,
      Expression<Real[_,_]>)? {
    assert isMultivariateGaussian();
    return box(μ, Σ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "MultivariateGaussian");
    buffer.set("μ", value(μ));
    buffer.set("Σ", value(Σ));
  }
}

/**
 * Create multivariate Gaussian distribution.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Arg1, Σ:Arg2) ->
    Distribution<Real[_]> {
  return make_multivariate_gaussian(μ, Σ);
}

/**
 * Create multivariate Gaussian distribution with iid elements of given mean
 * and variance.
 */
function MultivariateGaussian<Arg1,Arg2>(μ:Arg1, σ2:Arg2, n:Integer) ->
    Distribution<Real[_]> {
  return make_multivariate_gaussian(fill(μ, n), diagonal(σ2, n));
}

function make_multivariate_gaussian<Arg1,Arg2>(μ:Arg1, Σ:Arg2) -> {
  return peg_multivariate_gaussian(peg(μ), peg(Σ));
}
function peg_multivariate_gaussian<Arg1,Arg2>(μ:Arg1, Σ:Arg2) -> {
  return MultivariateGaussianDistribution<Arg1,Arg2>(μ, Σ);
}

/*
 * Simulate a multivariate Gaussian distribution.
 *
 * @param μ Mean.
 * @param Σ Covariance.
 *
 * @return the variate.
 */
function simulate_multivariate_gaussian<Arg1,Arg2>(μ:Arg1, Σ:Arg2) -> {
  assert length(μ) == rows(Σ);
  assert length(μ) == columns(Σ);
  let n <- length(μ);
  let z <- standard_gaussian(n);
  return μ + trimul(chol(Σ), z);
}

/*
 * Observe a multivariate Gaussian variate.
 *
 * @param x The variate.
 * @param μ Mean.
 * @param Σ Covariance.
 *
 * @return the log probability density.
 */
function logpdf_multivariate_gaussian<Arg1,Arg2,Arg3>(x:Arg1, μ:Arg2,
    Σ:Arg3) -> {
  let n <- length(x);
  let L <- chol(Σ);
  return -0.5*(dot(trisolve(L, x - μ)) + n*log(2.0*π)) - ltridet(L);
}
