/**
 * Binomial distribution.
 */
final class BinomialDistribution<Arg1,Arg2>(n:Arg1, ρ:Arg2) <
    Distribution<Integer> {
  /**
   * Number of trials.
   */
  n:Arg1 <- n;

  /**
   * Success probability.
   */
  ρ:Arg2 <- ρ;

  override function simulate() -> Integer! {
    return value(simulate_binomial(n, ρ));
  }
  
  override function simulateLazy() -> Integer! {
    return eval(simulate_binomial(n, ρ));
  }

  override function logpdf(x:Integer!) -> Real! {
    return value(logpdf_binomial(x, n, ρ));
  }

  override function logpdfLazy(x:Integer!) -> Real! {
    return eval(logpdf_binomial(x, n, ρ));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_binomial(random(), n, ρ));
  }

  override function cdf(x:Integer!) -> Real!? {
    return cdf_binomial(x, value(n), value(ρ));
  }

  override function lower() -> Integer!? {
    return 0;
  }
  
  override function upper() -> Integer!? {
    return value(n);
  }

  override function fix() {
    super.fix();
    constant(n);
    constant(ρ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Binomial");
    buffer.set("n", value(n));
    buffer.set("ρ", value(ρ));
  }

  override function isBoundedDiscrete() -> Boolean {
    return !x?;
  }

  override function getBoundedDiscrete() -> (Expression<Real[_]>, Integer!)? {
    assert isBoundedDiscrete();
    let p <- exp(logpdf_binomial(iota(0, wait(value(n)) + 1), n, ρ));
    return (box(p), 0);
  }
}

/**
 * Create binomial distribution.
 */
function Binomial<Arg1,Arg2>(n:Arg1, ρ:Arg2) -> Distribution<Integer> {
  return make_binomial(n, ρ);
}
function make_binomial<Arg1,Arg2>(n:Arg1, ρ:Arg2) -> {
  return peg_binomial(peg(n), peg(ρ));
}
function peg_binomial<Arg1,Arg2>(n:Arg1, ρ:Arg2) -> {
  return BinomialDistribution<Arg1,Arg2>(n, ρ);
}

/*
 * Observe a binomial variate.
 *
 * @param x The variate.
 * @param n Number of trials.
 * @param ρ Probability of a true result.
 *
 * @return the log probability mass.
 */
function logpdf_binomial<Arg1,Arg2,Arg3>(x:Arg1, n:Arg2, ρ:Arg3) -> {
  return x*log(ρ) + (n - x)*log1p(-ρ) + lchoose(n, x);
}

/*
 * CDF of a binomial variate.
 *
 * @param x The variate.
 * @param n Number of trials.
 * @param ρ Probability of a true result.
 *
 * @return the cumulative probability.
 */
function cdf_binomial<Arg1,Arg2,Arg3>(x:Arg1, n:Arg2, ρ:Arg3) -> {
  return ibeta(n - x, x + 1, 1.0 - ρ);
}
