/**
 * Gaussian distribution with linear transformation of multivariate
 * normal-inverse-gamma prior.
 */
final class MultivariateNormalInverseGammaGaussianDistribution<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, ν:Arg2, Λ:Arg3, k:Arg4, γ:Arg5,
    c:Arg6, ω2:Arg7) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;

  /**
   * Precision times mean.
   */
  ν:Arg2 <- ν;

  /**
   * Precision.
   */
  Λ:Arg3 <- Λ;

  /**
   * Prior degrees of freedom.
   */
  k:Arg4 <- k;

  /**
   * Prior scale.
   */
  γ:Arg5 <- γ;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Likelihood variance scale.
   */
  ω2:Arg7 <- ω2;

  override function supportsJoin() -> Boolean {
    return true;
  }

  override function simulate() -> Real! {
    if !this.joined? {
      return value(simulate_multivariate_normal_inverse_gamma_gaussian(
          a, ν, Λ, k, γ, c, ω2));
    } else {
      let (x, A, ν, Λ, k, γ, c, ω2) <-
          this.joined!.joinMultivariateNormalInverseGammaGaussian()!;
      let p <- update_multivariate_normal_inverse_gamma_multivariate_gaussian(
          x, transpose(A), ν, Λ, k, γ, c, diagonal(ω2));
      return value(simulate_multivariate_normal_inverse_gamma_gaussian(
          this.a, p.ν, p.Λ, p.k, p.γ, this.c, this.ω2));
    }        
  }

  override function simulateLazy() -> Real! {
    if !this.joined? {
      return eval(simulate_multivariate_normal_inverse_gamma_gaussian(
          a, ν, Λ, k, γ, c, ω2));
    } else {
      let (x, A, ν, Λ, k, γ, c, ω2) <-
          this.joined!.joinMultivariateNormalInverseGammaGaussian()!;
      let p <- update_multivariate_normal_inverse_gamma_multivariate_gaussian(
          x, transpose(A), ν, Λ, k, γ, c, diagonal(ω2));
      return eval(simulate_multivariate_normal_inverse_gamma_gaussian(
          this.a, p.ν, p.Λ, p.k, p.γ, this.c, this.ω2));
    }        
  }

  override function logpdf(x':Real!) -> Real! {
    if !this.joined? {
      return value(logpdf_multivariate_normal_inverse_gamma_gaussian(x',
          a, ν, Λ, k, γ, c, ω2));
    } else {
      let (x, A, ν, Λ, k, γ, c, ω2) <-
          this.joined!.joinMultivariateNormalInverseGammaGaussian()!;
      let p <- update_multivariate_normal_inverse_gamma_multivariate_gaussian(
          x, transpose(A), ν, Λ, k, γ, c, diagonal(ω2));
      return value(logpdf_multivariate_normal_inverse_gamma_gaussian(x',
          this.a, p.ν, p.Λ, p.k, p.γ, this.c, this.ω2));
    }
  }

  override function logpdfLazy(x':Real!) -> Real! {
    if !this.joined? {
      return eval(logpdf_multivariate_normal_inverse_gamma_gaussian(x',
          a, ν, Λ, k, γ, c, ω2));
    } else {
      let (x, A, ν, Λ, k, γ, c, ω2) <-
          this.joined!.joinMultivariateNormalInverseGammaGaussian()!;
      let p <- update_multivariate_normal_inverse_gamma_multivariate_gaussian(
          x, transpose(A), ν, Λ, k, γ, c, diagonal(ω2));
      return eval(logpdf_multivariate_normal_inverse_gamma_gaussian(x',
          this.a, p.ν, p.Λ, p.k, p.γ, this.c, this.ω2));
    }
  }

  override function update(x:Real!) -> Delay? {
    if !this.joined? {
      return update_multivariate_normal_inverse_gamma_gaussian(x,
          a, ν, Λ, k, γ, c, ω2);
    } else {
      let (x, A, ν, Λ, k, γ, c, ω2) <-
          this.joinMultivariateNormalInverseGammaGaussian()!;
      return update_multivariate_normal_inverse_gamma_multivariate_gaussian(x,
          transpose(A), ν, Λ, k, γ, c, diagonal(ω2));
    }
  }

  override function updateLazy(x:Random<Real>) -> Delay? {
    if !this.joined? {
      return update_multivariate_normal_inverse_gamma_gaussian(x,
          a, ν, Λ, k, γ, c, ω2);
    } else {
      let (x, A, ν, Λ, k, γ, c, ω2) <-
          this.joinMultivariateNormalInverseGammaGaussian()!;
      return update_multivariate_normal_inverse_gamma_multivariate_gaussian(x,
          transpose(A), ν, Λ, k, γ, c, diagonal(ω2));
    }
  }

  override function hoist() -> Expression<Real> {
    let (x, A, ν, Λ, k, γ, c, ω2) <-
        this.joinMultivariateNormalInverseGammaGaussian()!;
    return box(logpdf_multivariate_normal_inverse_gamma_multivariate_gaussian(
        x, transpose(A), ν, Λ, k, γ, c, diagonal(ω2)));
  }

  override function cdf(x:Real!) -> Real!? {
    assert !this.joined?;
    return cdf_multivariate_normal_inverse_gamma_gaussian(x, value(a),
        value(ν), value(Λ), value(c), value(k), value(γ), value(ω2));
  }

  override function fix() {
    super.fix();
    constant(a);
    constant(ν);
    constant(Λ);
    constant(k);
    constant(γ);
    constant(c);
    constant(ω2);

    if hasJoined() {
      let (x, A, ν, Λ, k, γ, c, ω2) <-
          getJoined().joinMultivariateNormalInverseGammaGaussian()!;
      let p <- update_multivariate_normal_inverse_gamma_multivariate_gaussian(
          value(x), transpose(value(A)), value(ν), value(Λ), value(k),
          value(γ), value(c), diagonal(value(ω2)));
      setUpdated(make_multivariate_normal_inverse_gamma_gaussian(this.a, p.ν,
          p.Λ, p.k, p.γ, this.c, this.ω2));
      setJoined(nil);
    }
  }

  override function getMultivariateNormalInverseGammaGaussian() ->
      (Expression<Real[_]>, Expression<Real[_]>, Expression<Real[_,_]>,
      Expression<Real>, Expression<Real>, Expression<Real>,
      Expression<Real>)? {
    return box(a, ν, Λ, k, γ, c, ω2);
  }

  override function joinMultivariateNormalInverseGammaGaussian() ->
      (Expression<Real[_]>, Expression<Real[_,_]>, Expression<Real[_]>,
      Expression<Real[_,_]>, Expression<Real>, Expression<Real>,
      Expression<Real[_]>, Expression<Real[_]>)? {
    x:StackExpression<Random<Real>,Real>;
    A:PackExpression<Expression<Real[_]>,Real>;
    c:StackExpression<Expression<Real>,Real>;
    ω2:StackExpression<Expression<Real>,Real>;
    p:Distribution<Real> <- this;
    while true {
      let x' <- p.random();
      let (a', ν', Λ', k', γ', c', ω2') <-
          p.getMultivariateNormalInverseGammaGaussian()!;
      x.push(x');
      A.push(a');
      c.push(c');
      ω2.push(ω2');
      if p.hasJoined() && p.getJoined().isSubordinate() {
        p <- Distribution<Real>?(p.getJoined())!;
      } else {
        return (x, A, ν', Λ', k', γ', c, ω2);
      }
    }
  }
}

function MultivariateNormalInverseGammaGaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,
    Arg7>(a:Arg1, μ:Arg2, Σ:Arg3, α:Arg4, β:Arg5, c:Arg6, ω2:Arg7) ->
    Distribution<Real> {
  let L <- chol(Σ);
  let Λ <- cholinv(L);
  let o <- trisolve(L, μ);
  let ν <- triinnersolve(L, o);
  let k <- 2.0*α;
  let γ <- 2.0*β + dot(o);
  return make_multivariate_normal_inverse_gamma_gaussian(a, ν, Λ, k, γ, c, ω2);
}
function make_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, ν:Arg2, Λ:Arg3, k:Arg4, γ:Arg5, c:Arg6,
    ω2:Arg7) -> {
  return peg_multivariate_normal_inverse_gamma_gaussian(peg(a),
      peg(ν), peg(Λ), peg(k), peg(γ), peg(c),
      peg(ω2));
}
function peg_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, ν:Arg2, Λ:Arg3, k:Arg4, γ:Arg5, c:Arg6,
    ω2:Arg7) -> {
  return MultivariateNormalInverseGammaGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(a, ν, Λ, k, γ, c, ω2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:Add<Dot<Arg1,Random<Real[_]>>,Arg2>,
    σ2:Mul<Arg3,Random<Real>>) -> Distribution<Real> {
  let a <- μ.l().l();
  let m <- μ.l().r();
  let c <- μ.r();
  let ω2 <- σ2.l();
  let τ2 <- σ2.r();
  if τ2.isInverseGamma() && m.isMultivariateNormalInverseGamma() &&
      τ2.hasMarginalized() && τ2.getMarginalized().getUpdated() ==
      m.getDistribution().getUpdated() {
    let p_τ2 <- τ2.getDistribution();
    let p_m <- m.graft();
    let (ν, Λ, k, γ) <- p_m.getMultivariateNormalInverseGamma()!;
    let p <- make_multivariate_normal_inverse_gamma_gaussian(a, ν, Λ, k, γ,
        c, ω2);
    if p_m.hasJoined() {
      p.setJoined(p_m.getJoined());  // carry forward
      p_m.setJoined(nil);
    }
    p_τ2.setSecondOrder(true);
    p_m.setMarginalized(p);
    return p;
  } else if τ2.isInverseGamma() {
    let p_τ2 <- τ2.graft();
    let (α, β) <- p_τ2.getInverseGamma()!;
    let γ <- 2.0*β + pow(μ, 2.0)/ω2;
    let p <- make_normal_inverse_gamma(μ/ω2, 1.0/ω2, 2.0*α, γ);
    p_τ2.setMarginalized(p);
    return p;
  } else if m.isMultivariateGaussian() {
    let p_m <- m.graft();
    let (m1, S) <- p_m.getMultivariateGaussian()!;
    let p <- make_multivariate_gaussian_gaussian(a, m1, S, c, σ2);
    p_m.setMarginalized(p);
    return p;
  } else {
    return make_gaussian(μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Add<Dot<Arg1,Random<Real[_]>>,Arg2>,
    σ2:Random<Real>) -> Distribution<Real> {
  return Gaussian(μ, 1.0*σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Dot<Arg1,Random<Real[_]>>,
    σ2:Mul<Arg2,Random<Real>>) -> Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Dot<Arg,Random<Real[_]>>, σ2:Random<Real>) ->
    Distribution<Real> {
  return Gaussian(μ + 0.0, 1.0*σ2);
}

/*
 * Simulate a Gaussian distribution with a linear transformation of a
 * multivariate linear normal inverse-gamma prior.
 *
 * @param a Scale vector.
 * @param ν Precision times mean.
 * @param Λ Precision.
 * @param k Variance degrees of freedom.
 * @param γ Variance scale.
 * @param c Offset.
 * @param ω2 Likelihood variance scale.
 */
function simulate_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(a:Arg1, ν:Arg2, Λ:Arg3, k:Arg4, γ:Arg5, c:Arg6,
    ω2:Arg7) -> {
  let L <- chol(Λ);
  let o <- trisolve(L, ν);
  let μ <- triinnersolve(L, o);
  let β <- γ - dot(o);  // actually two times beta
  let m <- dot(a, μ) + c;
  let s2 <- (β/k)*(ω2 + dot(trisolve(L, a)));
  return simulate_student_t(k, m, s2);
}

/*
 * Observe a Gaussian variate with a multivariate linear normal inverse-gamma
 * prior with linear transformation.
 *
 * @param x The variate.
 * @param a Scale vector.
 * @param ν Precision times mean.
 * @param Λ Precision.
 * @param k Degrees of freedom.
 * @param γ Variance scale.
 * @param c Offset.
 * @param ω2 Likelihood variance scale.
 *
 * @return the log probability density.
 */
function logpdf_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, ν:Arg3, Λ:Arg4,
    k:Arg5, γ:Arg6, c:Arg7, ω2:Arg8) -> {
  let L <- chol(Λ);
  let o <- trisolve(L, ν);
  let μ <- triinnersolve(L, o);
  let β <- γ - dot(o);  // actually two times beta
  let m <- dot(a, μ) + c;
  let s2 <- (β/k)*(ω2 + dot(trisolve(L, a)));
  return logpdf_student_t(x, k, m, s2);
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * linear transformation involving a dot product, and Gaussian likelihood.
 *
 * @param x The variate.
 * @param a Scale.
 * @param ν Prior Precision times mean.
 * @param Λ Prior precision.
 * @param k Prior variance degrees of freedom.
 * @param γ Prior variance scale.
 * @param c Offset.
 * @param ω2 Likelihood variance scale.
 *
 * @return the posterior hyperparameters `ν'`, `Λ'`, `k'` and `γ'`.
 */
function update_multivariate_normal_inverse_gamma_gaussian<Arg1,
    Arg2,Arg3,Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, ν:Arg3, Λ:Arg4,
    k:Arg5, γ:Arg6, c:Arg7, ω2:Arg8) -> {
  let Λ' <- Λ + outer(a/sqrt(ω2));
  let ν' <- ν + a*((x - c)/ω2);
  let k' <- k + 1.0;
  let γ' <- γ + pow(x - c, 2.0)/ω2;
  return make_multivariate_normal_inverse_gamma(ν', Λ', k', γ');
}

/*
 * CDF of a Gaussian variate with a multivariate linear normal inverse-gamma
 * prior with linear transformation.
 *
 * @param x The variate.
 * @param a Scale.
 * @param ν Precision times mean.
 * @param Λ Precision.
 * @param c Offset.
 * @param k Variance degrees of freedom.
 * @param γ Variance scale.
 * @param ω2 Likelihood variance scale.
 *
 * @return the cumulative probability.
 */
function cdf_multivariate_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, ν:Arg3, Λ:Arg4, c:Arg5, k:Arg6,
    γ:Arg7, ω2:Arg8) -> {
  let L <- chol(Λ);
  let o <- trisolve(L, ν);
  let μ <- triinnersolve(L, o);
  let β <- γ - dot(o);  // actually two times beta
  let m <- dot(a, μ) + c;
  let s2 <- (β/k)*(ω2 + dot(trisolve(L, a)));
  return cdf_student_t(x, k, m, s2);
}
