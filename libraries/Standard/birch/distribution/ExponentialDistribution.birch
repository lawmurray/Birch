/**
 * Exponential distribution.
 */
final class ExponentialDistribution<Arg1>(λ:Arg1) < Distribution<Real> {
  /**
   * Rate.
   */
  λ:Arg1 <- λ;

  override function simulate() -> Real! {
    return value(simulate_exponential(λ));
  }

  override function simulateLazy() -> Real! {
    return eval(simulate_exponential(λ));
  }

  override function logpdf(x:Real!) -> Real! {
    return value(logpdf_exponential(x, λ));
  }

  override function logpdfLazy(x:Real!) -> Real! {
    return eval(logpdf_exponential(x, λ));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_exponential(random(), λ));
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_exponential(x, value(λ));
  }

  override function lower() -> Real!? {
    return 0.0;
  }

  override function fix() {
    super.fix();
    constant(λ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Exponential");
    buffer.set("λ", value(λ));
  }
}

/**
 * Create Exponential distribution.
 */
function Exponential<Arg>(λ:Arg) -> Distribution<Real> {
  return make_exponential(λ);
}
function make_exponential<Arg>(λ:Arg) -> {
  return peg_exponential(peg(λ));
}
function peg_exponential<Arg>(λ:Arg) -> {
  return ExponentialDistribution<Arg>(λ);
}

/*
 * Observe an exponential variate.
 *
 * @param x The variate.
 * @param λ Rate.
 *
 * @return the log probability density.
 */
function logpdf_exponential<Arg1,Arg2>(x:Arg1, λ:Arg2) -> {
  return where(0.0 <= x, log(λ) - λ*x, -inf);
}

/*
 * CDF of an exponential variate.
 *
 * @param x The variate.
 * @param λ Rate.
 *
 * @return the cumulative probability.
 */
function cdf_exponential<Arg1,Arg2>(x:Arg1, λ:Arg2) -> {
  return where(0.0 < x, -expm1(-λ*x), 0.0);
}
