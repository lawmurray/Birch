/**
 * Gaussian distribution with linear transformation of normal-inverse-gamma
 * prior.
 */
final class NormalInverseGammaGaussianDistribution<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, ν:Arg2, λ:Arg3, k:Arg4, γ:Arg5, c:Arg6,
    s2:Arg7) < Distribution<Real> {
  /**
   * Scale.
   */
  a:Arg1 <- a;
    
  /**
   * Precision times mean.
   */
  ν:Arg2 <- ν;

  /**
   * Precision.
   */
  λ:Arg3 <- λ;

  /**
   * Degrees of freedom.
   */
  k:Arg4 <- k;

  /**
   * Accumulator of variance scale.
   */
  γ:Arg5 <- γ;

  /**
   * Offset.
   */
  c:Arg6 <- c;

  /**
   * Likelihood variance scale.
   */
  s2:Arg7 <- s2;

  override function simulate() -> Real! {
    return value(simulate_normal_inverse_gamma_gaussian(a, ν, λ, k, γ, c, s2));
  }

  override function simulateLazy() -> Real! {
    return eval(simulate_normal_inverse_gamma_gaussian(a, ν, λ, k, γ, c, s2));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return value(logpdf_normal_inverse_gamma_gaussian(x, a, ν, λ, k, γ, c, s2));
  }

  override function logpdfLazy(x:Real!) -> Real! {
    return eval(logpdf_normal_inverse_gamma_gaussian(x, a, ν, λ, k, γ, c, s2));
  }

  override function update(x:Real!) -> Delay? {
    return update_normal_inverse_gamma_gaussian(x, a, ν, λ, k, γ, c, s2);
  }

  override function updateLazy(x:Random<Real>) -> Delay? {
    return update_normal_inverse_gamma_gaussian(x, a, ν, λ, k, γ, c, s2);
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_normal_inverse_gamma_gaussian(x, value(a), value(ν),
        value(λ), value(k), value(γ), value(c), value(s2));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_normal_inverse_gamma_gaussian(random(), a, ν, λ, k, γ,
        c, s2));
  }

  override function fix() {
    super.fix();
    constant(a);
    constant(ν);
    constant(λ);
    constant(k);
    constant(γ);
    constant(c);
    constant(s2);
  }
}

function NormalInverseGammaGaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(
    a:Arg1, μ:Arg2, σ2:Arg3, α:Arg4, β:Arg5, c:Arg6, s2:Arg7) ->
    Distribution<Real> {
  let γ <- 2.0*β + pow(μ, 2.0)/σ2;
  return make_normal_inverse_gamma_gaussian(a, μ/σ2, 1.0/σ2, 2.0*α, γ, c, s2);
}
function make_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,
    Arg7>(a:Arg1, ν:Arg2, λ:Arg3, k:Arg4, γ:Arg5, c:Arg6, s2:Arg7) -> {
  return peg_normal_inverse_gamma_gaussian(peg(a), peg(ν),
      peg(λ), peg(k), peg(γ), peg(c), peg(s2));
}
function peg_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,
    Arg7>(a:Arg1, ν:Arg2, λ:Arg3, k:Arg4, γ:Arg5, c:Arg6, s2:Arg7)  -> {
  return NormalInverseGammaGaussianDistribution<Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,
      Arg7>(a, ν, λ, k, γ, c, s2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2,Arg3>(μ:Add<Mul<Arg1,Random<Real>>,Arg2>,
    σ2:Mul<Arg3,Random<Real>>) -> Distribution<Real> {
  let a <- μ.l().l();
  let m <- μ.l().r();
  let c <- μ.r();
  let ω2 <- σ2.l();
  let τ2 <- σ2.r();
  if τ2.isInverseGamma() && m.isNormalInverseGamma() &&
      τ2.hasMarginalized() && τ2.getMarginalized().getUpdated() ==
      m.getDistribution().getUpdated() {
    let p_τ2 <- τ2.getDistribution();
    let p_m <- m.graft();
    let (ν, λ, k, γ) <- p_m.getNormalInverseGamma()!;
    let p <- make_normal_inverse_gamma_gaussian(a, ν, λ, k, γ, c, ω2);
    if p_m.hasJoined() {
      p.setJoined(p_m.getJoined());  // carry forward
      p_m.setJoined(nil);
    }
    p_τ2.setSecondOrder(true);
    p_m.setMarginalized(p);
    return p;
  } else if τ2.isInverseGamma() {
    let p_τ2 <- τ2.graft();
    let (α, β) <- p_τ2.getInverseGamma()!;
    let γ <- 2.0*β + pow(μ, 2.0)/ω2;
    let p <- make_normal_inverse_gamma(μ/ω2, 1.0/ω2, 2.0*α, γ);
    p_τ2.setMarginalized(p);
    return p;
  } else if m.isGaussian() {
    let p_m <- m.graft();
    let (m1, s2) <- p_m.getGaussian()!;
    let p <- make_gaussian_gaussian(a, m1, s2, c, σ2);
    p_m.setMarginalized(p);
    return p;
  } else {
    return make_gaussian(μ, σ2);
  }
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Add<Mul<Arg1,Random<Real>>,Arg2>,
    σ2:Random<Real>) -> Distribution<Real> {
  return Gaussian(μ, 1.0*σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg1,Arg2>(μ:Mul<Arg1,Random<Real>>,
    σ2:Mul<Arg2,Random<Real>>) -> Distribution<Real> {
  return Gaussian(μ + 0.0, σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Random<Real>, σ2:Mul<Arg,Random<Real>>) ->
     Distribution<Real> {
  return Gaussian(1.0*μ + 0.0, σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian(μ:Random<Real>, σ2:Random<Real>) -> Distribution<Real> {
  return Gaussian(1.0*μ + 0.0, 1.0*σ2);
}

/**
 * Create Gaussian distribution.
 */
function Gaussian<Arg>(μ:Mul<Arg,Random<Real>>, σ2:Random<Real>) ->
    Distribution<Real> {
  return Gaussian(μ + 0.0, 1.0*σ2);
}

/*
 * Simulate a Gaussian distribution with a normal inverse-gamma prior.
 *
 * @param a Scale.
 * @param ν Precision times mean.
 * @param λ Precision.
 * @param k Degrees of freedom.
 * @param γ Accumulator of variance scale.
 * @param c Offset.
 * @param s2 Likelihood variance scale.
 */
function simulate_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,
    Arg5,Arg6,Arg7>(a:Arg1, ν:Arg2, λ:Arg3, k:Arg4, γ:Arg5, c:Arg6,
    s2:Arg7) -> {
  let β <- γ - pow(ν, 2.0)/λ;
  return simulate_student_t(k, a*ν/λ + c, (β/k)*(pow(a, 2.0)/λ + s2));
}

/*
 * Observe a Gaussian variate with a normal inverse-gamma prior with linear
 * transformation.
 *
 * @param x The variate.
 * @param a Scale.
 * @param ν Precision times mean.
 * @param λ Precision.
 * @param k Degrees of freedom.
 * @param γ Accumulator of variance scale.
 * @param c Offset.
 * @param s2 Likelihood variance scale.
 *
 * @return the log probability density.
 */
function logpdf_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, ν:Arg3, λ:Arg4, k:Arg5, γ:Arg6, c:Arg7,
    s2:Arg8) -> {
  let β <- γ - pow(ν, 2.0)/λ;
  return logpdf_student_t(x, k, a*ν/λ + c, (β/k)*(pow(a, 2.0)/λ + s2));
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * Gaussian likelihood.
 *
 * @param x The variate.
 * @param a Scale.
 * @param ν Prior precision times mean.
 * @param λ Prior precision.
 * @param k Prior degrees of freedom.
 * @param γ Prior accumulator of variance scale.
 * @param c Offset.
 * @param s2 Likelihood variance scale.
 *
 * @return the posterior hyperparameters `ν'`, `λ'`, `k'` and `γ'`.
 */
function update_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, ν:Arg3, λ:Arg4, k:Arg5, γ:Arg6, c:Arg7,
    s2:Arg8) -> {
  let λ' <- λ + pow(a, 2.0)/s2;
  let ν' <- ν + a*(x - c)/s2;
  let k' <- k + 1;
  let γ' <- γ + pow(x - c, 2.0)/s2;
  return make_normal_inverse_gamma(ν', λ', k', γ');
}

/*
 * Update the parameters of a normal inverse-gamma distribution with a
 * Gaussian likelihood.
 *
 * @param x Vector of variates.
 * @param a Vector of scales.
 * @param ν Prior precision times mean.
 * @param λ Prior precision.
 * @param k Prior degrees of freedom.
 * @param γ Prior accumulator of variance scale.
 * @param c Offset.
 * @param s2 Vector of likelihood variance scales.
 *
 * @return the posterior hyperparameters `ν'`, `λ'`, `k'` and `γ'`.
 */
function update_join_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, ν:Arg3, λ:Arg4, k:Arg5, γ:Arg6, c:Arg7,
    s2:Arg8) -> {
  let n <- length(x);
  let z <- x - c;
  let λ' <- λ + dot(a)/s2;
  let ν' <- ν + dot(a, z)/s2;
  let k' <- k + n;
  let γ' <- γ + dot(z)/s2;
  return make_normal_inverse_gamma(ν', λ', k', γ');
}

/*
 * CDF of a Gaussian variate with a normal inverse-gamma prior with linear
 * transformation.
 *
 * @param x The variate.
 * @param a Scale.
 * @param ν Precision times mean.
 * @param λ Precision.
 * @param k Degrees of freedom.
 * @param γ Accumulator of variance scale.
 * @param c Offset.
 * @param s2 Likelihood variance scale.
 *
 * @return the cumulative probability.
 */
function cdf_normal_inverse_gamma_gaussian<Arg1,Arg2,Arg3,Arg4,Arg5,
    Arg6,Arg7,Arg8>(x:Arg1, a:Arg2, ν:Arg3, λ:Arg4, k:Arg5, γ:Arg6, c:Arg7,
    s2:Arg8) -> {
  let β <- γ - pow(ν, 2.0)/λ;
  return cdf_student_t(x, k, a*ν/λ + c, (β/k)*(pow(a, 2.0)/λ + s2));
}
