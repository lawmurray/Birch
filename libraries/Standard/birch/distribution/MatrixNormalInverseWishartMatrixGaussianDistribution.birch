/**
 * Matrix Gaussian distribution with linear transformation of
 * matrix-normal-inverse-Wishart prior.
 */
class MatrixNormalInverseWishartMatrixGaussianDistribution<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(A:Arg1, N:Arg2, Λ:Arg3, Γ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) < Distribution<Real[_,_]> {
  /**
   * Scale.
   */
  A:Arg1 <- A;

  /**
   * Among-row concentration times mean.
   */
  N:Arg2 <- N;

  /**
   * Among-row concentration.
   */
  Λ:Arg3 <- Λ;

  /**
   * Accumulator for among-column spread.
   */
  Γ:Arg4 <- Γ;

  /**
   * Degrees of freedom.
   */
  k:Arg5 <- k;

  /**
   * Offset.
   */
  C:Arg6 <- C;

  /**
   * Additional among-row spread.
   */
  Φ:Arg7 <- Φ;

  override function simulate() -> Real[_,_] {
    return value(simulate_matrix_normal_inverse_wishart_matrix_gaussian(
        A, N, Λ, Γ, k, C, Φ));
  }

  override function simulateLazy() -> Real[_,_] {
    return eval(simulate_matrix_normal_inverse_wishart_matrix_gaussian(
        A, N, Λ, Γ, k, C, Φ));
  }
  
  override function logpdf(X:Real[_,_]) -> Real! {
    return value(logpdf_matrix_normal_inverse_wishart_matrix_gaussian(
        X - C, A, N, Λ, Γ, k, Φ));
  }

  override function logpdfLazy(X:Real[_,_]) -> Real! {
    return eval(logpdf_matrix_normal_inverse_wishart_matrix_gaussian(
        X - C, A, N, Λ, Γ, k, Φ));
  }

  override function update(X:Real[_,_]) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(
        X - C, A, N, Λ, Γ, k, Φ);
  }

  override function updateLazy(X:Random<Real[_,_]>) -> Delay? {
    return update_matrix_normal_inverse_wishart_matrix_gaussian(
        X - C, A, N, Λ, Γ, k, Φ);
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_matrix_normal_inverse_wishart_matrix_gaussian(
        random() - C, A, N, Λ, Γ, k, Φ));
  }

  override function fix() {
    super.fix();
    constant(A);
    constant(N);
    constant(Λ);
    constant(Γ);
    constant(k);
    constant(C);
    constant(Φ);
  }
}

function MatrixNormalInverseWishartMatrixGaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(A:Arg1, M:Arg2, Σ:Arg3, Ψ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> Distribution<Real[_,_]> {
  let L <- chol(Σ);
  let O <- trisolve(L, M);
  let N <- triinnersolve(L, O);
  let Λ <- cholinv(L);
  let Γ <- Ψ + inner(O);
  return make_matrix_normal_inverse_wishart_matrix_gaussian(A, N, Λ, Γ, k, C,
      Φ);
}
function make_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, N:Arg2, Λ:Arg3, Γ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return peg_matrix_normal_inverse_wishart_matrix_gaussian(peg(A),
      peg(N), peg(Λ), peg(Γ), peg(k), peg(C),
      peg(Φ));
}
function peg_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, N:Arg2, Λ:Arg3, Γ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  return MatrixNormalInverseWishartMatrixGaussianDistribution<
      Arg1,Arg2,Arg3,Arg4,Arg5,Arg6,Arg7>(A, N, Λ, Γ, k, C, Φ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2,Arg3>(M:Add<Mul<Arg1,Random<Real[_,_]>>,
    Arg2>, Σ:Arg3, Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  let A <- M.l.l;
  let M1 <- M.l.r;
  let C <- M.r;
  if Ψ.isInverseWishart() && M1.isMatrixNormalInverseWishart() &&
      Ψ.hasMarginalized() && Ψ.getMarginalized().getUpdated() ==
      M1.getDistribution().getUpdated() {
    let p_Ψ <- Ψ.getDistribution();
    let p_M1 <- M1.graft();
    let (N2, Λ1, Γ1, k) <- p_M1.getMatrixNormalInverseWishart()!;
    let p <- make_matrix_normal_inverse_wishart_matrix_gaussian(A, N2, Λ1, Γ1,
        k, C, Σ);
    p_Ψ.setSecondOrder(true);
    p_M1.setMarginalized(p);
    return p;
  } else if Ψ.isInverseWishart() {
    let p_Ψ <- Ψ.graft();
    let (Ψ1, k) <- p_Ψ.getInverseWishart()!;
    let L <- chol(Σ);
    let O <- trisolve(L, M);
    let N <- triinnersolve(L, O);
    let Λ <- cholinv(L);
    let Γ <- Ψ1 + inner(O);
    let p <- make_matrix_normal_inverse_wishart(N, Λ, Γ, k);
    p_Ψ.setMarginalized(p);
    return p;
  } else {
    return make_matrix_gaussian(M, Σ, Ψ);
  }
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg1,Arg2>(M:Mul<Arg1,Random<Real[_,_]>>, Σ:Arg2,
    Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  return MatrixGaussian(M + 0.0, Σ, Ψ);
}

/**
 * Create matrix Gaussian distribution.
 */
function MatrixGaussian<Arg>(M:Random<Real[_,_]>, Σ:Arg,
    Ψ:Random<Real[_,_]>) -> Distribution<Real[_,_]> {
  return MatrixGaussian(1.0*M + 0.0, Σ, Ψ);
}

/*
 * Simulate matrix-normal-inverse-Wishart-matrix-Gaussian variate.
 *
 * @param A Scale.
 * @param N Among-row concentration times mean.
 * @param Λ Among-row concentration.
 * @param Γ Accumulator for among-column spread.
 * @param k Degrees of freedom.
 * @param C Offset.
 * @param Φ Additional among-row spread.
 *
 * @return the variate.
 */
function simulate_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,
    Arg3,Arg4,Arg5,Arg6,Arg7>(A:Arg1, N:Arg2, Λ:Arg3, Γ:Arg4, k:Arg5, C:Arg6,
    Φ:Arg7) -> {
  let L <- chol(Λ);
  let O <- trisolve(L, N);
  let M <- triinnersolve(L, O);
  let Σ <- inner(trisolve(L, transpose(A))) + Φ;
  let Ψ <- Γ - inner(O);
  return simulate_matrix_t(k, A*M + C, Σ, Ψ);
}

/*
 * Observe matrix-normal-inverse-Wishart-matrix-Gaussian variate.
 *
 * @param Y The variate, minus offset.
 * @param A Scale.
 * @param N Among-row concentration times mean.
 * @param Λ Among-row concentration.
 * @param Γ Accumulator for among-column spread.
 * @param k Degrees of freedom.
 * @param Φ Additional among-row spread.
 *
 * @return the log probability density.
 */
function logpdf_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(Y:Arg1, A:Arg2, N:Arg3, Λ:Arg4, Γ:Arg5, k:Arg6,
    Φ:Arg7) -> {
  let L <- chol(Λ);
  let O <- trisolve(L, N);
  let M <- triinnersolve(L, O);
  let Σ <- inner(trisolve(L, transpose(A))) + Φ;
  let Ψ <- Γ - inner(O);
  return logpdf_matrix_t(Y, k, A*M, Σ, Ψ);
}

/*
 * Update the parameters of a Gaussian variate with linear transformation
 * of matrix-normal-inverse-Wishart prior.
 *
 * @param Y The variate, minus offset.
 * @param A Scale.
 * @param N Prior among-row concentration times mean.
 * @param Λ Prior among-row concentration.
 * @param Γ Prior accumulator for among-column spread.
 * @param k Prior degrees of freedom.
 * @param Φ Additional among-row spread.
 *
 * @return the posterior hyperparameters `N'`, `Λ'`, `Γ'` and `k'`.
 */
function update_matrix_normal_inverse_wishart_matrix_gaussian<Arg1,Arg2,Arg3,
    Arg4,Arg5,Arg6,Arg7>(Y:Arg1, A:Arg2, N:Arg3, Λ:Arg4, Γ:Arg5, k:Arg6,
    Φ:Arg7) -> {
  let n <- rows(Y);
  let L <- chol(Φ);
  let B <- trisolve(L, A);
  let C <- trisolve(L, Y);
  let Λ' <- Λ + inner(B);
  let N' <- N + inner(B, C);
  let Γ' <- Γ + inner(C);
  let k' <- k + n;
  return make_matrix_normal_inverse_wishart(N', Λ', Γ', k');
}
