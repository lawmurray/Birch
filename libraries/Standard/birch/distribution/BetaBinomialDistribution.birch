/**
 * Beta-binomial distribution.
 */
final class BetaBinomialDistribution<Arg1,Arg2,Arg3>(n:Arg1, α:Arg2, β:Arg3) <
    Distribution<Integer> {
  /**
   * Number of trials.
   */
  n:Arg1 <- n;

  /**
   * First shape.
   */
  α:Arg2 <- α;

  /**
   * Second shape.
   */
  β:Arg3 <- β;

  override function simulate() -> Integer! {
    return value(simulate_beta_binomial(n, α, β));
  }
  
  override function simulateLazy() -> Integer! {
    return eval(simulate_beta_binomial(n, α, β));
  }
  
  override function logpdf(x:Integer!) -> Real! {
    return value(logpdf_beta_binomial(x, n, α, β));
  }

  override function logpdfLazy(x:Integer!) -> Real! {
    return eval(logpdf_beta_binomial(x, n, α, β));
  }

  override function update(x:Integer!) -> Delay? {
    return update_beta_binomial(x, n, α, β);
  }

  override function updateLazy(x:Random<Integer>) -> Delay? {
    return update_beta_binomial(x, n, α, β);
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_beta_binomial(random(), n, α, β));
  }

  override function cdf(x:Integer!) -> Real!? {
    return cdf_beta_binomial(x, value(n), value(α), value(β));
  }
  
  override function lower() -> Integer!? {
    return 0;
  }
  
  override function upper() -> Integer!? {
    return value(n);
  }

  override function fix() {
    super.fix();
    constant(n);
    constant(α);
    constant(β);
  }

  override function isBoundedDiscrete() -> Boolean {
    return !x?;
  }

  override function getBoundedDiscrete() -> (Expression<Real[_]>, Integer!)? {
    assert isBoundedDiscrete();
    let p <- exp(logpdf_beta_binomial(iota(0, wait(value(n)) + 1), n, α, β));
    return (box(p), 0);
  }
}

function BetaBinomial<Arg1,Arg2,Arg3>(n:Arg1, α:Arg2, β:Arg3) ->
    Distribution<Integer> {
  return make_beta_binomial(n, α, β);
}
function make_beta_binomial<Arg1,Arg2,Arg3>(n:Arg1, α:Arg2, β:Arg3) -> {
  return peg_beta_binomial(peg(n), peg(α), peg(β));
}
function peg_beta_binomial<Arg1,Arg2,Arg3>(n:Arg1, α:Arg2, β:Arg3) -> {
  return BetaBinomialDistribution<Arg1,Arg2,Arg3>(n, α, β);
}

/**
 * Create binomial distribution.
 */
function Binomial<Arg1>(n:Arg1, ρ:Random<Real>) -> Distribution<Integer> {
  if ρ.isBeta() {
    let p_ρ <- ρ.graft();
    let (α, β) <- p_ρ.getBeta()!;
    let p <- make_beta_binomial(n, α, β);
    p_ρ.setMarginalized(p);
    return p;
  } else {
    return make_binomial(n, ρ);
  }
}

/*
 * Simulate a beta-binomial distribution.
 *
 * @param n Number of trials.
 * @param α First shape.
 * @param β Second shape.
 */
function simulate_beta_binomial<Arg1,Arg2,Arg3>(n:Arg1, α:Arg2, β:Arg3) -> {
  return simulate_binomial(n, simulate_beta(α, β));
}

/*
 * Observe a beta-binomial variate.
 *
 * @param x The variate.
 * @param n Number of trials.
 * @param α First shape.
 * @param β Second shape.
 *
 * @return the log probability mass.
 */
function logpdf_beta_binomial<Arg1,Arg2,Arg3,Arg4>(x:Arg1, n:Arg2, α:Arg3,
    β:Arg4) -> {
  return lbeta(x + α, n - x + β) - lbeta(α, β) + lchoose(n, x);
}

/*
 * Update the parameters of a Beta distribution with a Binomial likelihood.
 *
 * @param x The variate.
 * @param n Number of trials.
 * @param α Prior first shape.
 * @param β Prior second shape.
 *
 * @return the posterior hyperparameters `α'` and `β'`.
 */
function update_beta_binomial<Arg1,Arg2,Arg3,Arg4>(x:Arg1, n:Arg2, α:Arg3,
    β:Arg4) -> {
  return make_beta(α + x, β + n - x);
}

/*
 * CDF of a beta-binomial variate.
 *
 * @param x The variate.
 * @param n Number of trials.
 * @param α Shape.
 * @param β Shape.
 *
 * @return the cumulative probability.
 */
function cdf_beta_binomial(x:Integer, n:Integer, α:Real, β:Real) -> Real! {
  return sum(exp(logpdf_beta_binomial(iota(0, x + 1), n, α, β)));
}
