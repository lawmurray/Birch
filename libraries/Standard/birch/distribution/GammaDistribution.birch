/**
 * Gamma distribution.
 */
final class GammaDistribution<Arg1,Arg2>(k:Arg1, θ:Arg2) < Distribution<Real> {
  /**
   * Shape.
   */
  k:Arg1 <- k;
  
  /**
   * Scale.
   */
  θ:Arg2 <- θ;

  override function simulate() -> Real! {
    return value(simulate_gamma(k, θ));
  }

  override function simulateLazy() -> Real! {
    return eval(simulate_gamma(k, θ));
  }
  
  override function logpdf(x:Real!) -> Real! {
    return value(logpdf_gamma(x, k, θ));
  }

  override function logpdfLazy(x:Real!) -> Real! {
    return eval(logpdf_gamma(x, k, θ));
  }

  override function hoist() -> Expression<Real> {
    return box(logpdf_gamma(random(), k, θ));
  }

  override function cdf(x:Real!) -> Real!? {
    return cdf_gamma(x, value(k), value(θ));
  }

  override function lower() -> Real!? {
    return 0.0;
  }

  override function fix() {
    super.fix();
    constant(k);
    constant(θ);
  }

  override function isGamma() -> Boolean {
    return !x?;
  }

  override function getGamma() -> (Expression<Real>, Expression<Real>)? {
    assert isGamma();
    return box(k, θ);
  }

  override function write(buffer:Buffer) {
    buffer.set("class", "Gamma");
    buffer.set("k", value(k));
    buffer.set("θ", value(θ));
  }
}

/**
 * Create gamma distribution.
 */
function Gamma<Arg1,Arg2>(k:Arg1, θ:Arg2) -> Distribution<Real> {
  return make_gamma(k, θ);
}
function make_gamma<Arg1,Arg2>(k:Arg1, θ:Arg2) -> {
  return peg_gamma(peg(k), peg(θ));
}
function peg_gamma<Arg1,Arg2>(k:Arg1, θ:Arg2) -> {
  return GammaDistribution<Arg1,Arg2>(k, θ);
}

/*
 * Observe a gamma variate.
 *
 * @param x The variate.
 * @param k Shape.
 * @param θ Scale.
 *
 * @return the log probability density.
 */
function logpdf_gamma<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, θ:Arg3) -> {
  return where(0.0 < x, (k - 1.0)*log(x) - x/θ - lgamma(k) - k*log(θ),
      -inf);
}

/*
 * CDF of a gamma variate.
 *
 * @param x The variate.
 * @param k Shape.
 * @param θ Scale.
 *
 * @return the cumulative probability.
 */
function cdf_gamma<Arg1,Arg2,Arg3>(x:Arg1, k:Arg2, θ:Arg3) -> {
  return where(0.0 < x, gamma_p(k, x/θ), 0.0);
}
