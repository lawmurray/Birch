/**
 * Boxed form. Memoizes forward evaluation, acting as a checkpoint for
 * reverse-mode automatic differentiation.
 *
 * @param Value Result type.
 * @param Form Form form.
 */
final class BoxedForm<Value,Form>(f:Form) < Expression<Value>(nil, false) {
  /**
   * Expression form.
   */
  f:Form? <- f;

  override function doEval() {
    this.x <- global.eval(f!);
  }

  override function doMove(visitor:MoveVisitor) {
    this.x <- global.move(f!, visitor);
  }

  override function doArgs(visitor:ArgsVisitor) {
    global.args(f!, visitor);
  }

  override function doShallowGrad(visitor:GradVisitor) {
    global.shallow_grad(f!, this.g!, visitor);
  }

  override function doDeepGrad(visitor:GradVisitor) {
    global.deep_grad(f!, visitor);
  }

  override function doReset() {
    global.reset(f!);
  }

  override function doRelink(visitor:RelinkVisitor) {
    global.relink(f!, visitor);
  }

  override function doConstant() {
    global.constant(f!);
    f <- nil;
  }
}

hpp{{
namespace birch {

template<class Value, class Form>
struct is_expression<BoxedForm<Value,Form>> {
  static constexpr bool value = true;
};

template<class Value, class Form>
int rows(const BoxedForm<Value,Form>& o) {
  return o->rows();
}

template<class Value, class Form>
int columns(const BoxedForm<Value,Form>& o) {
  return o->columns();
}

template<class Value, class Form>
int length(const BoxedForm<Value,Form>& o) {
  return o->length();
}

template<class Value, class Form>
int size(const BoxedForm<Value,Form>& o) {
  return o->size();
}

template<class Value, class Form>
auto value(const BoxedForm<Value,Form>& o) {
  return o->value();
}

template<class Value, class Form>
auto eval(const BoxedForm<Value,Form>& o) {
  return o->eval();
}

template<class Value, class Form>
auto peek(const BoxedForm<Value,Form>& o) {
  return o->peek();
}

template<class Value, class Form>
auto move(const BoxedForm<Value,Form>& o, const MoveVisitor& visitor) {
  return o->move(visitor);
}

template<class Value, class Form>
auto peg(const BoxedForm<Value,Form>& o) {
  return o;
}

template<class Value, class Form>
auto tag(const BoxedForm<Value,Form>& o) {
  return o;
}

template<class Value, class Form>
void reset(BoxedForm<Value,Form>& o) {
  o->reset();
}

template<class Value, class Form>
void relink(BoxedForm<Value,Form>& o, const RelinkVisitor& visitor) {
  o->relink(visitor);
}

template<class Value, class Form>
void constant(const BoxedForm<Value,Form>& o) {
  o->constant();
}

template<class Value, class Form>
bool is_constant(const BoxedForm<Value,Form>& o) {
  return o->isConstant();
}

template<class Value, class Form>
void args(const BoxedForm<Value,Form>& o, const ArgsVisitor& visitor) {
  o->args(visitor);
}

template<class Value, class Form>
void deep_grad(const BoxedForm<Value,Form>& o, const GradVisitor& visitor) {
  o->deepGrad(visitor);
}

template<class Value, class Form, class G>
void shallow_grad(const BoxedForm<Value,Form>& o, const G& g, const GradVisitor& visitor) {
  o->shallowGrad(g, visitor);
}

}
}}
