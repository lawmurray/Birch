/**
 * Last-in first-out (LIFO) stack. Provides constant-time operations at the
 * top of the stack, and linear-time operations elsewhere.
 *
 * @tparam Type Element type. Must be default-constructible.
 *
 * The data structure is arranged as a singly-linked list:
 * ```mermaid
 * graph LR
 *    this --"top()"--> n[n] --> nm1[n-1] --> nm2[n-2] --> nm3(...)
 * ```
 * The member function `top()` is used to retrieve the top ($n$th) element,
 * which can be done in $O(1)$ time.
 *
 * @note
 *     As a recursive and singly-linked data structure, Stack has excellent
 *     performance properties under Birch's lazy deep copy mechanism.
 *
 * @attention
 *     Large recursive data structures can cause an execution stack overflow
 *     on destruction that usually manifests as a segmentation fault. Possible
 *     solutions include:
 *
 *     1. Use an array (`Type[_]`) or [Array](../Array) instead.
 *     2. Remove items one-by-one before the object goes out of scope.
 *     3. Increase the execution stack size with the shell command `ulimit`.
 */
final class Stack<Type> {
  head:StackNode<Type>?;
  count:Integer <- 0;

  /**
   * Number of elements.
   */
  function size() -> Integer {
    return count;
  }

  /**
   * Is this empty?
   */
  function empty() -> Boolean {
    return count == 0;
  }

  /**
   * Clear all elements.
   */
  function clear() {
    head <- nil;
    count <- 0;
  }

  /**
   * Get the top element.
   */
  function top() -> Type {
    assert head?;
    return head!.x;
  }

  /**
   * Push an element onto the top.
   *
   * @param x the element.
   */
  function push(x:Type) {
    node:StackNode<Type>(x);    
    node.next <- head;
    head <- node;
    count <- count + 1;
  }

  /**
   * Push a new default-constructed element onto the top and return it.
   */
  function push() {
    let x <- make<Type>();
    if x? {
      push(x!);
    } else {
      error("not default constructible");
    }
    return x!;
  }

  /**
   * Pop an element from the top.
   */
  function pop() {
    assert head?;
    head <- head!.next;
    count <- count - 1;
  }

  /**
   * Obtain an iterator.
   *
   * @return an iterator across elements from top to bottom.
   */
  function walk() -> Iterator<Type> {
    return StackIterator<Type>(head);
  }
}
