/**
 * Tape container. The container is stateful, maintaining a current position
 * along a tape, providing constant-time operations at that and the previous
 * position, but linear-time operations elsewhere (which require a seek).
 *
 * @tparam Type Element type. Must be default-constructible.
 *
 * The data structure is arranged as two singly-linked lists about the current
 * position, one recursing backward through elements behind the current
 * position, the other recursing forward through elements at and ahead of the
 * current position:
 *
 * ```mermaid
 * graph LR
 *    this --> nm1[n-1] --> nm2[n-2] --> nm3[n-3] --> nm4(...)
 *    this --> n[n] --> np1[n+1] --> np2[n+1] --> np3(...)
 * ```
 *
 * The call `get(i)` may be used to retrieve any element, with complexity
 * linear in the offset from the current position.
 *
 * Changing the current position in the list (i.e. seeking) is achieved with
 * the `seek()`, `backward()`, `forward()`, `rewind()` and `fastForward()`
 * member functions. It is not usually necessary to call these directly,
 * however, as the container seeks as necessary.
 *
 * @note
 *     As a recursive and singly-linked data structure, Tape has excellent
 *     performance properties under Birch's lazy deep copy mechanism.
 *
 * @attention
 *     Large recursive data structures can cause an execution stack overflow
 *     on destruction that usually manifests as a segmentation fault. Possible
 *     solutions include:
 *
 *     1. Use an array (`Type[_]`) or [Array](../Array) instead.
 *     2. Remove items one-by-one before the object goes out of scope.
 *     3. Increase the execution stack size with the shell command `ulimit`.
 */
final class Tape<Type> {
  /**
   * Elements at and ahead of the current position.
   */
  ahead:TapeNode<Type>?;

  /**
   * Elements behind the current position.
   */
  behind:TapeNode<Type>?;

  /**
   * Number of elements at and ahead of the current position.
   */
  aheadCount:Integer <- 0;

  /**
   * Number of elements behind the current positionl equivalent to current
   * position minus 1.
   */
  behindCount:Integer <- 0;

  /**
   * Reference to an element.
   */
  operator [i:Integer] -> Type {
    assert 0 < i;
    seek(i);
    return ahead!.x;
  }

  /**
   * Number of elements.
   */
  function size() -> Integer {
    return aheadCount + behindCount;
  }

  /**
   * Is this empty?
   */
  function empty() -> Boolean {
    return aheadCount == 0 && behindCount == 0;
  }

  /**
   * Clear all elements.
   */
  function clear() {
    ahead <- nil;
    behind <- nil;
    aheadCount <- 0;
    behindCount <- 0;
  }

  /**
   * Get the first element.
   */
  function front() -> Type {
    if empty() {
      pushFront();
    }
    rewind();
    return ahead!.x;
  }

  /**
   * Get the last element.
   */
  function back() -> Type {
    if empty() {
      pushBack();
    }
    fastForward();
    return behind!.x;
  }

  /**
   * Get an element.
   *
   * @param i Position.
   */
  function get(i:Integer) -> Type {
    assert 0 < i;
    seek(i);
    return ahead!.x;
  }

  /**
   * Set an element.
   *
   * @param i Position.
   * @param x Value.
   */
  function set(i:Integer, x:Type) {
    assert 0 < i;
    seek(i);
    ahead!.x <- x;
  }

  /**
   * Insert an element at the front.
   *
   * @param x Value.
   */
  function pushFront(x:Type) {
    rewind();
    behind <- TapeNode<Type>(x);
    behindCount <- behindCount + 1;
  }

  /**
   * Insert a new default-constructed element at the front and return it.
   */
  function pushFront() -> Type {
    let x <- make<Type>();
    if x? {
      pushFront(x!);
    } else {
      error("not default constructible");
    }
    return x!;
  }

  /**
   * Insert an element at the back.
   *
   * @param x Value.
   */
  function pushBack(x:Type) {
    fastForward();
    ahead <- TapeNode<Type>(x);
    aheadCount <- aheadCount + 1;
  }

  /**
   * Insert a new default-constructed element at the back and return it.
   */
  function pushBack() -> Type {
    let x <- make<Type>();
    if x? {
      pushBack(x!);
    } else {
      error("not default constructible");
    }
    return x!;
  }

  /**
   * Remove the first element.
   */
  function popFront() {
    assert !empty();
    rewind();
    ahead <- ahead!.next;
    aheadCount <- aheadCount - 1;
  }

  /**
   * Remove the last element.
   */
  function popBack() {
    assert !empty();
    fastForward();
    behind <- behind!.next;
    behindCount <- behindCount - 1;
  }

  /**
   * Insert a new element.
   *
   * @param i Position.
   * @param x Value.
   *
   * Inserts the new element immediately before the current element at
   * position `i`. To insert at the back of the container, use a position that
   * is one more than the current size, or `pushBack()`.
   */
  function insert(i:Integer, x:Type) {
    assert 0 < i;
    seek(i);
    let node <- TapeNode<Type>(x);
    node.next <- ahead;
    ahead <- node;
    aheadCount <- aheadCount + 1;
  }

  /**
   * Erase an element.
   *
   * @param i Position.
   */
  function erase(i:Integer) {
    assert 0 < i;
    seek(i);
    ahead <- ahead!.next;
    aheadCount <- aheadCount - 1;
  }

  /**
   * Rewind and obtain an iterator.
   *
   * @return an iterator across elements (that are set) from front to back.
   */
  function walk() -> Iterator<Type> {
    rewind();
    return TapeIterator<Type>(ahead);
  }

  /**
   * Move the current position forward one.
   */
  function forward() {
    let node <- ahead!;
    ahead <- node.next;
    node.next <- behind;
    behind <- node;
    aheadCount <- aheadCount - 1;
    behindCount <- behindCount + 1;
  }

  /**
   * Move the current position backward one.
   */
  function backward() {
    let node <- behind!;
    behind <- node.next;
    node.next <- ahead;
    ahead <- node;
    aheadCount <- aheadCount + 1;
    behindCount <- behindCount - 1;
  }

  /**
   * Rewind to one before the first element (that is set).
   */
  function rewind() {
    while behind? {
      backward();
    }
    assert behindCount == 0;
    assert aheadCount == 0 || ahead?;
  }

  /**
   * Fast-forward to one after the last element (that is set).
   */
  function fastForward() {
    while ahead? {
      forward();
    }
    assert aheadCount == 0;
    assert behindCount == 0 || behind?;
  }

  /**
   * Seek to a new position.
   *
   * @param k New position.
   *
   * Elements are default-constructed as necessary between the current
   * position and the new position.
   */
  function seek(k:Integer) {
    assert k > 0;
    while k > size() {
      pushBack();
    }
    while behindCount < k - 1 {
      forward();
    }
    while behindCount > k - 1 {
      backward();
    }
  }

  override function read(buffer:Buffer) {
    clear();
    let f <- buffer.walk();
    while f.hasNext() {
      let x <- f.next().get<Type>();
      if x? {
        pushBack(x!);
      }
    }
  }

  override function read(t:Integer, buffer:Buffer) {
    clear();
    let f <- buffer.walk();
    while f.hasNext() {
      let x <- f.next().get<Type>(t);
      if x? {
        pushBack(x!);
      }
    }
  }

  override function write(buffer:Buffer) {
    buffer.setEmptyArray();
    let f <- walk();
    while f.hasNext() {
      buffer.push(f.next());
    }
  }

  override function write(t:Integer, buffer:Buffer) {
    buffer.setEmptyArray();
    let f <- walk();
    while f.hasNext() {
      buffer.push(t, f.next());
    }
  }
}
