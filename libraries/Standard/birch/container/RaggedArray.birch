/**
 * Two-dimensional array where each row has a varying length. Internally, this
 * is stored in one contiguous array for constant-time random access.
 *
 * @tparam Type Element type. Must be default-constructible.
 */
final class RaggedArray<Type> {
  /**
   * Elements.
   */
  values:Array<Array<Type>>;

  /**
   * Reference to an element.
   *
   * @param i Row.
   * @param j Column.
   */
  operator [i:Integer, j:Integer] -> Type {
    return values[i][j];
  }

  /**
   * Is this empty? A RaggedArray is considered empty if it has no rows. A
   * RaggedArray with one or more rows is not considered empty, even if those
   * rows have no elements.
   */
  function empty() -> Boolean {
    return values.empty();
  }

  /**
   * Clear all rows.
   */
  function clear() {
    values.clear();
  }

  /**
   * Number of elements.
   */
  function count() -> Integer {
    let n <- 0;
    for i in 1..size() {
      n <- n + size(i);
    }
    return n;
  }

  /**
   * Number of rows.
   */
  function size() -> Integer {
    return values.size();
  }
  
  /**
   * Number of elements for a given row.
   *
   * @param i Row.
   */
  function size(i:Integer) -> Integer {
    return values[i].size();
  }
  
  /**
   * Get an element.
   *
   * @param i Row.
   * @param j Column.
   */
  function get(i:Integer, j:Integer) -> Type {
    return values[i][j];
  }

  /**
   * Get a row.
   *
   * @param i Row.
   */
  function get(i:Integer) -> Array<Type> {
    return values[i];
  }

  /**
   * Set an element.
   *
   * @param i Row.
   * @param j Column.
   * @param x Value.
   */
  function set(i:Integer, j:Integer, x:Type) {
    values[i][j] <- x;
  }

  /**
   * Set a row.
   *
   * @param i Row.
   * @param x Values.
   */
  function set(i:Integer, x:Array<Type>) {
    values[i] <- x;
  } 

  /**
   * Remove the front row.
   */
  function popFront() {
    values.popFront();
  }

  /**
   * Remove the front element from a specified row.
   *
   * @param i Row.
   */
  function popFront(i:Integer) {
    values[i].popFront();
  }

  /**
   * Add a new row at the back.
   */
  function pushBack() {
    values.pushBack(Array<Type>());
  }

  /**
   * Add an element to the back of a specified row.
   *
   * @param i Row.
   * @param x Value.
   */
  function pushBack(i:Integer, x:Type) {
    values[i].pushBack(x);
  }

  /**
   * Add a new default-constructed element to the back of the specified row,
   * and return the element.
   */
  function pushBack(i:Integer) -> Type {
    let x <- make<Type>();
    if x? {
      pushBack(i, x!);
    } else {
      error("not default constructible");
    }
    return x!;
  }

  /**
   * Obtain an iterator over rows.
   *
   * @return an iterator across entire rows from top to bottom.
   */
  function walk() -> Iterator<Array<Type>> {
    return values.walk();
  }

  /**
   * Obtain an iterator over columns.
   *
   * @param i Row.
   *
   * @return an iterator across the elements of the given row, from left to
   * right.
   */
  function walk(i:Integer) -> Iterator<Type> {
    return values[i].walk();
  }

  override function read(buffer:Buffer) {
    values.read(buffer);
  }

  override function read(t:Integer, buffer:Buffer) {
    values.read(t, buffer);
  }

  override function write(buffer:Buffer) {
    values.write(buffer);
  }

  override function write(t:Integer, buffer:Buffer) {
    values.write(t, buffer);
  }
}
