/**
 * Doubly-linked list. Provides constant-time operations at the front and back
 * of the list, and linear-time operations elsewhere.
 *
 * @tparam Type Element type. Must be default-constructible.
 *
 * The data structure is a doubly-linked list:
 * ```mermaid
 * graph LR
 *    this --"front()"--> a[1] --> b[2] --> c[3] --> d[4] --> e(...) --> f[n]
 *    this --"back()"--> f --> e --> d --> c --> b --> a
 * ```
 *
 * @note
 *     As a recursive data structure, List has good performance properties
 *     under Birch's lazy deep copy mechanism. It is, however, doubly-linked
 *     rather than singly-linked. Consider whether a singly-linked data
 *     structure such as [Stack](../Stack) or [Tape](../Tape) can be used
 *     instead, as this may improve performance further.
 *
 * @attention
 *     Large recursive data structures can cause an execution stack overflow
 *     on destruction that usually manifests as a segmentation fault. Possible
 *     solutions include:
 *
 *     1. Use an array (`Type[_]`) or [Array](../Array) instead.
 *     2. Remove items one-by-one before the object goes out of scope.
 *     3. Increase the execution stack size with the shell command `ulimit`.
 */
final class List<Type> {
  head:ListNode<Type>?;
  tail:ListNode<Type>?;
  count:Integer <- 0;

  /**
   * Reference to an element.
   */
  operator [i:Integer] -> Type {
    return getNode(i).x;
  }

  /**
   * Number of elements.
   */
  function size() -> Integer {
    return count;
  }

  /**
   * Is this empty?
   */
  function empty() -> Boolean {
    return count == 0;
  }

  /**
   * Clear all elements.
   */
  function clear() {
    head <- nil;
    tail <- nil;
    count <- 0;
  }

  /**
   * Get the first element.
   */
  function front() -> Type {
    assert head?;
    return head!.x;
  }

  /**
   * Get the last element.
   */
  function back() -> Type {
    assert this.tail?;
    let tail <- this.tail!;
    return tail.x;
  }

  /**
   * Get an element.
   *
   * @param i Position.
   */
  function get(i:Integer) -> Type {
    return getNode(i).x;
  }

  /**
   * Set an element.
   *
   * @param i Position.
   * @param x Value.
   */
  function set(i:Integer, x:Type) {
    getNode(i).x <- x;
  }

  /**
   * Insert an element at the front.
   *
   * @param x Value.
   */
  function pushFront(x:Type) {
    node:ListNode<Type>(x);
    if empty() {
      tail <- node;
    } else {
      assert head?;
      head!.prev <- node;
      node.next <- head;
    }
    head <- node;
    count <- count + 1;
    
    assert this.head? && this.tail?;
  }

  /**
   * Insert a new default-constructed element at the front and return it.
   */
  function pushFront() -> Type {
    let x <- make<Type>();
    if x? {
      pushFront(x!);
    } else {
      error("not default constructible");
    }
    return x!;
  }

  /**
   * Insert an element at the back.
   *
   * @param x Value.
   */
  function pushBack(x:Type) {
    node:ListNode<Type>(x);
    if empty() {
      head <- node;
    } else {
      assert this.tail?;
      let tail <- this.tail!;
      tail.next <- node;
      node.prev <- tail;
    }
    this.tail <- node;
    count <- count + 1;
    
    assert this.head? && this.tail?;
  }

  /**
   * Insert a new default-constructed element at the back and return it.
   */
  function pushBack() -> Type {
    let x <- make<Type>();
    if x? {
      pushBack(x!);
    } else {
      error("not default constructible");
    }
    return x!;
  }

  /**
   * Remove the first element.
   */
  function popFront() {
    assert !empty();
    assert head?;
    head <- head!.popFront();
    count <- count - 1;
    if count <= 1 {
      tail <- head;
    }
    
    assert count == 0 || (head? && tail?);
    assert count > 0 || (!head? && !tail?);
  }

  /**
   * Remove the last element.
   */
  function popBack() {
    assert !empty();
    assert tail?;
    tail <- tail!.popBack();
    count <- count - 1;
    if count <= 1 {
      head <- tail;
    }
    
    assert count == 0 || (head? && tail?);
    assert count > 0 || (!head? && !tail?);
  }
  
  /**
   * Insert a new element.
   *
   * @param i Position.
   * @param x Value.
   *
   * Inserts the new element immediately before the current element at
   * position `i`. To insert at the back of the container, use a position that
   * is one more than the current size, or `pushBack()`.
   */
  function insert(i:Integer, x:Type) {
    assert 1 <= i && i <= count + 1;
    
    if (i == 1) {
      pushFront(x);
    } else if (i == count + 1) {
      pushBack(x);
    } else {
      node:ListNode<Type>(x);
      getNode(i).insert(node);
      count <- count + 1;
    }
    
    assert this.head? && this.tail?;
  }

  /**
   * Erase an element.
   *
   * @param i Position.
   */
  function erase(i:Integer) {
    assert 1 <= i && i <= count;
    
    if (i == 1) {
      popFront();
    } else if (i == count) {
      popBack();
    } else {
      getNode(i).erase();
      count <- count - 1;
    }
    
    assert this.count == 0 || (this.head? && this.tail?);
    assert this.count > 0 || (!this.head? && !this.tail?);
  }

  /**
   * Obtain an iterator.
   *
   * @return an iterator across elements in forward order.
   */
  function walk() -> Iterator<Type> {
    return ListIterator<Type>(head);
  }

  /**
   * Get a node.
   *
   * @param i Position.
   */
  function getNode(i:Integer) -> ListNode<Type> {
    assert 1 <= i && i <= count;
    
    node:ListNode<Type>?;
    if (2*i <= count) {
      /* walk forward */
      node <- head;
      for j in 1..i-1 {
        assert node?;
        node <- node!.next;
      }
    } else {
      /* walk backward */
      node <- tail;
      for j in 1..count - i {
        assert node?;
        node <- node!.prev;
      }
    }
    
    assert node?;
    return node!;
  }
  
  override function read(buffer:Buffer) {
    clear();
    let f <- buffer.walk();
    while f.hasNext() {
      let x <- f.next().get<Type>();
      if x? {
        pushBack(x!);
      }
    }
  }

  override function write(buffer:Buffer) {
    buffer.setEmptyArray();
    let f <- walk();
    while f.hasNext() {
      buffer.push(f.next());
    }
  }

  override function read(t:Integer, buffer:Buffer) {
    clear();
    let f <- buffer.walk();
    while f.hasNext() {
      let x <- f.next().get<Type>(t);
      if x? {
        pushBack(x!);
      }
    }
  }

  override function write(t:Integer, buffer:Buffer) {
    buffer.setEmptyArray();
    let f <- walk();
    while f.hasNext() {
      buffer.push(t, f.next());
    }
  }
}
