/**
 * Create a matrix filled by a lambda function.
 *
 * @param 位 Lambda function.
 * @param rows Number of rows.
 * @param columns Number of columns.
 *
 * @return The new matrix.
 *
 * The lambda function is called once for each element in the new matrix,
 * receiving, as its argument, the row and column indices of that
 * element, and returning the value at that element.
 */
function matrix_lambda<Lambda>(位:Lambda, rows:Integer, columns:Integer) -> {
  cpp{{
  using T = std::decay_t<decltype(wait(位(1,1)))>;
  return numbirch::Array<T,2>([&](const int64_t s) {
        int j = (s - 1)/rows + 1;
        int i = (s - 1)%rows + 1;
        return 位(i, j);
      }, numbirch::make_shape(rows, columns));
  }}
}

/**
 * Create matrix filled with a given scalar value.
 *
 * @param x The value.
 * @param rows Number of rows.
 * @param columns Number of columns.
 */
function matrix<Type>(x:Type, rows:Integer, columns:Integer) -> Type[_,_] {
  cpp{{
  return numbirch::Array(x, numbirch::make_shape(rows, columns));
  }}
}
