/**
 * Data in memory.
 *
 * `Buffer` is used to temporarily store data in memory before writing to a
 * file, or after reading from a file. It follows the
 * [JSON](https://www.json.org) data model, where data is arranged
 * hierachically into *objects* (*dictionaries*, *mappings*) of *key*-*value*
 * *entries*, and *arrays* (*lists*, *sequences*) of *elements*. The
 * representation is schemaless.
 *
 * Keys are strings. Values and elements may be strings, reals, integers,
 * Booleans or nulls---or, recursively, other `Buffer` objects. Special
 * provisions are made for efficient storage of numerical vectors and
 * matrices.
 *
 * Set and retrieve entries from objects (in the JSON sense) using the `set()`
 * and `get()` member functions. Construct and iterate through arrays (in the
 * JSON sense) using the `push()` and `walk()` member functions.
 */
final class Buffer {
  /*
   * The various values a buffer may take. These work as follows:
   *
   * - If `keys` is defined, then `values` is also defined, and the buffer
   *   represents an object (in the JSON sense). If `keys` and `values` are
   *   defined but empty, it represents an empty object.
   * - If `keys` is not defined, but `values` is defined, the buffer
   *   represents an array (in the JSON sense). If `values` is defined but
   *   empty, it represents an empty array.
   * - If one or more of the other values are defined, the buffer represents
   *   a scalar---or, if the value is one of the vector or matrix values,
   *   an array (in the JSON sense) but stored compactly for faster reading
   *   and writing.
   * - If none of the values are defined, the buffer represents nil. In JSON
   *   files, this is rendered as `null`.
   *
   * With the excepton of objects (in the JSON sense), where both `keys` and
   * `values` are defined, at most one of these values should be defined.
   */
  keys:Array<String>?;
  values:Array<Buffer>?;
  scalarString:String?;
  scalarReal:Real?;
  scalarInteger:Integer?;
  scalarBoolean:Boolean?;
  vectorReal:Real[_]?;
  vectorInteger:Integer[_]?;
  vectorBoolean:Boolean[_]?;
  matrixReal:Real[_,_]?;
  matrixInteger:Integer[_,_]?;
  matrixBoolean:Boolean[_,_]?;

  phantom map;
  hpp{{
  /**
   * Map for fast lookup of keys, in lieu of proper dictionary implementation.
   * Maps string to indices into the values array, rather than directly to the
   * Buffer elements, as otherwise MemBirch visitors will miss these pointers.
   */
  std::unordered_map<String,int> map;
  }}

  /**
   * Is the value nil?
   */
  function isNil() -> Boolean {
    return !(keys? || values? || scalarString? || scalarReal? ||
        scalarInteger? || scalarBoolean? || vectorReal? || vectorInteger? ||
        vectorBoolean? || matrixReal? || matrixInteger? || matrixBoolean?);
  }

  /**
   * Is the value of an entry nil? If the given key does not exist, returns
   * true.
   */
  function isNil(key:String) -> Boolean {
    let buffer <- get(key);
    if buffer? {
      return buffer!.isNil();
    } else {
      return true;
    }
  }

  /**
   * Set to nil.
   */
  function setNil() {
    keys <- nil;
    values <- nil;
    scalarString <- nil;
    scalarReal <- nil;
    scalarInteger <- nil;
    scalarBoolean <- nil;
    vectorReal <- nil;
    vectorInteger <- nil;
    vectorBoolean <- nil;
    matrixReal <- nil;
    matrixInteger <- nil;
    matrixBoolean <- nil;
    cpp{{
    map.clear();
    }}
  }

  /**
   * Set the value of an entry to nil.
   */
  function setNil(key:String) {
    let value <- make_buffer();
    value.setNil();
    set(key, value);
  }

  /**
   * Is the value empty? A value is empty if it is nil, or an empty object, or
   * an empty array.
   */
  function isEmpty() -> Boolean {
    return isNil() || (values? && values!.empty());
  }

  /**
   * Is the value of an entry empty? If the given key does not exist, returns
   * true.
   */
  function isEmpty(key:String) -> Boolean {
    let buffer <- get(key);
    if buffer? {
      return buffer!.isEmpty();
    } else {
      return true;
    }
  }

  /**
   * Set to an empty object.
   */
  function setEmptyObject() {
    setNil();
    keys <- Array<String>();
    values <- Array<Buffer>();
    cpp{{
    map.clear();
    }}
  }

  /**
   * Set the value of an entry to an empty object.
   */
  function setEmptyObject(key:String) {
    let value <- make_buffer();
    value.setEmptyObject();
    set(key, value);
  }

  /**
   * Set to an empty array.
   */
  function setEmptyArray() {
    setNil();
    values <- Array<Buffer>();
    cpp{{
    map.clear();
    }}
  }

  /**
   * Set the value of an entry to an empty array.
   */
  function setEmptyArray(key:String) {
    let value <- make_buffer();
    value.setEmptyArray();
    set(key, value);
  }

  /**
   * Split a vector into an array of single elements, or a matrix into an
   * array of vectors.
   */
  function split() {
    let iter <- walk();
    setNil();
    while iter.hasNext() {
      push(iter.next());
    }
    assert isEmpty() || (!keys? && values?);
  }

  /**
   * Size. For a nil buffer the size is zero, for an object or scalar it is
   * one, for an array it is the length. For an array, if it represents a
   * numerical vector, its length is the same as the length of that vector;
   * if it represents a numerical matrix, its length is the same as the number
   * of rows in that matrix.
   */
  function size() -> Integer {
    if keys? || scalarString? || scalarReal? || scalarInteger? ||
        scalarBoolean? {
      return 1;
    } else if values? {
      return values!.size();
    } else if vectorReal? {
      return length(vectorReal!);
    } else if vectorInteger? {
      return length(vectorInteger!);
    } else if vectorBoolean? {
      return length(vectorBoolean!);
    } else if matrixReal? {
      return rows(matrixReal!);
    } else if matrixInteger? {
      return rows(matrixInteger!);
    } else if matrixBoolean? {
      return rows(matrixBoolean!);
    } else {
      return 0;
    }
  }

  /**
   * Size of an entry.
   *
   * @param key Key of the entry.
   *
   * @return The size. In the case that the key does not exist, returns 0.
   */
  function size(key:String) -> Integer {
    let buffer <- get(key);
    if buffer? {
      return buffer!.size();
    } else {
      return 0;
    }
  }

  /**
   * Get the value.
   *
   * @tparam Type The desired type.
   *
   * @return An optional with a value if the contents of the entry can be
   * coerced to the desired type, otherwise with no value.
   */
  function get<Type>() -> Type? {
    x:Type?;
    return Type?(doGet(x));
  }

  /**
   * Get the value.
   *
   * @tparam Type The desired type.
   *
   * @param t Step number.
   *
   * @return An optional with a value if the contents of the entry can be
   * coerced to the desired type, otherwise with no value.
   */
  function get<Type>(t:Integer) -> Type? {
    x:Type?;
    return Type?(doGet(t, x));
  }

  /**
   * Get the value of an entry.
   *
   * @tparam Type The desired type.
   *
   * @param key Key of the entry.
   *
   * @return An optional with a value if the contents of the entry can be
   * coerced to the desired type, otherwise with no value.
   */
  function get<Type>(key:String) -> Type? {
    let buffer <- get(key);
    if buffer? {
      return buffer!.get<Type>();
    } else {
      return nil;
    }
  }

  /**
   * Get the value of an entry.
   *
   * @tparam Type The desired type.
   *
   * @param key Key of the entry.
   * @param t Step number.
   *
   * @return An optional with a value if the contents of the entry can be
   * coerced to the desired type, otherwise with no value.
   */
  function get<Type>(key:String, t:Integer) -> Type? {
    let buffer <- get(key);
    if buffer? {
      return buffer!.get<Type>(t);
    } else {
      return nil;
    }
  }

  /**
   * Get the value of an entry as a buffer.
   *
   * @param key Key of the entry.
   *
   * @return An optional with a value if the entry exists, otherwise no value.
   */
  function get(key:String) -> Buffer? {
    cpp{{
    auto iter = map.find(key);
    if (iter != map.end()) {
      return values.value()(iter->second);
    }
    }}
    return nil;
  }

  /**
   * Set as an object (in the JSON sense).
   *
   * @param keys Keys.
   * @param values Values.
   */
  function set(keys:Array<String>, values:Array<Buffer>) {
    assert keys.size() == values.size();
    setNil();
    this.keys <- keys;
    this.values <- values;
    cpp{{
    map.clear();
    }}
    let len <- keys.size();
    for i in 1..len {
      cpp{{
      map.insert(std::make_pair(keys(i), i));
      }}
    }
  }

  /**
   * Set the value.
   *
   * @param x Value.
   */
  function set<Type>(x:Type) {
    doSet(x);
  }

  /**
   * Set the value.
   *
   * @param t Step number.
   * @param x Value.
   */
  function set<Type>(t:Integer, x:Type) {
    doSet(t, x);
  }

  /**
   * Set an entry as an object (in the JSON sense).
   *
   * @param key Key of the entry.
   * @param keys Keys.
   * @param values Values.
   *
   * If the buffer value is not already an object, it is cleared before
   * setting the new entry.
   */
  function set(key:String, keys:Array<String>, values:Array<Buffer>) {
    set(key, make_buffer(keys, values));
  }

  /**
   * Set the value of an entry.
   *
   * @param key Key of the entry.
   * @param x Value of the entry.
   *
   * If the buffer value is not already an object, it is cleared before
   * setting the new entry.
   */
  function set<Type>(key:String, x:Type) {
    set(key, make_buffer(x));
  }

  /**
   * Set the value of an entry.
   *
   * @param key Key of the entry.
   * @param t Step number.
   * @param x Value of the entry.
   *
   * If the buffer value is not already an object, it is cleared before
   * setting the new entry.
   */
  function set<Type>(key:String, t:Integer, x:Type) {
    set(key, make_buffer(t, x));
  }

  /**
   * Set the value of an entry.
   *
   * @param key Key of the entry.
   * @param x Value of the entry.
   *
   * If the buffer value is not already an object, it is cleared before
   * setting the new entry.
   */
  function set(key:String, x:Buffer) {
    if !keys? {
      setEmptyObject();
    }
    keys!.pushBack(key);
    values!.pushBack(x);
    cpp{{
    map.insert(std::make_pair(key, values.value()->size()));
    }}
  }

  /**
   * Obtain an iterator. For a nil buffer this is an empty iterator, for an
   * object or scalar it is a singleton iterator, for an array it is over the
   * elements. Where the array represents a numerical vector the iterator is
   * similarly over the elements of that vector; where it represents a
   * numerical matrix it is over the rows of that matrix.
   */
  function walk() -> Iterator<Buffer> {
    if keys? {
      return ObjectBufferIterator(keys!, values!);
    } else if values? {
      return ArrayBufferIterator(values!);
    } else if scalarString? {
      return ScalarBufferIterator<String>(scalarString!);
    } else if scalarReal? {
      return ScalarBufferIterator<Real>(scalarReal!);
    } else if scalarInteger? {
      return ScalarBufferIterator<Integer>(scalarInteger!);
    } else if scalarBoolean? {
      return ScalarBufferIterator<Boolean>(scalarBoolean!);
    } else if vectorReal? {
      return VectorBufferIterator<Real>(vectorReal!);
    } else if vectorInteger? {
      return VectorBufferIterator<Integer>(vectorInteger!);
    } else if vectorBoolean? {
      return VectorBufferIterator<Boolean>(vectorBoolean!);
    } else if matrixReal? {
      return MatrixBufferIterator<Real>(matrixReal!);
    } else if matrixInteger? {
      return MatrixBufferIterator<Integer>(matrixInteger!);
    } else if matrixBoolean? {
      return MatrixBufferIterator<Boolean>(matrixBoolean!);
    } else {
      return EmptyIterator<Buffer>();
    }
  }

  /**
   * Obtain an iterator over an entry.
   *
   * @param key Key of the entry.
   *
   * @return The iterator. In the case that the key does not exist, returns
   * the empty iterator.
   */
  function walk(key:String) -> Iterator<Buffer> {
    let buffer <- get(key);
    if buffer? {
      return buffer!.walk();
    } else {
      return EmptyIterator<Buffer>();
    }
  }

  /**
   * Push a value.
   *
   * @param x Value.
   *
   * If the buffer is empty, the result is an array with the single element
   * `x`. If the buffer is a non-empty object or scalar, the result is an
   * array with two elements: that value followed by `x`. If the buffer is a
   * non-empty array then `x` is appended to the end.
   */
  function push<Type>(x:Type) {
    doPush(x);
  }

  /**
   * Push a value.
   *
   * @param t Step number.
   * @param x Value.
   */
  function push<Type>(t:Integer, x:Type) {
    doPush(t, x);
  }

  /**
   * Push a value.
   *
   * @param x Value.
   */
  function push(x:Buffer) {
    if isEmpty() {
      setEmptyArray();
      values!.pushBack(x);
    } else if !keys? && values? {
      values!.pushBack(x);
    } else {
      split();
      push(x);
    }
  }

  /**
   * Push a value to an entry.
   *
   * @param key Key of the entry.
   * @param x Value.
   *
   * If the entry does not exists then it is created, its value an array
   * containing the single element `x`.
   */
  function push<Type>(key:String, x:Type) {
    let buffer <- get(key);
    if !buffer? {
      buffer <- make_buffer();
      set(key, buffer!);
    }
    buffer!.push(x);
  }

  /**
   * Push a value to an entry.
   *
   * @param key Key of the entry.
   * @param t Step number.
   * @param x Value.
   */
  function push<Type>(key:String, t:Integer, x:Type) {
    let buffer <- get(key);
    if !buffer? {
      buffer <- make_buffer();
      set(key, buffer!);
    }
    buffer!.push(t, x);
  }

  /**
   * Push a value to an entry .
   *
   * @param key Key of the entry.
   * @param x Value.
   */
  function push(key:String, x:Buffer) {
    let buffer <- get(key);
    if !buffer? {
      buffer <- make_buffer();
      set(key, buffer!);
    }
    buffer!.push(x);
  }

  /**
   * Push a nil value.
   */
  function pushNil() {
    push(make_buffer());
  }

  /**
   * Push a nil value to an entry.
   *
   * @param key Key of the entry.
   */
  function pushNil(key:String) {
    push(key, make_buffer());
  }

  function accept(writer:Writer) {
    if keys? {
      writer.visit(keys!, values!);
    } else if values? {
      writer.visit(values!);
    } else if scalarString? {
      writer.visit(scalarString!);
    } else if scalarReal? {
      writer.visit(scalarReal!);
    } else if scalarInteger? {
      writer.visit(scalarInteger!);
    } else if scalarBoolean? {
      writer.visit(scalarBoolean!);
    } else if vectorReal? {
      writer.visit(vectorReal!);
    } else if vectorInteger? {
      writer.visit(vectorInteger!);
    } else if vectorBoolean? {
      writer.visit(vectorBoolean!);
    } else if matrixReal? {
      writer.visit(matrixReal!);
    } else if matrixInteger? {
      writer.visit(matrixInteger!);
    } else if matrixBoolean? {
      writer.visit(matrixBoolean!);
    } else {
      writer.visitNil();
    }
  }

  function doGet(x:Boolean?) -> Boolean? {
    if scalarBoolean? {
      return scalarBoolean!;
    } else if scalarInteger? {
      return cast<Boolean>(scalarInteger!);
    } else if scalarReal? {
      return cast<Boolean>(scalarReal!);
    } else if scalarString? {
      return from_string<Boolean>(scalarString!);
    } else {
      return nil;
    }
  }

  function doGet(x:Integer?) -> Integer? {
    if scalarBoolean? {
      return cast<Integer>(scalarBoolean!);
    } else if scalarInteger? {
      return scalarInteger!;
    } else if scalarReal? {
      return cast<Integer>(scalarReal!);
    } else if scalarString? {
      return from_string<Integer>(scalarString!);
    } else {
      return nil;
    }
  }

  function doGet(x:Real?) -> Real? {
    if scalarBoolean? {
      return cast<Real>(scalarBoolean!);
    } else if scalarInteger? {
      return cast<Real>(scalarInteger!);
    } else if scalarReal? {
      return scalarReal!;
    } else if scalarString? {
      return from_string<Real>(scalarString!);
    } else {
      return nil;
    }
  }

  function doGet(x:String?) -> String? {
    if scalarBoolean? {
      return to_string(scalarBoolean!);
    } else if scalarInteger? {
      return to_string(scalarInteger!);
    } else if scalarReal? {
      return to_string(scalarReal!);
    } else if scalarString? {
      return scalarString!;
    } else {
      return nil;
    }
  }

  function doGet<Type>(x:Type?) -> Type? {
    return make<Type>(this);
  }

  function doGet(x:Boolean[_]?) -> Boolean[_]? {
    if vectorBoolean? {
      return vectorBoolean!;
    } else if vectorInteger? {
      return cast<Boolean>(vectorInteger!);
    } else if vectorReal? {
      return cast<Boolean>(vectorReal!);
    } else {
      return doGetVector<Boolean>();
    }
  }

  function doGet(x:Integer[_]?) -> Integer[_]? {
    if vectorBoolean? {
      return cast<Integer>(vectorBoolean!);
    } else if vectorInteger? {
      return vectorInteger!;
    } else if vectorReal? {
      return cast<Integer>(vectorReal!);
    } else {
      return doGetVector<Integer>();
    }
  }

  function doGet(x:Real[_]?) -> Real[_]? {
    if vectorBoolean? {
      return cast<Real>(vectorBoolean!);
    } else if vectorInteger? {
      return cast<Real>(vectorInteger!);
    } else if vectorReal? {
      return vectorReal!;
    } else {
      return doGetVector<Real>();
    }
  }

  function doGet<Type>(x:Type[_]?) -> Type[_]? {
    return doGetVector<Type>();
  }

  function doGetVector<Type>() -> Type[_]? {
    if isNil() {
      return nil;
    } else {
      y:Type[_];
      let iter <- walk();
      while iter.hasNext() {
        let z <- iter.next().get<Type>();
        if z? {
          cpp{{
          y.push(z.value());
          }}
        } else {
          return nil;
        }
      }
      return y;
    }
  }

  function doGet(x:Boolean[_,_]?) -> Boolean[_,_]? {
    if matrixBoolean? {
      return matrixBoolean!;
    } else if matrixInteger? {
      return cast<Boolean>(matrixInteger!);
    } else if matrixReal? {
      return cast<Boolean>(matrixReal!);
    } else {
      return doGetMatrix<Boolean>();
    }
  }

  function doGet(x:Integer[_,_]?) -> Integer[_,_]? {
    if matrixBoolean? {
      return cast<Integer>(matrixBoolean!);
    } else if matrixInteger? {
      return matrixInteger!;
    } else if matrixReal? {
      return cast<Integer>(matrixReal!);
    } else {
      return doGetMatrix<Integer>();
    }
  }

  function doGet(x:Real[_,_]?) -> Real[_,_]? {
    if matrixBoolean? {
      return cast<Real>(matrixBoolean!);
    } else if matrixInteger? {
      return cast<Real>(matrixInteger!);
    } else if matrixReal? {
      return matrixReal!;
    } else {
      return doGetMatrix<Real>();
    }
  }

  function doGetMatrix<Type>() -> Type[_,_]? {
    if isNil() {
      return nil;
    } else {
      /* we obtain the matrix row-by-row from the file (i.e. row-major) but
       * matrices in Birch are column-major, so read rows from the files into
       * columns of the matrix then transpose afterwards */
      Y:Type[_,_];

      let nrows <- size();
      let ncols <- 0;
      let iter <- walk();

      /* work out number of columns from the first element */
      if iter.hasNext() {
        let z <- iter.next().get<Type[_]>();
        if z? {
          ncols <- length(z!);
          Y <- matrix<Type>(0, ncols, nrows);  // recall Y is transposed
          Y[1..ncols,1] <- z!;
        } else {
          return nil;
        }
      }

      /* remaining elements, returning nil if a length does not match that of
       * first element */
      let i <- 1;
      while iter.hasNext() {
        let z <- iter.next().get<Type[_]>();
        if z? && length(z!) == ncols {
          i <- i + 1;
          Y[1..ncols,i] <- z!;
        } else {
          warn("row " + (i + 1) + " does not match, has " + length(z!) +
               " columns instead of " + ncols);
          return nil;
        }
      }
      assert i == nrows;

      return transpose(Y);
    }
  }

  function doGet(t:Integer, x:Boolean?) -> Boolean? {
    return doGet(x);
  }

  function doGet(t:Integer, x:Integer?) -> Integer? {
    return doGet(x);
  }

  function doGet(t:Integer, x:Real?) -> Real? {
    return doGet(x);
  }

  function doGet(t:Integer, x:String?) -> String? {
    return doGet(x);
  }

  function doGet<Type>(t:Integer, x:Type?) -> Type? {
    return make<Type>(t, this);
  }

  function doGet(t:Integer, x:Boolean[_]?) -> Boolean[_]? {
    return doGet(x);
  }

  function doGet(t:Integer, x:Integer[_]?) -> Integer[_]? {
    return doGet(x);
  }

  function doGet(t:Integer, x:Real[_]?) -> Real[_]? {
    return doGet(x);
  }

  function doGet<Type>(t:Integer, x:Type[_]?) -> Type[_]? {
    return doGet(x);
  }

  function doGetVector<Type>(t:Integer) -> Type[_]? {
    return doGetVector<Type>();
  }

  function doGet(t:Integer, x:Boolean[_,_]?) -> Boolean[_,_]? {
    return doGet(x);
  }

  function doGet(t:Integer, x:Integer[_,_]?) -> Integer[_,_]? {
    return doGet(x);
  }

  function doGet(t:Integer, x:Real[_,_]?) -> Real[_,_]? {
    return doGet(x);
  }

  function doGet<Type>(t:Integer, x:Type[_,_]?) -> Type[_,_]? {
    return doGet(x);
  }

  function doSet(x:Boolean) {
    setNil();
    scalarBoolean <- x;
  }

  function doSet(x:Boolean!) {
    doSet(x!);
  }

  function doSet(x:Integer) {
    setNil();
    scalarInteger <- x;
  }

  function doSet(x:Integer!) {
    doSet(x!);
  }

  function doSet(x:Real) {
    setNil();
    scalarReal <- x;
  }

  function doSet(x:Real!) {
    doSet(x!);
  }

  function doSet(x:String) {
    setNil();
    scalarString <- x;
  }

  function doSet(x:Object) {
    setNil();
    x.write(this);
  }

  function doSet(x:Boolean[_]) {
    setNil();
    vectorBoolean <- x;
  }

  function doSet(x:Integer[_]) {
    setNil();
    vectorInteger <- x;
  }

  function doSet(x:Real[_]) {
    setNil();
    vectorReal <- x;
  }

  function doSet(x:Boolean[_,_]) {
    setNil();
    matrixBoolean <- x;
  }

  function doSet(x:Integer[_,_]) {
    setNil();
    matrixInteger <- x;
  }

  function doSet(x:Real[_,_]) {
    setNil();
    matrixReal <- x;
  }

  function doSet(t:Integer, x:Boolean) {
    doSet(x);
  }

  function doSet(t:Integer, x:Boolean!) {
    doSet(x);
  }

  function doSet(t:Integer, x:Integer) {
    doSet(x);
  }

  function doSet(t:Integer, x:Integer!) {
    doSet(x);
  }

  function doSet(t:Integer, x:Real) {
    doSet(x);
  }

  function doSet(t:Integer, x:Real!) {
    doSet(x);
  }

  function doSet(t:Integer, x:String) {
    doSet(x);
  }

  function doSet(t:Integer, x:Object) {
    setNil();
    x.write(t, this);
  }

  function doSet(t:Integer, x:Boolean[_]) {
    doSet(x);
  }

  function doSet(t:Integer, x:Integer[_]) {
    doSet(x);
  }

  function doSet(t:Integer, x:Real[_]) {
    doSet(x);
  }

  function doSet(t:Integer, x:Boolean[_,_]) {
    doSet(x);
  }

  function doSet(t:Integer, x:Integer[_,_]) {
    doSet(x);
  }

  function doSet(t:Integer, x:Real[_,_]) {
    doSet(x);
  }

  function doPush(x:Boolean) {
    if isEmpty() {
      set(x);
    } else if scalarBoolean? {
      set(stack(scalarBoolean!, x));
    } else if scalarInteger? {
      set(stack(scalarInteger!, cast<Integer>(x)));
    } else if scalarReal? {
      set(stack(scalarReal!, cast<Real>(x)));
    } else if vectorBoolean? {
      cpp{{
      vectorBoolean.value().push(x);
      }}
    } else if vectorInteger? {
      push(cast<Integer>(x));
    } else if vectorReal? {
      push(cast<Real>(x));
    } else {
      push(make_buffer(x));
    }
  }

  function doPush(x:Boolean!) {
    doPush(x!);
  }

  function doPush(x:Integer) {
    if isEmpty() {
      set(x);
    } else if scalarBoolean? {
      set(stack(cast<Integer>(scalarBoolean!), x));
    } else if scalarInteger? {
      set(stack(scalarInteger!, x));
    } else if scalarReal? {
      set(stack(scalarReal!, cast<Real>(x)));
    } else if vectorBoolean? {
      set(stack(cast<Integer>(vectorBoolean!), x));
    } else if vectorInteger? {
      cpp{{
      vectorInteger.value().push(x);
      }}
    } else if vectorReal? {
      push(cast<Real>(x));
    } else {
      push(make_buffer(x));
    }
  }

  function doPush(x:Integer!) {
    doPush(x!);
  }

  function doPush(x:Real) {
    if isEmpty() {
      set(x);
    } else if scalarBoolean? {
      set(stack(cast<Real>(scalarBoolean!), x));
    } else if scalarInteger? {
      set(stack(cast<Real>(scalarInteger!), x));
    } else if scalarReal? {
      set(stack(scalarReal!, x));
    } else if vectorBoolean? {
      set(stack(cast<Real>(vectorBoolean!), x));
    } else if vectorInteger? {
      set(stack(cast<Real>(vectorInteger!), x));
    } else if vectorReal? {
      cpp{{
      vectorReal.value().push(x);
      }}
    } else {
      push(make_buffer(x));
    }
  }

  function doPush(x:Real!) {
    doPush(x!);
  }

  function doPush(x:String) {
    push(make_buffer(x));
  }

  function doPush(x:Object) {
    push(make_buffer(x));
  }

  function doPush(x:Boolean[_]) {
    push(make_buffer(x));
  }

  function doPush(x:Integer[_]) {
    push(make_buffer(x));
  }

  function doPush(x:Real[_]) {
    push(make_buffer(x));
  }

  function doPush(x:Boolean[_,_]) {
    push(make_buffer(x));
  }

  function doPush(x:Integer[_,_]) {
    push(make_buffer(x));
  }

  function doPush(x:Real[_,_]) {
    push(make_buffer(x));
  }

  function doPush(t:Integer, x:Boolean) {
    doPush(x);
  }

  function doPush(t:Integer, x:Boolean!) {
    doPush(x);
  }

  function doPush(t:Integer, x:Integer) {
    doPush(x);
  }

  function doPush(t:Integer, x:Integer!) {
    doPush(x);
  }

  function doPush(t:Integer, x:Real) {
    doPush(x);
  }

  function doPush(t:Integer, x:Real!) {
    doPush(x);
  }

  function doPush(t:Integer, x:String) {
    doPush(x);
  }

  function doPush(t:Integer, x:Object) {
    push(make_buffer(t, x));
  }

  function doPush(t:Integer, x:Boolean[_]) {
    doPush(x);
  }

  function doPush(t:Integer, x:Integer[_]) {
    doPush(x);
  }

  function doPush(t:Integer, x:Real[_]) {
    doPush(x);
  }

  function doPush(t:Integer, x:Boolean[_,_]) {
    doPush(x);
  }

  function doPush(t:Integer, x:Integer[_,_]) {
    doPush(x);
  }

  function doPush(t:Integer, x:Real[_,_]) {
    doPush(x);
  }
}

/**
 * Create a Buffer.
 */
function make_buffer() -> Buffer {
  return Buffer();
}

/**
 * Create a Buffer.
 *
 * @param root Root value.
 */
function make_buffer<Type>(root:Type) -> Buffer {
  o:Buffer;
  o.set(root);
  return o;
}

/**
 * Create a Buffer.
 *
 * @param t Step number.
 * @param root Root value.
 */
function make_buffer<Type>(t:Integer, root:Type) -> Buffer {
  o:Buffer;
  o.set(t, root);
  return o;
}

/**
 * Create a Buffer representing an object (in the JSON sense).
 *
 * @param keys Keys.
 * @param values Values.
 */
function make_buffer(keys:Array<String>, values:Array<Buffer>) -> Buffer {
  o:Buffer;
  o.set(keys, values);
  return o;
}
