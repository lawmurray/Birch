/**
 * Writer for YAML files.
 *
 * ```mermaid
 * classDiagram
 *    Writer <|-- YAMLWriter
 *    YAMLWriter <|-- JSONWriter
 *    link Writer "../Writer/"
 *    link YAMLWriter "../YAMLWriter/"
 *    link JSONWriter "../JSONWriter/"
 * ```
 */
class YAMLWriter < Writer {
  /**
   * The file.
   */
  file:File;

  /*
   * Is the file being written sequentially?
   */
  sequential:Boolean <- false;

  hpp{{
  yaml_emitter_t emitter;
  yaml_event_t event;
  }}
  
  override function open(path:String) {
    file <- fopen(path, WRITE);
    cpp{{
    yaml_emitter_initialize(&this->emitter);
    yaml_emitter_set_unicode(&this->emitter, 1);
    yaml_emitter_set_output_file(&this->emitter, this->file);
    yaml_stream_start_event_initialize(&this->event, YAML_UTF8_ENCODING);
    yaml_emitter_emit(&this->emitter, &this->event);
    yaml_document_start_event_initialize(&this->event, NULL, NULL, NULL, 1);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }
  
  override function dump(buffer:Buffer) {
    buffer.accept(this);
  }

  override function push(buffer:Buffer) {
    if !sequential {
      startSequence();
      sequential <- true;
    }
    buffer.accept(this);
  }

  override function flush() {
    cpp{{
    yaml_emitter_flush(&this->emitter);
    fflush(file);
    }}
  }

  override function close() {
    if sequential {
      endSequence();
    }
    cpp{{
    yaml_document_end_event_initialize(&this->event, 1);
    yaml_emitter_emit(&this->emitter, &this->event);
    yaml_stream_end_event_initialize(&this->event);
    yaml_emitter_emit(&this->emitter, &this->event);
    yaml_emitter_delete(&this->emitter);
    fclose(file);
    }}
  }

  override function visit(keys:Array<String>, values:Array<Buffer>) {
    assert keys.size() == values.size();
    startMapping();
    for i in 1..keys.size() {
      visit(keys[i]);
      values[i].accept(this);
    }
    endMapping();
  }
  
  override function visit(values:Array<Buffer>) {
    startSequence();
    for i in 1..values.size() {
      values[i].accept(this);
    }
    endSequence();
  }

  override function visit(value:Boolean) {
    let str <- to_string(value);
    cpp{{
    yaml_scalar_event_initialize(&this->event, NULL, NULL,
        (yaml_char_t*)str.c_str(), str.length(), 1, 1,
        YAML_ANY_SCALAR_STYLE);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }

  override function visit(value:Integer) {
    let str <- to_string(value);
    cpp{{
    yaml_scalar_event_initialize(&this->event, NULL, NULL,
        (yaml_char_t*)str.c_str(), str.length(), 1, 1,
        YAML_ANY_SCALAR_STYLE);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }

  override function visit(value:Real) {
    /* the literals NaN, Infinity and -Infinity are not correct JSON, but are
     * fine for YAML, are correct JavaScript, and are supported by Python's
     * JSON module (also based on libyaml); so we encode to this */
    str:String;
    if value == inf {
      str <- "Infinity";
    } else if value == -inf {
      str <- "-Infinity";
    } else if isnan(value) {
      str <- "NaN";
    } else {
      str <- to_string(value);
    }
    cpp{{
    yaml_scalar_event_initialize(&this->event, NULL, NULL,
        (yaml_char_t*)str.c_str(), str.length(), 1, 1,
        YAML_PLAIN_SCALAR_STYLE);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }

  override function visit(value:String) {
    cpp{{
    yaml_scalar_event_initialize(&this->event, NULL, NULL,
        (yaml_char_t*)value.c_str(), value.length(), 1, 1,
        YAML_ANY_SCALAR_STYLE);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }
  
  override function visit(value:Boolean[_]) {
    startSequence();
    for i in 1..length(value) {
      visit(value[i]);
    }
    endSequence();
  }

  override function visit(value:Integer[_]) {
    startSequence();
    for i in 1..length(value) {
      visit(value[i]);
    }
    endSequence();
  }
  
  override function visit(value:Real[_]) {
    startSequence();
    for i in 1..length(value) {
      visit(value[i]);
    }
    endSequence();
  }

  override function visit(value:Boolean[_,_]) {
    let n <- columns(value);
    startSequence();
    for i in 1..rows(value) {
      visit(value[i,1..n]);
    }
    endSequence();
  }

  override function visit(value:Integer[_,_]) {
    let n <- columns(value);
    startSequence();
    for i in 1..rows(value) {
      visit(value[i,1..n]);
    }
    endSequence();
  }
  
  override function visit(value:Real[_,_]) {
    let n <- columns(value);
    startSequence();
    for i in 1..rows(value) {
      visit(value[i,1..n]);
    }
    endSequence();
  }

  override function visitNil() {
    cpp{{
    yaml_scalar_event_initialize(&this->event, NULL, NULL,
        (yaml_char_t*)"null", 4, 1, 1,
        YAML_ANY_SCALAR_STYLE);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }

  function startMapping() {
    cpp{{
    yaml_mapping_start_event_initialize(&this->event, NULL, NULL, 1,
        YAML_ANY_MAPPING_STYLE);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }
  
  function endMapping() {
    cpp{{
    yaml_mapping_end_event_initialize(&this->event);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }
  
  function startSequence() {
    cpp{{
    yaml_sequence_start_event_initialize(&this->event, NULL, NULL, 1,
        YAML_ANY_SEQUENCE_STYLE);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}
  }
  
  function endSequence() {
    cpp{{
    yaml_sequence_end_event_initialize(&this->event);
    yaml_emitter_emit(&this->emitter, &this->event);
    }}    
  }
}
