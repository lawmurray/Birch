/**
 * Model for Yap case study.
 */
final class YapDengueModel < Model {
  /**
   * Human population.
   */
  h:SEIRComponent;

  /**
   * Mosquito population.
   */
  m:SEIRComponent;

  /**
   * Probability of a human case being observed.
   */
  ρ:Random<Real>;

  /**
   * Latent aggregate number of cases since last observation.
   */
  z:Integer <- 0;

  /**
   * Observed aggregate number of cases since last observation.
   */
  y:Integer?;

  override function simulate() {
    h.ν <- 0.0;
    h.μ <- 1.0;
    h.λ ~ Beta(1.0, 1.0);
    h.δ ~ Beta(1.0 + 2.0/4.4, 3.0 - 2.0/4.4);
    h.γ ~ Beta(1.0 + 2.0/4.5, 3.0 - 2.0/4.5);

    m.ν <- 1.0/7.0;
    m.μ <- 6.0/7.0;
    m.λ ~ Beta(1.0, 1.0);
    m.δ ~ Beta(1.0 + 2.0/6.5, 3.0 - 2.0/6.5);
    m.γ <- 0.0;

    ρ ~ Beta(1.0, 1.0);
    z <- 0;
    y <- nil;
  }

  override function simulate(t:Integer) {
    if t == 1 {
      /* initial state */
      let n <- 7370;
      h.i[t] <~ Poisson(5.0);
      h.i[t] <- h.i[t] + 1;
      h.e[t] <~ Poisson(5.0);
      h.r[t] <~ UniformInteger(0, n - h.i[t] - h.e[t]);
      h.s[t] <- n - h.e[t] - h.i[t] - h.r[t];

      h.Δs[t] <- 0;
      h.Δe[t] <- h.e[t];
      h.Δi[t] <- h.i[t];
      h.Δr[t] <- 0;
      
      let u <~ Uniform(-1.0, 2.0);
      m.s[t] <- n*pow(10.0, u!);
      m.e[t] <- 0;
      m.i[t] <- 0;
      m.r[t] <- 0;

      m.Δs[t] <- 0;
      m.Δe[t] <- 0;
      m.Δi[t] <- 0;
      m.Δr[t] <- 0;
    } else {
      n:Real <- h.s[t - 1] + h.e[t - 1] + h.i[t - 1] + h.r[t - 1];

      /* transition of human population */
      let τ_h <~ Binomial(h.s[t - 1], 1.0 - exp(-m.i[t - 1]/n));
      h.transfer(t, τ_h);

      /* transition of mosquito population */
      let τ_m <~ Binomial(m.s[t - 1], 1.0 - exp(-h.i[t - 1]/n));
      m.transfer(t, τ_m);
    }

    /* observation */
    z <- z + h.Δi[t];
    if y? {
      y! ~> Binomial(z, ρ);
      z <- 0;
    }
  }

  override function read(buffer:Buffer) {
    h <-? buffer.get<SEIRComponent>("h");
    m <-? buffer.get<SEIRComponent>("m");
    ρ <-? buffer.get<Real>("ρ");
  }

  override function write(buffer:Buffer) {
    buffer.set("h", h);
    buffer.set("m", m);
    buffer.set("ρ", ρ);
  }

  override function read(t:Integer, buffer:Buffer) {
    y <- buffer.get<Integer>();
  }
}
