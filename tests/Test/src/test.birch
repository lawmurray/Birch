/*
 * Compare two empirical distributions for the purposes of tests.
 *
 * - x1: First empirical distribution.
 * - x2: Second empirical distribution.
 *
 * Return: Did the test pass?
 */
function pass(x1:Real[_], x2:Real[_]) -> Boolean {
  return pass(mat(x1, length(x1)), mat(x2, length(x2)));
}

/*
 * Compare two empirical distributions for the purposes of tests.
 *
 * - X1: First empirical distribution.
 * - X2: Second empirical distribution.
 *
 * Return: Did the test pass?
 */
function pass(X1:Real[_,_], X2:Real[_,_]) -> Boolean {
  assert rows(X1) == rows(X2);
  assert columns(X1) == columns(X2);

  let R <- rows(X1);
  let C <- columns(X1);
  let B <- R;  // number of bootstrap resamples
  let nfails <- 0;
  let ntests <- 2*R - 1;
  let α <- 0.001;  // p-value for failure
  let β <- 0.02;  // portion of tests allowed to fail at this threshold
  let l <- vector(1, C);
  let u <- vector(2*C, C);

  for r in 1..ntests {
    x1:Real[_];
    x2:Real[_];
    z0:Real[_];
    if r <= R {
      /* test marginal */
      x1 <- X1[r,1..C];
      x2 <- X2[r,1..C];
    } else {
      /* test random projection */
      let v <~ MultivariateGaussian(0.0, 1.0, R);
      v <- v/sqrt(dot(v));
      x1 <- inner(X1, v);
      x2 <- inner(X2, v);
    }
    z0 <- sort(stack(x1, x2)!);

    let δ <- wasserstein(sort(x1), sort(x2));  // observed distance
    let δ' <- vector(0.0, B);  // bootstrap distances
    let ρ <- vector(1.0/(2*C), 2*C);  // probability vector
    parallel for b in 1..B {
      /* bootstrap sample indices, in sorted order */
      let u1 <- offspring_to_ancestors(simulate_multinomial(C, ρ), C);
      let u2 <- offspring_to_ancestors(simulate_multinomial(C, ρ), C);

      /* gather samples, z0 is sorted above, as is u1 and u2 */
      let z1' <- gather(z0, u1)!;
      let z2' <- gather(z0, u2)!;

      /* distance between bootstrap samples */
      δ'[b] <- wasserstein(z1', z2');
    }
    let p <- count(δ' > δ)!/Real(B);  // p-value
    if 100 < R && p < α {
      nfails <- nfails + 1;
      warn("on test " + r + ", p=" + p + " δ=" + δ + ", δ_max=" + max(δ')!);
    }
  }
  if 100 < R && ceil(β*ntests) < nfails {
    warn("***failed*** in aggregate, " + nfails + " of " + ntests + " failed");
    return false;
  } else {
    return true;
  }
}

/**
 * 1-Wasserstein distance between two univariate empirical distributions with
 * equal number of samples.
 *
 * - x1: Samples from the first distribution, sorted.
 * - x2: Samples from the second distribution, sorted.
 *
 * Return: 1-Wasserstein distance between `x1` and `x2`.
 */
function wasserstein(x1:Real[_], x2:Real[_]) -> Real {
  return sum(abs(x1 - x2))!/length(x1);
}
