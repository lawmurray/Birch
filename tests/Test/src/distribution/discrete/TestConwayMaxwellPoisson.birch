class TestConwayMaxwellPoisson < TestModel {
  x:Random<Integer>;
  μ:Random<Real>;
  ν:Random<Real>;
  n:Integer;

  override function initialize() {
    μ ~ Uniform(0.5, 100.0);
    ν ~ Uniform(0.5, 10.0);
    n <- simulate_uniform_int(1, 10000);
  }

  override function simulate() {
    x ~ ConwayMaxwellPoisson(μ, ν, n);
  }

  override function forward() -> Real[_] {
    return eval(x);
  }

  override function backward() -> Real[_] {
    return eval(x);
  }

  function marginal() -> Distribution<Integer> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_pdf_conway_maxwell_poisson(N:Integer <- 10000,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestConwayMaxwellPoisson;
  test_pdf(m, N, lazy);
}

program test_cdf_conway_maxwell_poisson() {
  m:TestConwayMaxwellPoisson;
  test_cdf(m);
}

program test_grad_conway_maxwell_poisson(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestConwayMaxwellPoisson;
  test_grad(m, N, backward);
}
