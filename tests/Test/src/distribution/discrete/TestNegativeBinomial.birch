class TestNegativeBinomial < TestModel {
  x:Random<Integer>;
  k:Random<Integer>;
  ρ:Random<Real>;

  override function initialize() {
    k ~ UniformInteger(1, 20);
    ρ ~ Uniform(0.01, 1.0);
  }

  override function simulate() {
    x ~ NegativeBinomial(k, ρ);
  }

  override function forward() -> Real[_] {
    return x.eval();
  }

  override function backward() -> Real[_] {
    return x.eval();
  }

  function marginal() -> Distribution<Integer> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_pdf_negative_binomial(N:Integer <- 10000,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestNegativeBinomial;
  test_pdf(m, N, lazy);
}

program test_cdf_negative_binomial() {
  m:TestNegativeBinomial;
  test_cdf(m);
}

program test_grad_negative_binomial(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestNegativeBinomial;
  test_grad(m, N, backward);
}
