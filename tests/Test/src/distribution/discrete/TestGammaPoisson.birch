class TestGammaPoisson < TestModel {
  λ:Random<Real>;
  x:Random<Integer>;

  a:Random<Real>;
  k:Random<Real>;
  θ:Random<Real>;

  override function initialize() {
    a ~ Uniform(0.0, 10.0);
    k ~ Uniform(1.0, 10.0);
    θ ~ Uniform(0.0, 10.0);
  }

  override function simulate() {
    λ ~ Gamma(k, θ);
    x ~ Poisson(a*λ);
  }

  override function forward() -> Real[_] {
    y:Real[2];
    y[1] <- eval(λ);
    y[2] <- eval(x);
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- eval(x);
    assert !λ.hasValue();
    y[1] <- eval(λ);
    return y;
  }

  function marginal() -> Distribution<Integer> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 2;
  }
}

program test_conjugacy_gamma_poisson(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestGammaPoisson;
  test_conjugacy(m, N, lazy);
}

program test_pdf_gamma_poisson(N:Integer <- 10000,
    S:Integer <- 0, lazy:Boolean <- false) {
  m:TestGammaPoisson;
  test_pdf(m, N, lazy);
}

program test_cdf_gamma_poisson() {
  m:TestGammaPoisson;
  test_cdf(m);
}

program test_grad_gamma_poisson(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestGammaPoisson;
  test_grad(m, N, backward);
}
