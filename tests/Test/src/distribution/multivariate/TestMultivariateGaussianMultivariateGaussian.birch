class TestLinearMultivariateGaussianMultivariateGaussian < TestModel {
  μ:Random<Real[_]>;
  x:Random<Real[_]>;

  n:Integer <- 4;

  A:Real[n,n];
  μ_0:Real[n];
  Σ_0:Real[n,n];
  c:Real[n];
  Σ_1:Real[n,n];

  override function initialize() {
    for i in 1..n {
      μ_0[i] <- simulate_uniform(-10.0, 10.0);
      c[i] <- simulate_uniform(-10.0, 10.0);
      for j in 1..n {
        Σ_0[i,j] <- simulate_uniform(-2.0, 2.0);
        Σ_1[i,j] <- simulate_uniform(-2.0, 2.0);
        A[i,j] <- simulate_uniform(-2.0, 2.0);
      }
    }
    Σ_0 <- outer(Σ_0) + diagonal(1.0e-2, n);
    Σ_1 <- outer(Σ_1) + diagonal(1.0e-2, n);
  }

  override function simulate() {
    μ ~ MultivariateGaussian(μ_0, Σ_0);
    x ~ MultivariateGaussian(A*μ + c, Σ_1);
  }

  override function forward() -> Real[_] {
    y:Real[2*n];
    y[1..n] <- eval(μ);
    y[(n + 1)..2*n] <- eval(x);
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[2*n];
    assert !x.hasValue();
    y[(n + 1)..2*n] <- eval(x);
    assert !μ.hasValue();
    y[1..n] <- eval(μ);
    return y;
  }

  function marginal() -> Distribution<Real[_]> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 2*n;
  }
}

program test_conjugacy_multivariate_gaussian_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMultivariateGaussianMultivariateGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_multivariate_gaussian_multivariate_gaussian(
    N:Integer <- 10000, S:Integer <- 20, lazy:Boolean <- false) {
  m:TestLinearMultivariateGaussianMultivariateGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_multivariate_gaussian_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMultivariateGaussianMultivariateGaussian;
  test_z(m, N, lazy);
}

program test_grad_multivariate_gaussian_multivariate_gaussian(
    N:Integer <- 1000, backward:Boolean <- false) {
  m:TestLinearMultivariateGaussianMultivariateGaussian;
  test_grad(m, N, backward);
}
