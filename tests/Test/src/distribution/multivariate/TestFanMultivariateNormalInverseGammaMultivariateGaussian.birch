class TestFanMultivariateNormalInverseGammaMultivariateGaussian < TestModel {
  σ2:Random<Real>;
  μ:Random<Real[_]>;
  x:Array<Random<Real[_]>>;
  A:Array<Real[_,_]>;
  c:Array<Real[_]>;
  Ψ:Array<Real[_,_]>;

  n:Integer <- 4;

  α:Real;
  β:Real;
  m:Real[n];
  Σ:Real[n,n];

  override function initialize() {
    α <- simulate_uniform(3.0, 10.0);
    β <- simulate_uniform(0.1, 10.0);
    m <- vector_lambda(\(i:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n);
    Σ <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
    Σ <- outer(Σ) + diagonal(1.0e-2, n);
    for i in 1..5 {
      A[i] <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n, n);
      c[i] <- vector_lambda(\(i:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n);
      let S <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
      Ψ[i] <- outer(S) + diagonal(1.0e-2, n);
    }
  }

  override function simulate() {
    σ2 ~ InverseGamma(α, β);
    μ ~ MultivariateGaussian(m, Σ*σ2);
    for i in 1..5 {
      x[i] ~ MultivariateGaussian(μ, Ψ[1]*σ2);
    }
  }

  override function forward() -> Real[_] {
    eval(σ2);
    eval(μ);
    eval(x[1]);
    eval(x[2]);
    eval(x[3]);
    eval(x[4]);
    eval(x[5]);
    return vectorize();
  }

  override function backward() -> Real[_] {
    assert !x[5].hasValue();
    eval(x[5]);
    eval(x[4]);
    eval(x[3]);
    eval(x[2]);
    eval(x[1]);
    assert !μ.hasValue();
    eval(μ);
    assert !σ2.hasValue();
    eval(σ2);
    return vectorize();
  }

  function marginal() -> Distribution<Real[_]> {
    return x[5].getDistribution();
  }

  function vectorize() -> Real[_] {
    y:Real[size()];
    let k <- 1;
    y[k] <- value(σ2);
    k <- k + 1;
    y[k..(k + n - 1)] <- eval(μ);
    k <- k + n;
    y[k..(k + n - 1)] <- eval(x[1]);
    k <- k + n;
    y[k..(k + n - 1)] <- eval(x[2]);
    k <- k + n;
    y[k..(k + n - 1)] <- eval(x[3]);
    k <- k + n;
    y[k..(k + n - 1)] <- eval(x[4]);
    k <- k + n;
    y[k..(k + n - 1)] <- eval(x[5]);
    return y;
  }

  override function size() -> Integer {
    return 6*n + 1;
  }
}

program test_conjugacy_fan_multivariate_normal_inverse_gamma_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestFanMultivariateNormalInverseGammaMultivariateGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_fan_multivariate_normal_inverse_gamma_multivariate_gaussian(
    N:Integer <- 10000, S:Integer <- 20, lazy:Boolean <- false) {
  m:TestFanMultivariateNormalInverseGammaMultivariateGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_fan_multivariate_normal_inverse_gamma_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestFanMultivariateNormalInverseGammaMultivariateGaussian;
  test_z(m, N, lazy);
}

program test_grad_fan_multivariate_normal_inverse_gamma_multivariate_gaussian(
    N:Integer <- 1000, backward:Boolean <- false) {
  m:TestFanMultivariateNormalInverseGammaMultivariateGaussian;
  test_grad(m, N, backward);
}
