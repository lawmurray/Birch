class TestLinearMultivariateNormalInverseGammaMultivariateGaussian < TestModel {
  σ2:Random<Real>;
  μ:Random<Real[_]>;
  x:Random<Real[_]>;

  n:Integer <- 5;
  p:Integer <- 4;

  α:Random<Real>;
  β:Random<Real>;
  A:Random<Real[_,_]>;
  m:Random<Real[_]>;
  S:Random<Real[_,_]>;
  c:Random<Real[_]>;
  Ψ:Random<Real[_,_]>;

  override function initialize() {
    α ~ Uniform(3.0, 10.0);
    β ~ Uniform(0.1, 10.0);
    A ~ MatrixGaussian(matrix(0.0, n, p), diagonal(2.0, n), diagonal(2.0, p));
    m ~ MultivariateGaussian(vector(0.0, p), diagonal(100.0, p));
    S ~ MatrixGaussian(matrix(0.0, p, p), diagonal(2.0, p), diagonal(2.0, p));
    Ψ ~ MatrixGaussian(matrix(0.0, n, n), diagonal(2.0, n), diagonal(2.0, n));
    c ~ MultivariateGaussian(vector(0.0, n), diagonal(100.0, n));
  }

  override function simulate() {
    σ2 ~ InverseGamma(α, β);
    μ ~ MultivariateGaussian(m, (outer(S) + diagonal(1.0e-1, p))*σ2);
    x ~ MultivariateGaussian(A*μ + c, (outer(Ψ) + diagonal(1.0e-2, n))*σ2);
  }

  override function forward() -> Real[_] {
    y:Real[1 + p + n];
    y[1] <- eval(σ2);
    y[2..(p + 1)] <- eval(μ);
    y[(p + 2)..(1 + p + n)] <- eval(x);
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[1 + p + n];
    assert !x.hasValue();
    y[(p + 2)..(1 + p + n)] <- eval(x);
    assert !μ.hasValue();
    y[2..(p + 1)] <- eval(μ);
    assert !σ2.hasValue();
    y[1] <- eval(σ2);
    return y;
  }

  function marginal() -> Distribution<Real[_]> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1 + p + n;
  }
}

program test_conjugacy_multivariate_normal_inverse_gamma_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseGammaMultivariateGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_multivariate_normal_inverse_gamma_multivariate_gaussian(
    N:Integer <- 10000, S:Integer <- 20, lazy:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseGammaMultivariateGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_multivariate_normal_inverse_gamma_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseGammaMultivariateGaussian;
  test_z(m, N, lazy);
}

program test_grad_multivariate_normal_inverse_gamma_multivariate_gaussian(
    N:Integer <- 1000, backward:Boolean <- false) {
  m:TestLinearMultivariateNormalInverseGammaMultivariateGaussian;
  test_grad(m, N, backward);
}
