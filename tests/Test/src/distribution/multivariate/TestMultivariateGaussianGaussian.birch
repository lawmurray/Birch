class TestLinearMultivariateGaussianGaussian < TestModel {
  μ:Random<Real[_]>;
  x:Random<Real>;

  n:Integer <- 4;

  a:Random<Real[_]>;
  m:Random<Real[_]>;
  S:Random<Real[_,_]>;
  c:Random<Real>;
  s2:Random<Real>;

  override function initialize() {
    c ~ Uniform(-10.0, 10.0);
    a ~ MultivariateGaussian(vector(0.0, n), diagonal(4.0, n));
    m ~ MultivariateGaussian(vector(0.0, n), diagonal(100.0, n));
    S ~ MatrixGaussian(fill(0.0, n, n), diagonal(2.0, n), diagonal(2.0, n));
    s2 ~ Uniform(0.1, 10.0);
  }

  override function simulate() {
    μ ~ MultivariateGaussian(m, outer(S) + diagonal(1.0e-2, n));
    x ~ Gaussian(dot(a, μ) + c, s2);
  }

  override function forward() -> Real[_] {
    y:Real[n + 1];
    y[1..n] <- eval(μ);
    y[n + 1] <- eval(x);
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[n + 1];
    assert !x.hasValue();
    y[n + 1] <- eval(x);
    assert !μ.hasValue();
    y[1..n] <- eval(μ);
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return n + 1;
  }
}

program test_conjugacy_multivariate_gaussian_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMultivariateGaussianGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_multivariate_gaussian_gaussian(N:Integer <- 10000,
    S:Integer <- 20, lazy:Boolean <- false) {
  m:TestLinearMultivariateGaussianGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_multivariate_gaussian_gaussian(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestLinearMultivariateGaussianGaussian;
  test_z(m, N, lazy);
}

program test_cdf_multivariate_gaussian_gaussian(N:Integer <- 10000) {
  m:TestLinearMultivariateGaussianGaussian;
  test_cdf(m, N);
}

program test_grad_multivariate_gaussian_gaussian(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestLinearMultivariateGaussianGaussian;
  test_grad(m, N, backward);
}
