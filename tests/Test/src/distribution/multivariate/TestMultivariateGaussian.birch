class TestMultivariateGaussian < TestModel {
  x:Random<Real[_]>;
  μ:Real[5];
  Σ:Real[5,5];

  override function initialize() {
    for i in 1..5 {
      μ[i] <- simulate_uniform(-10.0, 10.0);
      for j in 1..5 {
        Σ[i,j] <- simulate_uniform(-2.0, 2.0);
      }
    }
    Σ <- outer(Σ) + diagonal(1.0e-2, 5);
  }

  override function simulate() {
    x ~ MultivariateGaussian(μ, Σ);
  }

  override function forward() -> Real[_] {
    return eval(x);
  }

  override function backward() -> Real[_] {
    return eval(x);
  }

  function marginal() -> Distribution<Real[_]> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 5;
  }
}

program test_conjugacy_multivariate_gaussian(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestMultivariateGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_multivariate_gaussian(N:Integer <- 10000,
    S:Integer <- 20, lazy:Boolean <- false) {
  m:TestMultivariateGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_multivariate_gaussian(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestMultivariateGaussian;
  test_z(m, N, lazy);
}

program test_grad_multivariate_gaussian(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestMultivariateGaussian;
  test_grad(m, N, backward);
}
