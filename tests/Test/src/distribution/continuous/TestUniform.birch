class TestUniform < TestModel {
  x:Random<Real>;
  l:Random<Real>;
  u:Random<Real>;

  override function initialize() {
    l ~ Uniform(-10.0, 10.0);
    u ~ Uniform(l, l + 20.0);
  }

  override function simulate() {
    x ~ Uniform(l, u);
  }

  override function forward() -> Real[_] {
    return x.eval();
  }

  override function backward() -> Real[_] {
    return x.eval();
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_pdf_uniform(N:Integer <- 10000, S:Integer <- 20,
    lazy:Boolean <- false) {
  m:TestUniform;
  test_pdf(m, N, S, lazy);
}

program test_z_uniform(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestUniform;
  test_z(m, N, lazy);
}

program test_cdf_uniform(N:Integer <- 10000) {
  m:TestUniform;
  test_cdf(m, N);
}

program test_grad_uniform(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestUniform;
  test_grad(m, N, backward);
}
