class TestStudent < TestModel {
  x:Random<Real>;
  k:Random<Real>;
  μ:Random<Real>;
  σ2:Random<Real>;

  override function initialize() {
    k ~ Uniform(2.0, 10.0);  // > 2.0 for finite variance
    μ ~ Uniform(-10.0, 10.0);
    σ2 ~ Uniform(0.0, 10.0);
  }

  override function simulate() {
    x ~ StudentT(k, μ, σ2);
  }

  override function forward() -> Real[_] {
    return x.eval();
  }

  override function backward() -> Real[_] {
    return x.eval();
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_pdf_student_t(N:Integer <- 10000,
    S:Integer <- 20, lazy:Boolean <- false) {
  m:TestStudent;
  test_pdf(m, N, S, lazy);
}

program test_z_student_t(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestStudent;
  test_z(m, N, lazy);
}

program test_cdf_student_t(N:Integer <- 10000) {
  m:TestStudent;
  test_cdf(m, N);
}

program test_grad_student_t(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestStudent;
  test_grad(m, N, backward);
}
