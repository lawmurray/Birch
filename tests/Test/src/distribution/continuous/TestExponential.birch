class TestExponential < TestModel {
  x:Random<Real>;
  λ:Random<Real>;

  override function initialize() {
    λ ~ Uniform(1.0, 10.0);
  }

  override function simulate() {
    x ~ Exponential(λ);
  }

  override function forward() -> Real[_] {
    return x.eval();
  }

  override function backward() -> Real[_] {
    return x.eval();
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 1;
  }
}

program test_pdf_exponential(N:Integer <- 10000, S:Integer <- 20,
    lazy:Boolean <- false) {
  m:TestExponential;
  test_pdf(m, N, S, lazy);
}

program test_z_exponential(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestExponential;
  test_z(m, N, lazy);
}

program test_cdf_exponential(N:Integer <- 10000) {
  m:TestExponential;
  test_cdf(m, N);
}

program test_grad_exponential(N:Integer <- 1000, backward:Boolean <- false) {
  m:TestExponential;
  test_grad(m, N, backward);
}
