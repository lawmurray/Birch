class TestNormalInverseGamma < TestModel {
  σ2:Random<Real>;
  x:Random<Real>;

  μ:Random<Real>;
  a2:Random<Real>;
  α:Random<Real>;
  β:Random<Real>;

  override function initialize() {
    μ ~ Uniform(-10.0, 10.0);
    a2 ~ Uniform(0.1, 100.0);
    α ~ Uniform(3.0, 10.0);
    β ~ Uniform(0.1, 10.0);
  }

  override function simulate() {
    σ2 ~ InverseGamma(α, β);
    x ~ Gaussian(μ, a2*σ2);
  }

  override function forward() -> Real[_] {
    y:Real[2];
    y[1] <- eval(σ2);
    y[2] <- eval(x);
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[2];
    assert !x.hasValue();
    y[2] <- eval(x);
    assert !σ2.hasValue();
    y[1] <- eval(σ2);
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x.getDistribution();
  }

  override function size() -> Integer {
    return 2;
  }
}

program test_conjugacy_normal_inverse_gamma(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestNormalInverseGamma;
  test_conjugacy(m, N, lazy);
}

program test_pdf_normal_inverse_gamma(N:Integer <- 10000,
    S:Integer <- 20, lazy:Boolean <- false) {
  m:TestNormalInverseGamma;
  test_pdf(m, N, S, lazy);
}

program test_z_normal_inverse_gamma(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestNormalInverseGamma;
  test_z(m, N, lazy);
}

program test_cdf_normal_inverse_gamma(N:Integer <- 10000) {
  m:TestNormalInverseGamma;
  test_cdf(m, N);
}

program test_grad_normal_inverse_gamma(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestNormalInverseGamma;
  test_grad(m, N, backward);
}
