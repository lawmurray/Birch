class TestFanNormalInverseGammaGaussian < TestModel {
  x:Array<Random<Real>>;
  μ:Random<Real>;
  σ2:Random<Real>;
  a:Real[5];
  m:Random<Real>;
  s2:Random<Real>;
  α:Random<Real>;
  β:Random<Real>;
  c:Real[5];
  t2:Real[5];

  override function initialize() {
    for i in 1..5 {
      a[i] <- simulate_uniform(-10.0, 10.0);
      c[i] <- simulate_uniform(-10.0, 10.0);
      t2[i] <- simulate_uniform(0.1, 1.0);
    }

    m ~ Uniform(-10.0, 10.0);
    s2 ~ Uniform(0.0, 2.0);
    α ~ Uniform(3.0, 10.0);
    β ~ Uniform(0.1, 10.0);
  }

  override function simulate() {
    σ2 ~ InverseGamma(α, β);
    μ ~ Gaussian(m, s2*σ2);
    for i in 1..5 {
      x[i] ~ Gaussian(a[i]*μ + c[i], t2[i]*σ2);
    }
  }

  override function forward() -> Real[_] {
    y:Real[size()];
    y[1] <- eval(σ2);
    y[2] <- eval(μ);
    y[3] <- eval(x[1]);
    y[4] <- eval(x[2]);
    y[5] <- eval(x[3]);
    y[6] <- eval(x[4]);
    y[7] <- eval(x[5]);
    return y;
  }

  override function backward() -> Real[_] {
    y:Real[size()];
    assert !x[5].hasValue();
    y[7] <- eval(x[5]);
    y[6] <- eval(x[4]);
    y[5] <- eval(x[3]);
    y[4] <- eval(x[2]);
    y[3] <- eval(x[1]);
    assert !μ.hasValue();
    y[2] <- eval(μ);
    assert !σ2.hasValue();
    y[1] <- eval(σ2);
    return y;
  }

  function marginal() -> Distribution<Real> {
    return x[5].getDistribution();
  }

  override function size() -> Integer {
    return 7;
  }
}

program test_conjugacy_fan_normal_inverse_gamma_gaussian(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestFanNormalInverseGammaGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_fan_normal_inverse_gamma_gaussian(N:Integer <- 10000,
    S:Integer <- 20, lazy:Boolean <- false) {
  m:TestFanNormalInverseGammaGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_fan_normal_inverse_gamma_gaussian(N:Integer <- 10000,
    lazy:Boolean <- false) {
  m:TestFanNormalInverseGammaGaussian;
  test_z(m, N, lazy);
}

program test_cdf_fan_normal_inverse_gamma_gaussian(N:Integer <- 10000) {
  m:TestFanNormalInverseGammaGaussian;
  test_cdf(m, N);
}

program test_grad_fan_normal_inverse_gamma_gaussian(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestFanNormalInverseGammaGaussian;
  test_grad(m, N, backward);
}
