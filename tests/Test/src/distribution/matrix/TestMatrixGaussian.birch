class TestMatrixGaussian < TestModel {
  X:Random<Real[_,_]>;

  n:Integer <- 5;
  p:Integer <- 4;

  M:Real[n,p];
  U:Real[n,n];
  V:Real[p,p];

  override function initialize() {
    M <- matrix_lambda(\(i:Integer, j:Integer) -> Real { return simulate_uniform(-10.0, 10.0); }, n, p);
    U <- matrix_lambda(\(i:Integer, j:Integer) -> Real { return simulate_uniform(-2.0, 2.0); }, n, n);
    V <- matrix_lambda(\(i:Integer, j:Integer) -> Real { return simulate_uniform(-2.0, 2.0); }, p, p);

    U <- outer(U) + diagonal(1.0e-2, n);
    V <- outer(V) + diagonal(1.0e-1, p);
  }

  override function simulate() {
    X ~ MatrixGaussian(M, U, V);
  }

  override function forward() -> Real[_] {
    return eval(vec(X));
  }

  override function backward() -> Real[_] {
    return eval(vec(X));
  }

  function marginal() -> Distribution<Real[_,_]> {
    return X.getDistribution();
  }

  override function size() -> Integer {
    return n*p;
  }
}

program test_pdf_matrix_gaussian(N:Integer <- 10000,
    S:Integer <- 20, lazy:Boolean <- false) {
  m:TestMatrixGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_matrix_gaussian(N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestMatrixGaussian;
  test_z(m, N, lazy);
}

program test_grad_matrix_gaussian(N:Integer <- 1000,
    backward:Boolean <- false) {
  m:TestMatrixGaussian;
  test_grad(m, N, backward);
}
