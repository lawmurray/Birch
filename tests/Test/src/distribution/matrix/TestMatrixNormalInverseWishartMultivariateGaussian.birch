class TestLinearMatrixNormalInverseWishartMultivariateGaussian < TestModel {
  V:Random<Real[_,_]>;
  X:Random<Real[_,_]>;
  y:Random<Real[_]>;

  n:Integer <- 5;
  p:Integer <- 4;
  
  a:Real[n];
  M:Real[n,p];
  U:Real[n,n];
  c:Real[p];
  k:Real;
  Ψ:Real[p,p];

  override function initialize() {
    k <- simulate_uniform(3.0, 10.0) + p;
    for i in 1..n {
      a[i] <- simulate_uniform(-2.0, 2.0);
      for j in 1..n {
        U[i,j] <- simulate_uniform(-2.0, 2.0);
      }
      for j in 1..p {
        M[i,j] <- simulate_uniform(-10.0, 10.0);
      }
    }
    for i in 1..p {
      c[i] <- simulate_uniform(-10.0, 10.0);
      for j in 1..p {
        Ψ[i,j] <- simulate_uniform(-10.0, 10.0);
      }
    }
    U <- outer(U) + diagonal(1.0e-2, n);
    Ψ <- outer(Ψ) + diagonal(1.0e-1, p);
  }

  override function simulate() {
    V ~ InverseWishart(Ψ, k);
    X ~ MatrixGaussian(M, U, V);
    y ~ MultivariateGaussian(inner(X, a) + c, V);
  }

  override function forward() -> Real[_] {
    V.eval();
    X.eval();
    y.eval();
    return vectorize();
  }

  override function backward() -> Real[_] {
    assert !y.hasValue();
    y.eval();
    assert !X.hasValue();
    X.eval();
    assert !V.hasValue();
    V.eval();
    return vectorize();
  }

  function marginal() -> Distribution<Real[_]> {
    return y.getDistribution();
  }

  function vectorize() -> Real[_] {
    z:Real[size()];
    let k <- 0;
    z[k + 1.. k + p*p] <- vec(V.eval());
    k <- k + p*p;
    z[k + 1.. k + n*p] <- vec(X.eval());
    k <- k + n*p;
    z[k + 1.. k + p] <- y.eval();
    return z;
  }

  override function size() -> Integer {
    return p*p + n*p + p;
  }
}

program test_conjugacy_matrix_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMatrixNormalInverseWishartMultivariateGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_matrix_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 10000, S:Integer <- 20, lazy:Boolean <- false) {
  m:TestLinearMatrixNormalInverseWishartMultivariateGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_matrix_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestLinearMatrixNormalInverseWishartMultivariateGaussian;
  test_z(m, N, lazy);
}

program test_grad_matrix_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 1000, backward:Boolean <- false) {
  m:TestLinearMatrixNormalInverseWishartMultivariateGaussian;
  test_grad(m, N, backward);
}
