class TestFanMatrixNormalInverseWishartMultivariateGaussian < TestModel {
  Σ:Random<Real[_,_]>;
  y:Array<Random<Real[_]>>;
  a:Array<Real[_]>;
  X:Random<Real[_,_]>;
  c:Array<Real[_]>;
  v:Array<Real>;

  n:Integer <- 5;
  p:Integer <- 4;

  k:Real;
  Ψ:Real[p,p];
  M:Real[n,p];
  U:Real[n,n];

  override function initialize() {
    k <- simulate_uniform(3.0, 10.0) + p;
    Ψ <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, p, p);
    M <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n, p);
    U <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
    for i in 1..5 {
      a[i] <- vector_lambda(\(i:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n);
      c[i] <- vector_lambda(\(i:Integer) -> { return simulate_uniform(-10.0, 10.0); }, p);
      v[i] <- simulate_uniform(0.1, 10.0);
    }

    Ψ <- outer(Ψ) + diagonal(1.0e-1, p);
    U <- outer(U) + diagonal(1.0e-2, n);
  }

  override function simulate() {
    Σ ~ InverseWishart(Ψ, k);
    X ~ MatrixGaussian(M, U, Σ);
    for i in 1..5 {
      y[i] ~ MultivariateGaussian(inner(X, a[i]) + c[i], v[i]*Σ);
    }
  }

  override function forward() -> Real[_] {
    eval(Σ);
    eval(X);
    eval(y[1]);
    eval(y[2]);
    eval(y[3]);
    eval(y[4]);
    eval(y[5]);
    return vectorize();
  }

  override function backward() -> Real[_] {
    assert !y[5].hasValue();
    eval(y[5]);
    eval(y[4]);
    eval(y[3]);
    eval(y[2]);
    eval(y[1]);
    assert !X.hasValue();
    eval(X);
    assert !Σ.hasValue();
    eval(Σ);
    return vectorize();
  }

  function marginal() -> Distribution<Real[_]> {
    return y[5].getDistribution();
  }

  function vectorize() -> Real[_] {
    z:Real[size()];
    let k <- 0;
    z[k + 1.. k + p*p] <- eval(vec(Σ));
    k <- k + p*p;
    z[k + 1.. k + n*p] <- eval(vec(X));
    k <- k + n*p;
    z[k + 1.. k + p] <- eval(y[1]);
    k <- k + p;
    z[k + 1.. k + p] <- eval(y[2]);
    k <- k + p;
    z[k + 1.. k + p] <- eval(y[3]);
    k <- k + p;
    z[k + 1.. k + p] <- eval(y[4]);
    k <- k + p;
    z[k + 1.. k + p] <- eval(y[5]);
    return z;
  }

  override function size() -> Integer {
    return p*p + n*p + 5*p;
  }
}

program test_conjugacy_fan_matrix_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestFanMatrixNormalInverseWishartMultivariateGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_fan_matrix_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 10000, S:Integer <- 20, lazy:Boolean <- false) {
  m:TestFanMatrixNormalInverseWishartMultivariateGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_fan_matrix_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestFanMatrixNormalInverseWishartMultivariateGaussian;
  test_z(m, N, lazy);
}

program test_grad_fan_matrix_normal_inverse_wishart_multivariate_gaussian(
    N:Integer <- 1000, backward:Boolean <- false) {
  m:TestFanMatrixNormalInverseWishartMultivariateGaussian;
  test_grad(m, N, backward);
}
