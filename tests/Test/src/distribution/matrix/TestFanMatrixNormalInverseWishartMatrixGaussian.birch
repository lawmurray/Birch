class TestFanMatrixNormalInverseWishartMatrixGaussian < TestModel {
  Σ:Random<Real[_,_]>;
  Y:Array<Random<Real[_,_]>>;
  A:Array<Real[_,_]>;
  X:Random<Real[_,_]>;
  C:Array<Real[_,_]>;
  V:Array<Real[_,_]>;

  n:Integer <- 5;
  p:Integer <- 4;

  k:Real;
  Ψ:Real[p,p];
  M:Real[n,p];
  U:Real[n,n];

  override function initialize() {
    k <- simulate_uniform(3.0, 10.0) + p;
    Ψ <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, p, p);
    M <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n, p);
    U <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
    for i in 1..5 {
      A[i] <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n, n);
      C[i] <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-10.0, 10.0); }, n, p);
      let S <- matrix_lambda(\(i:Integer, j:Integer) -> { return simulate_uniform(-2.0, 2.0); }, n, n);
      V[i] <- outer(S) + diagonal(1.0e-2, n);
    }

    Ψ <- outer(Ψ) + diagonal(1.0e-1, p);
    U <- outer(U) + diagonal(1.0e-2, n);
  }

  override function simulate() {
    Σ ~ InverseWishart(Ψ, k);
    X ~ MatrixGaussian(M, U, Σ);
    for i in 1..5 {
      Y[i] ~ MatrixGaussian(A[i]*X + C[i], V[i], Σ);
    }
  }

  override function forward() -> Real[_] {
    Σ.eval();
    X.eval();
    Y[1].eval();
    Y[2].eval();
    Y[3].eval();
    Y[4].eval();
    Y[5].eval();
    return vectorize();
  }

  override function backward() -> Real[_] {
    assert !Y[5].hasValue();
    Y[5].eval();
    Y[4].eval();
    Y[3].eval();
    Y[2].eval();
    Y[1].eval();
    assert !X.hasValue();
    X.eval();
    assert !Σ.hasValue();
    Σ.eval();
    return vectorize();
  }

  function marginal() -> Distribution<Real[_,_]> {
    return Y[5].getDistribution();
  }

  function vectorize() -> Real[_] {
    z:Real[size()];
    let k <- 0;
    z[k + 1.. k + p*p] <- vec(Σ.eval());
    k <- k + p*p;
    z[k + 1.. k + n*p] <- vec(X.eval());
    k <- k + n*p;
    z[k + 1.. k + n*p] <- vec(Y[1].eval());
    k <- k + n*p;
    z[k + 1.. k + n*p] <- vec(Y[2].eval());
    k <- k + n*p;
    z[k + 1.. k + n*p] <- vec(Y[3].eval());
    k <- k + n*p;
    z[k + 1.. k + n*p] <- vec(Y[4].eval());
    k <- k + n*p;
    z[k + 1.. k + n*p] <- vec(Y[5].eval());
    return z;
  }

  override function size() -> Integer {
    return p*p + 6*n*p;
  }
}

program test_conjugacy_fan_matrix_normal_inverse_wishart_matrix_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestFanMatrixNormalInverseWishartMatrixGaussian;
  test_conjugacy(m, N, lazy);
}

program test_pdf_fan_matrix_normal_inverse_wishart_matrix_gaussian(
    N:Integer <- 10000, S:Integer <- 20, lazy:Boolean <- false) {
  m:TestFanMatrixNormalInverseWishartMatrixGaussian;
  test_pdf(m, N, S, lazy);
}

program test_z_fan_matrix_normal_inverse_wishart_matrix_gaussian(
    N:Integer <- 10000, lazy:Boolean <- false) {
  m:TestFanMatrixNormalInverseWishartMatrixGaussian;
  test_z(m, N, lazy);
}

program test_grad_fan_matrix_normal_inverse_wishart_matrix_gaussian(
    N:Integer <- 1000, backward:Boolean <- false) {
  m:TestFanMatrixNormalInverseWishartMatrixGaussian;
  test_grad(m, N, backward);
}
