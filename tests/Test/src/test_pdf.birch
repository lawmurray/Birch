/*
 * Test the pdf of a model.
 *
 * @param m The model.
 * @param N Number of samples.
 * @param lazy Use lazy version?
 */
function test_pdf<TestModelType>(m:TestModelType, N:Integer, lazy:Boolean) {
  with Handler(true, lazy, true) {
    m.initialize();
    m.simulate();
  }
  test_pdf(m.marginal(), N, lazy);
}

/*
 * Test the pdf of a model.
 *
 * @param m The model.
 * @param N Number of samples.
 * @param S Number of steps in each chain.
 * @param lazy Use lazy version?
 */
function test_pdf<TestModelType>(m:TestModelType, N:Integer, S:Integer,
    lazy:Boolean) {
  with Handler(true, lazy, true) {
    m.initialize();
    m.simulate();
  }
  test_pdf(m.marginal(), N, S, lazy);
}

/*
 * Test the pmf of a univariate Boolean distribution.
 *
 * @param π The target distribution. 
 * @param N Number of samples.
 * @param lazy Use lazy version?
 */
function test_pdf(π:Distribution<Boolean>, N:Integer, lazy:Boolean) {
  /* simulate, counting the occurrence of each value */
  let k <- 0;
  for n in 1..N {
    if lazy {
      k <- k + π.simulateLazy()!;
    } else {
      k <- k + π.simulate()!;
    }
  }

  /* compare pdf to count */
  let failed <- false;
  let ε <- 2.0/sqrt(N);
  let p <- 0.0;
  let q <- 0.0;
  if lazy {
    p <- π.logpdfLazy(true);
    q <- π.logpdfLazy(false);
  } else {
    p <- π.logpdf(true);
    q <- π.logpdf(false);
  }
  let δ <- abs(exp(p) - cast<Real>(k)/N);
  if 100 < N && !(δ <= ε) {  // careful of nans
    failed <- true;
    stderr.print("***failed*** on value true, " + δ + " > " + ε + "\n");
  }
  δ <- abs(exp(q) - cast<Real>(N - k)/N);
  if 100 < N && !(δ <= ε) {  // careful of nans
    failed <- true;
    stderr.print("***failed*** on value false, " + δ + " > " + ε + "\n");
  }
  if failed {
    exit(1);
  }

  /* smoke test for constant */
  π.fix();
}

/*
 * Test the pmf of a univariate discrete distribution.
 *
 * @param π The target distribution. 
 * @param N Number of samples.
 * @param lazy Use lazy version?
 */
function test_pdf(π:Distribution<Integer>, N:Integer, lazy:Boolean) {  
  /* lower bound on interval */
  let from <- π.lower();
  if !from? {
    from <- π.quantile(1.0e-6);
    assert from?;
  }

  /* upper bound on interval */
  let to <- π.upper();
  if !to? {
    to <- π.quantile(1.0 - 1.0e-6);
    if !to? {
      /* search for a rough upper bound for the interval */
      let u <- 50;
      let p <- 0.0;
      do {
        u <- 2*u;
        if lazy {
          p <- π.logpdfLazy(u);
        } else {
          p <- π.logpdf(u);
        }
      } while p > log(1.0e-6);
      to <- u;
    }
  }

  /* simulate, counting the occurrence of each value */
  let count <- vector(0, to!! - from!! + 1);
  for n in 1..N {
    let j <- 0;
    if lazy {
      j <- π.simulateLazy();
    } else {
      j <- π.simulate();
    }
    let i <- j - from!! + 1;
    if 1 <= i && i <= length(count) {
      count[i] <- count[i] + 1;
    }
  }

  /* compare pdf to counts */
  let failed <- false;
  for x in from!!..to!! {
    let p <- 0.0;
    if lazy {
      p <- π.logpdfLazy(x);
    } else {
      p <- π.logpdf(x);
    }
    let δ <- abs(exp(p) - cast<Real>(count[x - from!! + 1])/N);
    let ε <- 2.0/sqrt(N);
    if 100 < N && !(δ <= ε) {  // careful of nans
      failed <- true;
      stderr.print("***failed*** on value " + x + ", " + δ + " > " + ε + "\n");
    }
  }
  if failed {
    exit(1);
  }

  /* smoke test for constant */
  π.fix();
}

/*
 * Test a pdf.
 *
 * @param π The target distribution. 
 * @param N Number of (short) chains.
 * @param S Number of steps in each chain.
 */
function test_pdf(π:Distribution<Real>, N:Integer, S:Integer, lazy:Boolean) {  
  /* iid samples */
  x1:Real[N];
  for n in 1..N {
    if lazy {
      x1[n] <- π.simulateLazy();
    } else {
      x1[n] <- π.simulate();
    }
  }
  
  /* compute the shape for a Gaussian proposal using iid samples */
  let μ <- 0.0;
  let σ2 <- 0.0;
  for n in 1..N*S {
    let x <- 0.0;
    if lazy {
      x <- π.simulateLazy();
    } else {
      x <- π.simulate();
    }
    μ <- μ + x;
    σ2 <- σ2 + x*x;
  }
  μ <- μ/(N*S);
  σ2 <- (σ2/(N*S) - μ*μ)*pow(2.4, 2.0);

  /* draw Metropolis samples using pdf */
  x2:Real[N];
  let last <- false;  // are on the last iteration?
  let done <- false;  // are we done?
  do {
    let a <- vector(0, N);  // number of acceptances in each chain
    parallel for n in 1..N {
      /* initialize n-th chain */
      let x <- 0.0;
      let l <- 0.0;
      if lazy {
        x <- π.simulateLazy();
        l <- π.logpdfLazy(x);
      } else {
        x <- π.simulate();
        l <- π.logpdf(x);
      }

      /* step n-th chain S times */
      for s in 1..S {
        let x' <~ Gaussian(x, σ2);
        let l' <- 0.0;
        if lazy {
          l' <- π.logpdfLazy(x');
        } else {
          l' <- π.logpdf(x');
        }
        let u <~ Uniform(0.0, 1.0);
        if (log(u) <= l' - l)! {
          /* accept */
          x <- x';
          l <- l';
          a[n] <- a[n] + 1;
        }
      }

      /* final state */
      x2[n] <- x;
    }
    let raccepts <- sum(a)!/Real(N*S);  // overall acceptance rate
    if last {
      /* that was the last iteration, so now done */
      done <- true;
    } else if 100 < N && raccepts < 0.3 {
      /* acceptance rate too low, adapt */
      σ2 <- 0.5*σ2;
    } else if 100 < N && raccepts > 0.5 {
      /* acceptance rate too high, adapt */
      σ2 <- 1.5*σ2;
    } else {
      /* acceptance rate fine, repeat one last time to draw final sample */
      last <- true;
    }
  } while !done;
  
  /* test distance between the iid and Metropolis samples */
  if !pass(x1, x2) {
    exit(1);
  }

  /* smoke test for constant */
  π.fix();
}

/*
 * Test a multivariate pdf.
 *
 * @param π The target distribution. 
 * @param N Number of (short) chains.
 * @param S Number of steps in each chain.
 */
function test_pdf(π:Distribution<Real[_]>, N:Integer, S:Integer,
    lazy:Boolean) {  
  /* iid samples */
  D:Integer <- 0;
  if lazy {
    D <- rows(π.simulateLazy());
  } else {
    D <- rows(π.simulate());
  }
  X1:Real[N,D];
  parallel for n in 1..N {
    if lazy {
      X1[n,1..D] <- π.simulateLazy();
    } else {
      X1[n,1..D] <- π.simulate();
    }
  }
  
  /* compute the shape for a Gaussian proposal using iid samples */
  μ:Real[D];
  Σ:Real[D,D];
  do {
    μ <- 0.0;
    Σ <- 0.0;
    for n in 1..N*S {
      x:Real[_];
      if lazy {
        x <- π.simulateLazy();
      } else {
        x <- π.simulate();
      }
      μ <- μ + x;
      Σ <- Σ + outer(x);
    }
    μ <- μ/(N*S);
    Σ <- (Σ/(N*S) - outer(μ))*pow(2.4, 2.0)/D;
  } while N >= 100 && sum(isfinite(chol(Σ)))! == 0.0;
  
  /* draw Metropolis samples using pdf */
  X2:Real[N,D];
  let last <- false;  // are on the last iteration?
  let done <- false;  // are we done?
  do {
    let a <- vector(0, N);  // number of acceptances in each chain
    parallel for n in 1..N {
      /* initialize n-th chain */
      x:Real[_];
      let l <- 0.0;
      if lazy {
        x <- π.simulateLazy();
        l <- π.logpdfLazy(x);
      } else {
        x <- π.simulate();
        l <- π.logpdf(x);
      }

      /* step n-th chain S times */
      for s in 1..S {
        let x' <~ MultivariateGaussian(x, Σ);
        let l' <- 0.0;
        if lazy {
          l' <- π.logpdfLazy(x');
        } else {
          l' <- π.logpdf(x');
        }
        let u <~ Uniform(0.0, 1.0);
        if (log(u) <= l' - l)! {
          /* accept */
          x <- x';
          l <- l';
          a[n] <- a[n] + 1;
        }
      }

      /* final state */
      X2[n,1..D] <- x;
    }
    let raccepts <- sum(a)!/Real(N*S);  // overall acceptance rate
    if last {
      /* that was the last iteration, so now done */
      done <- true;
    } else if 100 < N && raccepts < 0.2 {
      /* acceptance rate too low, adapt */
      Σ <- 0.5*Σ;
    } else if 100 < N && raccepts > 0.25 {
      /* acceptance rate too high, adapt */
      Σ <- 1.5*Σ;
    } else {
      /* acceptance rate fine, repeat one last time to draw final sample */
      last <- true;
    }
  } while !done;

  /* test distance between the iid and Metropolis samples */
  if !pass(X1, X2) {
    exit(1);
  }

  /* smoke test for constant */
  π.fix();
}

/*
 * Test a matrix pdf.
 *
 * @param π The target distribution. 
 * @param N Number of (short) chains.
 * @param S Number of steps in each chain.
 * @param lazy Use lazy version?
 */
function test_pdf(π:Distribution<Real[_,_]>, N:Integer, S:Integer,
    lazy:Boolean) {
  let R <- 0;
  let C <- 0;
  if lazy {
    R <- rows(π.simulateLazy());
    C <- columns(π.simulateLazy());
  } else {
    R <- rows(π.simulate());
    C <- columns(π.simulate());
  }
  
  /* iid samples */
  X1:Real[N,R*C];
  parallel for n in 1..N {
    if lazy {
      X1[n,1..R*C] <- vec(π.simulateLazy());
    } else {
      X1[n,1..R*C] <- vec(π.simulate());
    }
  }
  
  /* compute the shape for a Gaussian proposal using iid samples */
  μ:Real[R*C];
  Σ:Real[R*C,R*C];
  do {
    μ <- 0.0;
    Σ <- 0.0;
    for n in 1..N*S {
      x:Real[_];
      if lazy {
        x <- vec(π.simulateLazy());
      } else {
        x <- vec(π.simulate());
      }
      μ <- μ + x;
      Σ <- Σ + outer(x);
    }
    μ <- μ/(N*S);
    Σ <- (Σ/(N*S) - outer(μ))*pow(2.4, 2.0)/(R*C);
  } while N >= 100 && sum(isfinite(chol(Σ)))! == 0;

  /* draw Metropolis samples using pdf */
  X2:Real[N,R*C];
  let last <- false;  // are on the last iteration?
  let done <- false;  // are we done?
  do {
    let a <- vector(0, N);  // number of acceptances in each chain
    parallel for n in 1..N {
      /* initialize n-th chain */
      X:Real[_,_];
      let l <- 0.0;
      if lazy {
        X <- π.simulateLazy();
        l <- π.logpdfLazy(X);
      } else {
        X <- π.simulate();
        l <- π.logpdf(X);
      }

      /* step n-th chain S times */
      for s in 1..S {
        let x' <~ MultivariateGaussian(vec(X), Σ);
        let X' <- mat(x', C)!;
        let l' <- 0.0;
        if lazy {
          l' <- π.logpdfLazy(X');
        } else {
          l' <- π.logpdf(X');
        }
        let u <~ Uniform(0.0, 1.0);
        if (log(u) <= l' - l)! {
          /* accept */
          X <- X';
          l <- l';
          a[n] <- a[n] + 1;
        }
      }

      /* final state */
      X2[n,1..R*C] <- vec(X);
    }
    let raccepts <- sum(a)!/Real(N*S);  // overall acceptance rate
    if last {
      /* that was the last iteration, so now done */
      done <- true;
    } else if 100 < N && raccepts < 0.2 {
      /* acceptance rate too low, adapt */
      Σ <- 0.5*Σ;
    } else if 100 < N && raccepts > 0.25 {
      /* acceptance rate too high, adapt */
      Σ <- 1.5*Σ;
    } else {
      /* acceptance rate fine, repeat one last time to draw final sample */
      last <- true;
    }
  } while !done;
  
  /* test distance between the iid and Metropolis samples */
  if !pass(X1, X2) {
    exit(1);
  }

  /* smoke test for constant */
  π.fix();
}
