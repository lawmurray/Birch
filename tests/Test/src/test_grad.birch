/*
 * Test the gradients of a model.
 *
 * @param m Model. 
 * @param N Number of samples.
 * @param backward Test joint distributions in backward mode? (Otherwise
 * forward mode.)
 */
function test_grad(m:TestModel, N:Integer, backward:Boolean) {
  let failed <- vector(0.0, N);  // failure rate in each test

  let Δ <- 1.0e3;      // maximum width for finite difference estimate
  let ntrials <- 50;   // number of trials
  // ^ the interval width adapts by starting at h, dividing by 2 until either
  //   success or ntrials trials, after which the test is considered failed

  let γ <- 1.0e-3;  // acceptable failure rate
  let ε <- 1.0e-3;  // relative error threshold for fail
  // ^ the pass criterion is that 100*(1 - γ) percent of gradients computed
  //   are within 100.0*ε percent of the finite difference approximation; e.g.
  //   with γ = 1.0e-3 and ε = 1.0e-2, that "99.9% of gradients computed are
  //   within 1% of the finite difference approximation"

  parallel for n in 1..N {
    let h <- Handler(backward, true, true);
    let m' <- copy(m);
    with h {
      m'.initialize();
      m'.simulate();
      if backward {
        m'.backward();
      } else {
        m'.forward();
      }
    }

    /* compute gradient */
    let π <- h.hoist()!;
    π.trace();
    
    let p <- π.eval();
    let x <- π.args();
    let g <- π.grad();

    /* compare with finite difference estimates */
    for i in 1..rows(x) {
      let Δ' <- Δ;  // initial interval size for finite difference
      let min_fd <- inf;  // closest finite difference estimate...
      let min_δ <- inf;   // ...and associated distance
      let t <- 1;
      while t <= ntrials && Δ' > 0.0 {  // may == 0.0 in single precision
        let y <- x;
        let z <- x;
        y[i] <- y[i] - 0.5*Δ';
        z[i] <- z[i] + 0.5*Δ';
        let q <- π.move(y)!;
        let r <- π.move(z)!;
        let fd <- (r - q)/Δ';
        let δ <- abs(g[i] - fd);
        let pass <- δ <= ε*min(abs(g[i]), abs(fd));
        if δ < min_δ {
          min_δ <- δ;
          min_fd <- fd;
        }
        if pass {
          /* success */
          t <- ntrials + 1;
        } else if t < ntrials {
          /* shrink interval for finite difference and try again */
          t <- t + 1;
          Δ' <- 0.5*Δ';
        } else {
          /* fail */
          t <- ntrials + 1;
          warn("on component " + i + ", " + g[i] + " vs " + min_fd);
          failed[n] <- failed[n] + 1.0/rows(x);
        }
      }
    }

    /* smoke test for constant */
    π.constant();
  }

  /* check that failure rate within bounds */
  let nfailed <- sum(failed)!;
  let rfail <- nfailed/N;
  if N > 10 && !(rfail <= γ) {  // if N <= 10, smoke test only
    error("***failed*** in aggregate, " + nfailed + " of " + N + " failed");
  }
}
