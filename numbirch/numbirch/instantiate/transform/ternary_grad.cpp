/**
 * @file
 */
#ifdef BACKEND_CUDA
#include "numbirch/cuda/transform.inl"
#endif
#ifdef BACKEND_EIGEN
#include "numbirch/eigen/transform.inl"
#endif
#include "numbirch/common/transform.inl"

#define TERNARY_GRAD(f) \
    TERNARY_GRAD_FIRST(f, real) \
    TERNARY_GRAD_FIRST(f, int) \
    TERNARY_GRAD_FIRST(f, bool)
#define TERNARY_GRAD_FIRST(f, T) \
    TERNARY_GRAD_SECOND(f, T, real) \
    TERNARY_GRAD_SECOND(f, T, int) \
    TERNARY_GRAD_SECOND(f, T, bool)
#define TERNARY_GRAD_SECOND(f, T, U) \
    TERNARY_GRAD_THIRD(f, T, U, real) \
    TERNARY_GRAD_THIRD(f, T, U, int) \
    TERNARY_GRAD_THIRD(f, T, U, bool)
#define TERNARY_GRAD_THIRD(f, T, U, V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), NUMBIRCH_ARRAY(U, 2), NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), NUMBIRCH_ARRAY(U, 1), NUMBIRCH_ARRAY(V, 1)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 0), V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), U, NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), U, V) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 0), V) \
    TERNARY_GRAD_SIG(f, T, U, NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, T, U, V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), NUMBIRCH_ARRAY(U, 2), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), NUMBIRCH_ARRAY(U, 2), V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), U, NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), NUMBIRCH_ARRAY(U, 0), V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), U, NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 2), U, V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 2), NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 2), NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 2), V) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 2), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 2), V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), U, NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, T, U, NUMBIRCH_ARRAY(V, 2)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), NUMBIRCH_ARRAY(U, 1), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), NUMBIRCH_ARRAY(U, 1), V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 1)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), U, NUMBIRCH_ARRAY(V, 1)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), NUMBIRCH_ARRAY(U, 0), V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), U, NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 1), U, V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 1), NUMBIRCH_ARRAY(V, 1)) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 1), NUMBIRCH_ARRAY(V, 1)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 1), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 1), V) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 1), NUMBIRCH_ARRAY(V, 0)) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 1), V) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 1)) \
    TERNARY_GRAD_SIG(f, NUMBIRCH_ARRAY(T, 0), U, NUMBIRCH_ARRAY(V, 1)) \
    TERNARY_GRAD_SIG(f, T, NUMBIRCH_ARRAY(U, 0), NUMBIRCH_ARRAY(V, 1)) \
    TERNARY_GRAD_SIG(f, T, U, NUMBIRCH_ARRAY(V, 1))
#define TERNARY_GRAD_SIG(f, T, U, V) \
    template real_t<T> f##_grad1<T,U,V>(const real_t<T,U,V>&, const real_t<T,U,V>&, const T&, const U&, const V&); \
    template real_t<U> f##_grad2<T,U,V>(const real_t<T,U,V>&, const real_t<T,U,V>&, const T&, const U&, const V&); \
    template real_t<V> f##_grad3<T,U,V>(const real_t<T,U,V>&, const real_t<T,U,V>&, const T&, const U&, const V&);

namespace numbirch {
TERNARY_GRAD(lz_conway_maxwell_poisson)
}
