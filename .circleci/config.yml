version: 2.1

orbs:
  codecov: codecov/codecov@3.2.4

executors:
  default:
    machine:
      image: ubuntu-2204:current
    resource_class: large
    environment:
      CODENAME: default
    working_directory: /home/circleci/default

  bench:
    machine:
      image: ubuntu-2204:current
    resource_class: large
    environment:
      CODENAME: bench
      OMP_NUM_THREADS: 4
      CXXFLAGS: -O3 -flto -march=native -Wall
      MAKEFLAGS: -j8
      CONFIGURE_FLAGS: --disable-assert
      BIRCH_FLAGS: --unit=dir --arch=native --jobs=8 --enable-verbose --disable-assert --disable-debug --disable-static --disable-single
      MONGODB_DATABASE_TOOLS_URL: https://fastdl.mongodb.org/tools/db/mongodb-database-tools-ubuntu2204-x86_64-100.7.0.deb
    working_directory: /home/circleci/bench

  cover:
    machine:
      image: ubuntu-2204:current
    resource_class: large
    environment:
      CODENAME: cover
      OMP_NUM_THREADS: 4
      CXXFLAGS: -O1 -Wall -g -fno-inline --coverage
      MAKEFLAGS: -j8
      BIRCH_FLAGS: --unit=dir --jobs=8 --enable-verbose --disable-optimize --disable-static --disable-single --enable-coverage
    working_directory: /home/circleci/cover

  mac:
    macos:
      xcode: 14.2.0
    resource_class: medium
    environment:
      CODENAME: mac
      OMP_NUM_THREADS: 4
      CXXFLAGS: -O1 -flto -Wall
      MAKEFLAGS: -j8
      BIRCH_FLAGS: --unit=dir --jobs=4 --enable-verbose --disable-optimize --disable-static --disable-single
    working_directory: /Users/distiller/mac

  alpine:
    docker:
      - image: alpine:latest
    resource_class: large
    shell: /bin/bash -eo pipefail   # Alpine defaults to ash, CircleCi requires bash for $BASH_ENV
    environment:
      CODENAME: alpine
      OMP_NUM_THREADS: 4
      CXXFLAGS: -O1 -Wall
      MAKEFLAGS: -j8
      BIRCH_FLAGS: --unit=dir --jobs=2 --enable-verbose --disable-optimize --disable-static --disable-single
    working_directory: /root/alpine

  buster:
    docker:
      - image: debian:buster
    resource_class: large
    environment:
      CODENAME: buster
    working_directory: /root/buster

  bullseye:
    docker:
      - image: debian:bullseye
    resource_class: large
    environment:
      CODENAME: bullseye
    working_directory: /root/bullseye

  focal:
    docker:
      - image: ubuntu:focal
    resource_class: large
    environment:
      CODENAME: focal
    working_directory: /root/focal

  jammy:
    docker:
      - image: ubuntu:jammy
    resource_class: large
    environment:
      CODENAME: jammy
    working_directory: /root/jammy

  kinetic:
    docker:
      - image: ubuntu:kinetic
    resource_class: large
    environment:
      CODENAME: kinetic
    working_directory: /root/kinetic

  opensuse-leap-15-4:
    docker:
      - image: registry.opensuse.org/opensuse/leap:15.4
    resource_class: large
    environment:
      CODENAME: opensuse/leap/15.4
    working_directory: /root/opensuse-leap-15-4

  opensuse-tumbleweed:
    docker:
      - image: registry.opensuse.org/opensuse/tumbleweed
    resource_class: large
    environment:
      CODENAME: opensuse/tumbleweed
    working_directory: /root/opensuse-tumbleweed

  fedora-35:
    docker:
      - image: registry.fedoraproject.org/fedora:35
    resource_class: large
    environment:
      CODENAME: fedora/35
    working_directory: /root/fedora-35

  fedora-36:
    docker:
      - image: registry.fedoraproject.org/fedora:36
    resource_class: large
    environment:
      CODENAME: fedora/36
    working_directory: /root/fedora-36

  fedora-37:
    docker:
      - image: registry.fedoraproject.org/fedora:37
    resource_class: large
    environment:
      CODENAME: fedora/37
    working_directory: /root/fedora-37

  mageia-8:
    docker:
      - image: mageia:8
    resource_class: large
    environment:
      CODENAME: mageia/8
    working_directory: /root/mageia-8

commands:

  environment:
    steps:
      - run:
          name: Install dependencies
          shell: /bin/sh  # use default shell, preferred may not have been installed yet (e.g. on Alpine, ash to bash)
          command: |
              if [ "$CODENAME" = "mac" ]; then
                HOMEBREW_NO_AUTO_UPDATE=1 brew remove --force --ignore-dependencies node node@14 tcl-tk  # avoids these being unnecessarily updated as dependents later
                HOMEBREW_NO_AUTO_UPDATE=1 brew install \
                    gnupg \
                    coreutils \
                    make \
                    autoconf \
                    automake \
                    libtool \
                    flex \
                    bison \
                    libomp \
                    jemalloc \
                    eigen \
                    libyaml \
                    boost \
                    sqlite \
                    cairo
                echo "export PATH=/usr/local/opt/gnu-time/libexec/gnubin:/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:\$PATH" >> $BASH_ENV
              elif [ "$CODENAME" = "default" ] || [ "$CODENAME" = "bench" ] || [ "$CODENAME" = "cover" ]; then
                sudo apt update
                DEBIAN_FRONTEND=noninteractive sudo apt install -y --no-install-recommends \
                  git \
                  ssh \
                  gpg \
                  gpg-agent \
                  tar \
                  gzip \
                  xz-utils \
                  curl \
                  time \
                  ca-certificates \
                  binutils \
                  elfutils \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  flex \
                  bison \
                  g++ \
                  gdb \
                  lcov \
                  libjemalloc-dev \
                  libeigen3-dev \
                  libyaml-dev \
                  libboost-math-dev \
                  libsqlite3-dev \
                  libcairo2-dev \
                  doxygen \
                  build-essential \
                  apt-utils \
                  dpkg \
                  dpkg-dev \
                  devscripts \
                  debhelper \
                  fakeroot \
                  lintian \
                  reprepro \
                  python3 \
                  python3-pip
                if [ -n "$MONGODB_DATABASE_TOOLS_URL" ]; then
                  curl -o mongodb-database-tools.deb $MONGODB_DATABASE_TOOLS_URL
                  DEBIAN_FRONTEND=noninteractive sudo apt install -y ./mongodb-database-tools.deb
                  rm -f mongodb-database-tools.deb
                fi
                sudo rm -rf /var/lib/apt/lists/*
              elif [ "$CODENAME" = "opensuse" ]; then
                zypper --non-interactive update
                zypper --non-interactive install --no-recommends \
                  git \
                  openssh \
                  gpg \
                  distribution-gpg-keys \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  zstd \
                  curl \
                  ca-certificates \
                  make \
                  flex \
                  bison \
                  gcc-c++ \
                  autoconf \
                  automake \
                  libtool \
                  libyaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite3-devel \
                  rpmlint \
                  rpm-build \
                  rpm-config-SUSE \
                  createrepo_c
                zypper clean --all
              elif [ "$CODENAME" = "fedora" ]; then
                yum -y update
                yum -y install \
                  git \
                  openssh \
                  gpg \
                  distribution-gpg-keys \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  zstd \
                  curl \
                  ca-certificates \
                  make \
                  flex \
                  bison \
                  gcc-c++ \
                  autoconf \
                  automake \
                  libtool \
                  libyaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite-devel \
                  rpm \
                  rpmlint \
                  rpm-build \
                  rpm-sign \
                  redhat-rpm-config \
                  createrepo_c
                yum clean all
              elif [ "$CODENAME" = "mageia" ]; then
                urpmi --auto-update
                urpmi --force --no-recommends \
                  git \
                  openssh \
                  gnupg2 \
                  distribution-gpg-keys \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  zstd \
                  curl \
                  ca-certificates \
                  make \
                  flex \
                  bison \
                  gcc-c++ \
                  autoconf \
                  automake \
                  libtool \
                  yaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite3-devel \
                  rpm \
                  rpmlint \
                  rpm-build \
                  rpm-sign \
                  rpm-mageia-setup \
                  rpm-mageia-setup-build \
                  createrepo_c
              elif [ "$CODENAME" = "alpine" ]; then
                apk update
                apk add --no-cache \
                  bash \
                  git \
                  openssh \
                  gpg \
                  gpg-agent \
                  gpgv \
                  coreutils \
                  tar \
                  gzip \
                  curl \
                  ca-certificates \
                  binutils \
                  elfutils \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  flex \
                  bison \
                  g++ \
                  gdb \
                  eigen-dev \
                  yaml-dev \
                  boost-dev \
                  sqlite-dev \
                  cairo-dev
              elif [ "$CODENAME" = "arch" ]; then
                pacman -Syu --noconfirm --needed \
                  git \
                  openssh \
                  tar \
                  gzip \
                  curl \
                  ca-certificates \
                  binutils \
                  elfutils \
                  make \
                  flex \
                  bison \
                  gcc \
                  gdb \
                  autoconf \
                  automake \
                  libtool \
                  jemalloc \
                  libyaml \
                  boost \
                  cairo \
                  sqlite \
                  eigen
                pacman -Sc --noconfirm
              else  # Debian variant
                apt update
                DEBIAN_FRONTEND=noninteractive apt install -y --no-install-recommends \
                  git \
                  ssh \
                  gpg \
                  gpg-agent \
                  tar \
                  gzip \
                  curl \
                  ca-certificates \
                  binutils \
                  elfutils \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  flex \
                  bison \
                  g++ \
                  gdb \
                  libjemalloc-dev \
                  libeigen3-dev \
                  libyaml-dev \
                  libboost-math-dev \
                  libsqlite3-dev \
                  libcairo2-dev \
                  build-essential \
                  apt-utils \
                  dpkg \
                  dpkg-dev \
                  devscripts \
                  debhelper \
                  fakeroot \
                  lintian \
                  reprepro
                rm -rf /var/lib/apt/lists/*
              fi
      - run:
          name: Environment variables
          command: |
              if [[ "$CIRCLE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "export VERSION=\`echo \$CIRCLE_TAG | sed -E 's/^v//'\`" >> $BASH_ENV
              else
                echo "export VERSION=0.0.0" >> $BASH_ENV
              fi
              echo "export VERSION_SAFE=\`echo \$VERSION | sed -E 's/\./_/g'\`" >> $BASH_ENV
              echo "export PATH=\$CIRCLE_WORKING_DIRECTORY/bin:/usr/local/cuda/bin:\$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$CIRCLE_WORKING_DIRECTORY/include:/usr/local/cuda/include:\$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$CIRCLE_WORKING_DIRECTORY/lib64:\$CIRCLE_WORKING_DIRECTORY/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export LIBRARY_PATH=\$CIRCLE_WORKING_DIRECTORY/lib64:\$CIRCLE_WORKING_DIRECTORY/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LIBRARY_PATH" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV
      - run:
          name: GPG keys
          command: |
              echo $GPG_PUBLIC_KEY | base32 -d > public.key
              echo $GPG_SIGNING_KEY | base32 -d > signing.key
              echo %_gpg_name $GPG_NAME > ~/.rpmmacros
              unset GPG_PUBLIC_KEY GPG_SIGNING_KEY GPG_NAME
              gpg --import public.key signing.key
              rm public.key signing.key
      - run:
          name: Git identity
          command: |
              git config --global user.name "Birch Machine"
              git config --global user.email "birch-machine@indii.org"

  install_cuda_prereq:
    steps:
      - run:
          name: Install prerequisites for NumBirch CUDA backend
          command: cd numbirch && ./install_cuda_prereq

  end_if_pull_request:
    steps:
      - run: 
         name: End early if pull request
         command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              circleci step halt
            fi
  codecov:
    steps:
      - run:
          name: Produce coverage report
          command: lcov --directory . --no-external --capture -o cov.info || echo
      - codecov/upload:
          file: cov.info
          when: on_success

  version:
    parameters:
      dir:
        description: Directory in which to update version number
        type: string
    steps:
      - run:
          name: Update version number
          command: |
              cd << parameters.dir >>
              for file in birch.yml configure.ac Makefile.am Makefile *.spec *.rb PKGBUILD; do
                if [[ -e $file ]]; then
                  cat $file | sed -E "s/0\.0\.0/$VERSION/g" | sed -E "s/0_0_0/$VERSION_SAFE/g" > $file.sponge
                  mv $file.sponge $file
                fi
              done
              for file in debian/changelog debian/control debian/*.install debian/*.links; do
                if [[ -e $file ]]; then
                  cat $file | sed -E "s|0\.0\.0-1|$VERSION-1~$CODENAME|g" | sed -E "s/0\.0\.0/$VERSION/g" | sed -E "s/0_0_0/$VERSION_SAFE/g" > $file.sponge
                  mv $file.sponge $file
                  NEWNAME=`echo $file | sed -E "s/0\.0\.0/$VERSION/g"`
                  if [[ "$NEWNAME" != "$file" ]]; then
                    mv $file $NEWNAME
                  fi
                fi
              done

  source_cpp:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --disable-checks --prefix="$CIRCLE_WORKING_DIRECTORY" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make dist

  source_birch:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Archive source for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch bootstrap
              ./configure --disable-checks --prefix="$CIRCLE_WORKING_DIRECTORY" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make dist

  build_cpp:
    description: Build a C++ package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --prefix="$CIRCLE_WORKING_DIRECTORY" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make install
      - run:
          name: Smoke test << parameters.dir >>
          command: |
            cd << parameters.dir >>
            if [[ -e smoke.sh ]]; then
              ./smoke.sh
            fi

  build_birch:
    description: Build a Birch package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch install --prefix="$CIRCLE_WORKING_DIRECTORY" $BIRCH_FLAGS || (cat config.log && exit 1)
          no_output_timeout: 30m
      - run:
          name: Smoke test << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch docs
              if [[ -e smoke.sh ]]; then
                ./smoke.sh
              fi
      - run:
          name: Unit test << parameters.dir >>
          command: |
              cd << parameters.dir >>
              if [[ -e test.sh && "$CODENAME" =~ "bench" ]]; then
                env time --format="$FORMAT" --output=time.txt ./test.sh  # env time to use GNU time, not Bash built-in time
                if [[ -e output/test.json && -n "$MONGODB_HOST" && -n "$MONGODB_USERNAME" && -n "$MONGODB_PASSWORD" ]]; then
                  # upload results to MongoDB Atlas
                  VERSION_LONG=`git describe --long || echo`
                  echo '{ "output": ' > mongodb.json
                  cat output/test.json >> mongodb.json
                  if [[ -e time.txt ]]; then
                    cat time.txt >> mongodb.json
                  fi
                  echo ", \"branch\": \"$CIRCLE_BRANCH\"" >> mongodb.json
                  echo ", \"version\": \"$VERSION_LONG\"" >> mongodb.json
                  echo '}' >> mongodb.json
                  COLLECTION=`echo << parameters.dir >> | sed -E 's/^[A-Z0-9a-z]+\///'`
                  mongoimport --uri mongodb+srv://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_HOST/test --collection $COLLECTION --file mongodb.json
                fi
              fi

  docs_birch:
    description: Document Birch package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - version:
          dir: << parameters.dir >>
      - run:
          name: Document << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch docs
              mkdir -p $HOME/docs/docs/<< parameters.dir >>
              cp -r docs/* $HOME/docs/docs/<< parameters.dir >>/.

  package_deb:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build Debian package << parameters.dir >>
          command: |
              if [[ '<< parameters.dir >>' = 'libraries/Standard' ]]; then
                export JOBS=2  # high memory use in single thread
              elif [[ '<< parameters.dir >>' = 'numbirch' ]]; then
                export JOBS=6
              else
                export JOBS=8
              fi
              cd << parameters.dir >>
              TARNAME=`ls *-$VERSION.tar.gz | grep -Eo '^[a-z\-]+[a-z]'`
              mv $TARNAME-$VERSION.tar.gz ${TARNAME}_$VERSION.orig.tar.gz
              tar xzf ${TARNAME}_$VERSION.orig.tar.gz
              cp -r debian $TARNAME-$VERSION/.
              cd $TARNAME-$VERSION
              debuild -eDEB_BUILD_OPTIONS=noddebs -j$JOBS
      - run:
          name: Install Debian package << parameters.dir >>
          command: |
              cd << parameters.dir >>
              apt-get install -y ./*.deb  # must specify ./ to find packages
      - run:
          name: Deploy Debian package << parameters.dir >>
          command: |
              cd << parameters.dir >>
              reprepro -b $HOME/deb/$CODENAME --ignore=wrongdistribution include $CODENAME *.changes

  package_rpm:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build RPM package << parameters.dir >>
          command: |
              if [[ '<< parameters.dir >>' = 'libraries/Standard' ]]; then
                export JOBS=2  # high memory use in single thread
              elif [[ '<< parameters.dir >>' = 'numbirch' ]]; then
                export JOBS=6
              else
                export JOBS=8
              fi
              cd << parameters.dir >>
              TARNAME=`ls *-$VERSION.tar.gz | grep -Eo '^[a-z\-]+[a-z]'`
              mkdir -p $HOME/rpmbuild/SOURCES
              mv $TARNAME-$VERSION.tar.gz $HOME/rpmbuild/SOURCES/.
              rpmbuild --define='_topdir $HOME/rpmbuild' --define="_smp_mflags -j$JOBS" --define="debug_package %{nil}" -ba $TARNAME.spec
      - run:
          name: Sign RPM package << parameters.dir >>
          command: |
              rpmsign --addsign $HOME/rpmbuild/RPMS/x86_64/*.rpm
      - run:
          name: Install RPM package << parameters.dir >>
          command: |
              rpm --install --nodeps $HOME/rpmbuild/RPMS/x86_64/*.rpm  # establish dependencies as we go
      - run:
          name: Deploy RPM package << parameters.dir >>
          command: |
              mv $HOME/rpmbuild/RPMS/x86_64/*.rpm $HOME/rpm/$CODENAME/x86_64/.
              mv $HOME/rpmbuild/SRPMS/*.rpm $HOME/rpm/$CODENAME/src/.

  package_brew:
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Homebrew package for << parameters.dir >>
          command: |
              cd << parameters.dir >>
              TARNAME=`ls *-$VERSION.tar.gz | grep -Eo '^[a-z\-]+[a-z]'`
              SHA256=($(sha256sum $TARNAME-$VERSION.tar.gz))
              cat $TARNAME.rb | sed -E "s/sha256 \"[0-9a-f]+\"/sha256 \"$SHA256\"/g" > $TARNAME.rb.sponge
              mv $TARNAME.rb.sponge $TARNAME.rb
              mv $TARNAME-$VERSION.tar.gz $TARNAME.rb $CIRCLE_WORKING_DIRECTORY/brew/.

  deploy_repo:
    parameters:
      subdomain:
        description: Subdomain of repository, e.g. download.birch.sh
        type: string
    steps:
      - run:
          name: Deploy << parameters.subdomain >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                mkdir << parameters.subdomain >>
                cd << parameters.subdomain >>
                mkdir rpm && cp -r $HOME/rpm/* rpm/.
                mkdir deb && cp -r $HOME/deb/*/* deb/.  # merge repos

                # finalize apt repo (add key)
                gpg --export --armor > deb/Release.key

                # finalize rpm repos (add .repo file to each)
                for CODENAME in `ls rpm/*/*/repodata/repomd.xml rpm/*/*/*/repodata/repomd.xml | sed -E 's|^rpm/||' | sed -E 's|/repodata/repomd.xml$||'`; do
                  printf "[birch]\nname=Birch\ntype=rpm-md\nbaseurl=https://<< parameters.subdomain >>/rpm/$CODENAME\ngpgcheck=1\ngpgkey=https://<< parameters.subdomain >>/rpm/$CODENAME/repodata/repomd.xml.key\nenabled=1\nautorefresh=1\n" > rpm/$CODENAME/birch.repo
                done

                git init -b gh-pages
                git add .
                git commit -m "Overwrite."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.subdomain >>.git
                git push origin gh-pages -f
              fi

  deploy_brew:
    parameters:
      repo:
        description: GitHub repo of repository, e.g. homebrew-birch
        type: string
    steps:
      - run:
          name: Deploy << parameters.repo >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" && -n "$VERSION" ]]; then
                mkdir $CIRCLE_WORKING_DIRECTORY/<< parameters.repo >>
                cd $CIRCLE_WORKING_DIRECTORY/brew || cd $HOME/brew  # may be run by mac or linux executor
                cp *.rb *.tar.gz $CIRCLE_WORKING_DIRECTORY/<< parameters.repo >>/.
                cd $CIRCLE_WORKING_DIRECTORY/<< parameters.repo >>
                for file in *.rb; do
                  cat $file | sed -E "s/homebrew-[A-Z0-9a-z]+/<< parameters.repo >>/g" > $file.sponge
                  mv $file.sponge $file
                done
                git init
                git add .
                git commit -m "Overwrite."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.repo >>.git
                git push origin master -f
              fi

  deploy_docs:
    parameters:
      subdomain:
        description: Subdomain of repository, e.g. docs.birch.sh
        type: string
    steps:
      - run:
          name: Deploy << parameters.subdomain >>
          command: |
              if [[ -n "$GITHUB_USERNAME" && -n "$GITHUB_PASSWORD" ]]; then
                pip3 install mkdocs mkdocs-material
                cd $HOME/docs
                mkdocs build
                cd site
                git init -b gh-pages
                git add .
                git commit -m "Overwrite."
                git remote add origin https://$GITHUB_USERNAME:$GITHUB_PASSWORD@github.com/lawmurray/<< parameters.subdomain >>.git
                git push origin gh-pages -f
              fi

jobs:
  build:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - checkout
      - build_cpp:
          dir: numbirch
      - build_cpp:
          dir: membirch
      - build_cpp:
          dir: birch
      - build_birch:
          dir: libraries/Standard
      - build_birch:
          dir: libraries/Cairo
      - build_birch:
          dir: libraries/SQLite
      - persist_to_workspace:
          root: ..
          paths:
            - << parameters.os >>
      - codecov
      - end_if_pull_request

  test:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - attach_workspace:
          at: ..
      - build_birch:
          dir: tests/Test
      - codecov
      - end_if_pull_request

  example:
    parameters: 
      os:
        type: string
      dir:
        description: Directory containing the package
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - attach_workspace:
          at: ..
      - build_birch:
          dir: << parameters.dir >>
      - codecov
      - end_if_pull_request

  deb:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - end_if_pull_request
      - environment
      - checkout
      - install_cuda_prereq

      - build_cpp:
          dir: birch  # needed for source_birch

      - source_cpp:
          dir: numbirch
      - source_cpp:
          dir: membirch
      - source_cpp:
          dir: birch
      - source_birch:
          dir: libraries/Standard
      - source_birch:
          dir: libraries/Cairo
      - source_birch:
          dir: libraries/SQLite

      - run:
          name: Initialize repository
          command: |
              mkdir -p $HOME/deb/$CODENAME/conf
              printf "Codename: $CODENAME\nSuite: stable\nComponents: main\nArchitectures: source amd64\nSignWith: default\n" > $HOME/deb/$CODENAME/conf/distributions
      - package_deb:
          dir: numbirch
      - package_deb:
          dir: membirch
      - package_deb:
          dir: birch
      - package_deb:
          dir: libraries/Standard
      - package_deb:
          dir: libraries/Cairo
      - package_deb:
          dir: libraries/SQLite
      - run:
          name: Remove unnecessary files
          command: |
              rm -rf $HOME/deb/$CODENAME/{conf,db}
      - persist_to_workspace:
          root: ..
          paths:
            - deb

  rpm:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - end_if_pull_request
      - environment
      - checkout
      - install_cuda_prereq

      - build_cpp:
          dir: birch  # needed for source_birch

      - source_cpp:
          dir: numbirch
      - source_cpp:
          dir: membirch
      - source_cpp:
          dir: birch
      - source_birch:
          dir: libraries/Standard
      - source_birch:
          dir: libraries/Cairo
      - source_birch:
          dir: libraries/SQLite

      - run:
          name: Initialize repository
          command: |
              mkdir -p $HOME/rpm/$CODENAME/{x86_64,src}
              gpg --export --armor > public.key
              rpm --import public.key
              rm public.key
      - package_rpm:
          dir: numbirch
      - package_rpm:
          dir: membirch
      - package_rpm:
          dir: birch
      - package_rpm:
          dir: libraries/Standard
      - package_rpm:
          dir: libraries/Cairo
      - package_rpm:
          dir: libraries/SQLite
      - run:
          name: Finalize repository
          command: |
              cd $HOME/rpm/$CODENAME
              createrepo .
              gpg --detach-sign --armor repodata/repomd.xml
              gpg --export --armor > repodata/repomd.xml.key
      - persist_to_workspace:
          root: ..
          paths:
            - rpm

  brew:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - end_if_pull_request
      - environment
      - checkout

      - build_cpp:
          dir: birch  # needed for source_birch

      - source_cpp:
          dir: numbirch
      - source_cpp:
          dir: membirch
      - source_cpp:
          dir: birch
      - source_birch:
          dir: libraries/Standard
      - source_birch:
          dir: libraries/Cairo
      - source_birch:
          dir: libraries/SQLite

      - run:
          name: Initialize repository
          command: |
              mkdir -p brew
      - package_brew:
          dir: numbirch
      - package_brew:
          dir: membirch
      - package_brew:
          dir: birch
      - package_brew:
          dir: libraries/Standard
      - package_brew:
          dir: libraries/Cairo
      - package_brew:
          dir: libraries/SQLite

      - deploy_brew:
          repo: homebrew-stage

      - persist_to_workspace:
          root: .
          paths:
            - brew

  stage_repo:
    executor: default
    steps:
      - end_if_pull_request
      - environment
      - attach_workspace:
          at: ..
      - deploy_repo:
          subdomain: stage.birch.sh
      - run:
          name: Wait a little while for stage.birch.sh to be published
          command: sleep 120

  test_repo:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      # want clean slate to test installation, so do not run environment here
      - end_if_pull_request
      - run:
          name: Test install
          command: |
              if [[ "$CODENAME" =~ "opensuse" ]]; then
                zypper --gpg-auto-import-keys addrepo https://stage.birch.sh/rpm/$CODENAME/birch.repo
                zypper --gpg-auto-import-keys update --no-confirm
                zypper install --no-confirm --recommends birch
              elif [[ "$CODENAME" =~ "fedora" || "$CODENAME" =~ "mageia" ]]; then
                dnf install --assumeyes dnf-plugins-core
                dnf config-manager --add-repo https://stage.birch.sh/rpm/$CODENAME/birch.repo
                dnf update --assumeyes
                dnf install --assumeyes birch
              elif [[ "$CODENAME" =~ "mac" ]]; then
                brew update
                brew upgrade
                brew install lawmurray/stage/birch
              else
                apt update --assume-yes
                apt install --assume-yes curl gpg
                echo "deb https://stage.birch.sh/deb $CODENAME main" | tee /etc/apt/sources.list.d/birch.list
                curl -fsSL https://stage.birch.sh/deb/Release.key | gpg --dearmor | tee /etc/apt/trusted.gpg.d/birch.gpg > /dev/null
                apt update --assume-yes
                apt install --assume-yes --install-recommends birch
              fi
      - run:
          name: Test run
          command: |
            mkdir hello
            cd hello
            birch init
            birch build
            birch hello

  docs:
    executor: default
    steps:
      - end_if_pull_request
      - environment
      - checkout

      - build_cpp:
          dir: birch  # needed for birch docs

      - run:
          name: Initialize docs
          command: |
              mkdir -p $HOME/docs/docs
      - docs_birch:
          dir: libraries/Standard
      - docs_birch:
          dir: libraries/Cairo
      - docs_birch:
          dir: libraries/SQLite
      - run:
          name: Finalize docs
          command: |
              cp mkdocs.yml $HOME/docs/.
              cp README.md $HOME/docs/docs/index.md
      - persist_to_workspace:
          root: ..
          paths:
            - docs

  deploy:
    executor: default
    steps:
      - end_if_pull_request
      - environment
      - attach_workspace:
          at: ..
      - deploy_repo:
          subdomain: download.birch.sh
      - deploy_brew:
          repo: homebrew-birch
      - deploy_docs:
          subdomain: docs.birch.sh

workflows:
  all:
    jobs:
      - build:
          matrix:
            parameters:
              os:
                - bench
                - cover
                - alpine
                - mac

      - test:
          matrix:
            parameters:
              os:
                - bench
                - cover
                - alpine
                - mac
          requires:
            - build-<< matrix.os >>

      - example:
          matrix:
            parameters:
              os:
                - bench
                - cover
                - alpine
                - mac
              dir:
                - examples/Ecology
                - examples/LinearRegression
                - examples/MixedGaussian
                - examples/MultiObjectTracking
                - examples/SIR
                - examples/VectorBorneDisease
          requires:
            - test-<< matrix.os >>

      # Linux repositories host binary packages, which are built first (slow)
      # then tested (fast)
      - deb:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              os:
                - buster
                - bullseye
                - focal
                - jammy
                - kinetic

      - rpm:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              os:
                - opensuse-leap-15-4
                - opensuse-tumbleweed
                - fedora-35
                - fedora-36
                - fedora-37
                - mageia-8

      - stage_repo:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - deb-buster
            - deb-bullseye
            - deb-focal
            - deb-jammy
            - deb-kinetic
            - rpm-opensuse-leap-15-4
            - rpm-opensuse-tumbleweed
            - rpm-fedora-35
            - rpm-fedora-36
            - rpm-fedora-37
            - rpm-mageia-8

      - test_repo:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              os:
                - buster
                - bullseye
                - focal
                - jammy
                - kinetic
                - opensuse-leap-15-4
                - opensuse-tumbleweed
                - fedora-35
                - fedora-36
                - fedora-37
                - mageia-8
          requires:
            - stage_repo

      # Mac Homebrew repositories host source packages, which are staged first
      # (fast) then tested (slow, build required)
      - brew:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              os:
                - mac
      - test_repo:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          matrix:
            parameters:
              os:
                - mac
          requires:
            - brew-mac

      - docs:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/

      - deploy:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
          requires:
            - test_repo-buster
            - test_repo-bullseye
            - test_repo-focal
            - test_repo-jammy
            - test_repo-kinetic
            - test_repo-opensuse-leap-15-4
            - test_repo-opensuse-tumbleweed
            - test_repo-fedora-35
            - test_repo-fedora-36
            - test_repo-fedora-37
            - test_repo-mageia-8
            - test_repo-mac
            - docs
