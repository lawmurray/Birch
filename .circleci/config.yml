version: 2.1

orbs:
  codecov: codecov/codecov@3.2.4

executors:
  default:
    docker:
      - image: registry.opensuse.org/opensuse/tumbleweed
    resource_class: large
    environment:
      CODENAME: default
    working_directory: /root/default

  bench:
    docker:
      - image: registry.opensuse.org/opensuse/tumbleweed
    resource_class: large
    environment:
      CODENAME: bench
      OMP_NUM_THREADS: 4
      CXXFLAGS: -O3 -march=native -flto -Wall
      MAKEFLAGS: -j8
      CONFIGURE_FLAGS: --disable-assert
      BIRCH_FLAGS: --unit=dir --arch=native --jobs=1 --enable-verbose --disable-assert --disable-debug --disable-static --disable-single
    working_directory: /root/bench

  cover:
    docker:
      - image: registry.opensuse.org/opensuse/tumbleweed
    resource_class: large
    environment:
      CODENAME: cover
      OMP_NUM_THREADS: 4
      CXXFLAGS: -O0 -g -Wall -fno-inline --coverage
      MAKEFLAGS: -j8
      BIRCH_FLAGS: --unit=dir --jobs=1 --enable-verbose --enable-coverage --disable-optimize --disable-static --disable-single
    working_directory: /root/cover

  mac:
    macos:
      xcode: 14.2.0
    environment:
      CODENAME: mac
      OMP_NUM_THREADS: 4
      CXXFLAGS: -O0 -Wall
      MAKEFLAGS: -j8
      BIRCH_FLAGS: --unit=dir --jobs=1 --enable-verbose --disable-optimize --disable-static --disable-single
    working_directory: /Users/distiller/mac

commands:

  environment:
    steps:
      - run:
          name: Install dependencies
          command: |
              if [[ "$CODENAME" =~ "mac" ]]; then
                HOMEBREW_NO_AUTO_UPDATE=1 brew remove --force --ignore-dependencies node node@14 tcl-tk  # avoids these being unnecessarily updated as dependents later
                HOMEBREW_NO_AUTO_UPDATE=1 brew install \
                    gnupg \
                    coreutils \
                    gnu-time \
                    lcov \
                    libtool \
                    flex \
                    boost \
                    eigen \
                    libomp \
                    cairo
                echo "export PATH=/usr/local/opt/gnu-time/libexec/gnubin:/usr/local/opt/flex/bin:/usr/local/opt/bison/bin:\$PATH" >> $BASH_ENV
              else
                  zypper --non-interactive addrepo --no-gpgcheck "https://repo.mongodb.org/zypper/suse/15/mongodb-org/4.4/x86_64/" mongodb \
                  && zypper --non-interactive refresh \
                  && zypper --non-interactive update \
                  && zypper --non-interactive install --no-recommends \
                  git \
                  openssh \
                  tar \
                  gzip \
                  bzip2 \
                  xz \
                  curl \
                  time \
                  ca-certificates \
                  binutils \
                  elfutils \
                  awk \
                  make \
                  autoconf \
                  automake \
                  libtool \
                  flex \
                  bison \
                  gcc-c++ \
                  gdb \
                  lcov \
                  libyaml-devel \
                  jemalloc-devel \
                  boost-devel \
                  eigen3-devel \
                  cairo-devel \
                  sqlite3-devel \
                  mongodb-database-tools \
                  && zypper clean --all
              fi
      - run:
          name: Environment variables
          command: |
              if [[ "$CIRCLE_TAG" =~ ^v[0-9]+\.[0-9]+\.[0-9]+$ ]]; then
                echo "export VERSION=\`echo \$CIRCLE_TAG | sed -E 's/^v//'\`" >> $BASH_ENV
              else
                echo "export VERSION=0.0.0" >> $BASH_ENV
              fi
              echo "export VERSION_SAFE=\`echo \$VERSION | sed -E 's/\./_/g'\`" >> $BASH_ENV
              echo "export PREFIX=$CIRCLE_WORKING_DIRECTORY" >> $BASH_ENV
              echo "export PATH=\$PREFIX/bin:/usr/local/cuda/bin:\$PATH" >> $BASH_ENV
              echo "export CPLUS_INCLUDE_PATH=\$PREFIX/include:/usr/local/cuda/include:\$CPLUS_INCLUDE_PATH" >> $BASH_ENV
              echo "export LD_LIBRARY_PATH=\$PREFIX/lib64:\$PREFIX/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LD_LIBRARY_PATH" >> $BASH_ENV
              echo "export LIBRARY_PATH=\$PREFIX/lib64:\$PREFIX/lib:/usr/local/cuda/lib64/stubs:/usr/local/cuda/lib/stubs:\$LIBRARY_PATH" >> $BASH_ENV
              echo "export FORMAT=', \"real\": %e, \"user\": %U, \"system\": %S, \"memory\": %M, \"involuntary\": %c, \"voluntary\": %w'" >> $BASH_ENV

  end_if_pull_request:
    steps:
      - run: 
         name: End early if pull request
         command: |
            if [[ -n "$CIRCLE_PR_NUMBER" ]]; then
              circleci step halt
            fi
  codecov:
    steps:
      - run:
          name: Produce coverage report
          command: lcov --directory . --no-external --capture -o cov.info || echo
      - codecov/upload:
          file: cov.info

  build_cpp:
    description: Build a C++ package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              ./bootstrap
              ./configure --prefix="$PREFIX" $CONFIGURE_FLAGS || (cat config.log && exit 1)
              make install
      - run:
          name: Smoke test << parameters.dir >>
          command: |
            cd << parameters.dir >>
            if [[ -e smoke.sh ]]; then
              ./smoke.sh
            fi

  build_birch:
    description: Build a Birch package
    parameters:
      dir:
        description: Directory containing the package
        type: string
    steps:
      - run:
          name: Build << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch install --prefix="$PREFIX" $BIRCH_FLAGS || (cat config.log && exit 1)
          no_output_timeout: 30m
      - run:
          name: Smoke test << parameters.dir >>
          command: |
              cd << parameters.dir >>
              birch docs
              if [[ -e smoke.sh ]]; then
                ./smoke.sh
              fi
      - run:
          name: Unit test << parameters.dir >>
          command: |
              cd << parameters.dir >>
              if [[ -e test.sh && "$CODENAME" =~ "bench" ]]; then
                env time --format="$FORMAT" --output=time.txt ./test.sh  # env time to use GNU time, not Bash built-in time
                if [[ -e output/test.json && -n "$MONGODB_HOST" && -n "$MONGODB_USERNAME" && -n "$MONGODB_PASSWORD" ]]; then
                  # upload results to MongoDB Atlas
                  VERSION_LONG=`git describe --long || echo`
                  echo '{ "output": ' > mongodb.json
                  cat output/test.json >> mongodb.json
                  if [[ -e time.txt ]]; then
                    cat time.txt >> mongodb.json
                  fi
                  echo ", \"branch\": \"$CIRCLE_BRANCH\"" >> mongodb.json
                  echo ", \"version\": \"$VERSION_LONG\"" >> mongodb.json
                  echo '}' >> mongodb.json
                  COLLECTION=`echo << parameters.dir >> | sed -E 's/^[A-Z0-9a-z]+\///'`
                  mongoimport --uri mongodb+srv://$MONGODB_USERNAME:$MONGODB_PASSWORD@$MONGODB_HOST/test --collection $COLLECTION --file mongodb.json
                fi
              fi

jobs:
  build:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - checkout
      - environment
      - build_cpp:
          dir: numbirch
      - build_cpp:
          dir: membirch
      - build_cpp:
          dir: birch
      - build_birch:
          dir: libraries/Standard
      - build_birch:
          dir: libraries/Cairo
      - build_birch:
          dir: libraries/SQLite
      - persist_to_workspace:
          root: ..
          paths:
            - << parameters.os >>
      - codecov
      - end_if_pull_request

  test:
    parameters: 
      os:
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - attach_workspace:
          at: ..
      - build_birch:
          dir: tests/Test
      - codecov
      - end_if_pull_request

  example:
    parameters: 
      os:
        type: string
      dir:
        description: Directory containing the package
        type: string
    executor: << parameters.os >>
    steps:
      - environment
      - attach_workspace:
          at: ..
      - build_birch:
          dir: << parameters.dir >>
      - codecov
      - end_if_pull_request

  deploy:
    executor: default
    steps:
      - run:
          name: Trigger package update
          command: |
              curl -X POST https://circleci.com/api/v2/project/gh/lawmurray/download.indii.org/pipeline \
                --header "Circle-Token: $CIRCLE_TOKEN" \
                --header "content-type: application/json" \
                --data '{"branch": "main"}'

workflows:
  all:
    jobs:
      - build:
          matrix:
            parameters:
              os:
                - bench
                - cover
                - mac

      - test:
          matrix:
            parameters:
              os:
                - bench
                - cover
                - mac
          requires:
            - build-<< matrix.os >>

      - example:
          matrix:
            parameters:
              os:
                - bench
                - cover
                - mac
              dir:
                - examples/Ecology
                - examples/LinearRegression
                - examples/MixedGaussian
                - examples/MultiObjectTracking
                - examples/SIR
                - examples/VectorBorneDisease
          requires:
            - test-<< matrix.os >>

      - deploy:
          filters:
            tags:
              only: /^v.*/
            branches:
              ignore: /.*/
